
TDK_chassis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c250  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800c418  0800c418  0001c418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8e0  0800c8e0  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8e0  0800c8e0  0001c8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8e8  0800c8e8  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800c8e8  0800c8e8  0001c8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8f4  0800c8f4  0001c8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800c8f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000204  0800cafc  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  0800cafc  00020724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016399  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c9  00000000  00000000  000365cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00039698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  0003a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cde  00000000  00000000  0003b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015490  00000000  00000000  000622d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e06c4  00000000  00000000  00077766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157e2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac8  00000000  00000000  00157e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000204 	.word	0x20000204
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800c400 	.word	0x0800c400

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000208 	.word	0x20000208
 8000204:	0800c400 	.word	0x0800c400

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b94:	f000 b974 	b.w	8000e80 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <_Z10UART_setupv>:
int rx,tx;

uint8_t buffer_TX[sizeof(bool)];
uint8_t buffer_RX[4 * sizeof(float)];

void UART_setup() {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart4, buffer_RX, sizeof(buffer_RX));
 8000e88:	2210      	movs	r2, #16
 8000e8a:	4903      	ldr	r1, [pc, #12]	; (8000e98 <_Z10UART_setupv+0x14>)
 8000e8c:	4803      	ldr	r0, [pc, #12]	; (8000e9c <_Z10UART_setupv+0x18>)
 8000e8e:	f008 f89d 	bl	8008fcc <HAL_UART_Receive_DMA>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000023c 	.word	0x2000023c
 8000e9c:	200005b8 	.word	0x200005b8

08000ea0 <_Z40UART_TransmitData_Arrive_Destination_DMAP20__UART_HandleTypeDefb>:

void UART_TransmitData_Arrive_Destination_DMA(UART_HandleTypeDef *huart, bool arrive_destination) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
 8000eac:	78fa      	ldrb	r2, [r7, #3]
    memcpy(buffer_TX, &arrive_destination, sizeof(bool));
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <_Z40UART_TransmitData_Arrive_Destination_DMAP20__UART_HandleTypeDefb+0x24>)
 8000eb0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(huart, buffer_TX, sizeof(buffer_TX));
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4903      	ldr	r1, [pc, #12]	; (8000ec4 <_Z40UART_TransmitData_Arrive_Destination_DMAP20__UART_HandleTypeDefb+0x24>)
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f008 f80a 	bl	8008ed0 <HAL_UART_Transmit_DMA>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000238 	.word	0x20000238

08000ec8 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_>:
//    memcpy(data2, buffer_RX + sizeof(float), sizeof(float));
//    memcpy(data3, buffer_RX + 2 * sizeof(float), sizeof(float));
//    memcpy(data4, buffer_RX + 3 * sizeof(float), sizeof(float));
//    HAL_UART_Receive_IT(huart, buffer_RX, sizeof(buffer_RX));
//}
bool UART_ReceiveData_Status_DMA(UART_HandleTypeDef *huart, float *data1, float *data2, float *data3, float *data4) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
    if (huart == NULL || data1 == NULL || data2 == NULL || data3 == NULL || data4 == NULL) {
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00b      	beq.n	8000ef4 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x2c>
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d008      	beq.n	8000ef4 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x2c>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x2c>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x2c>
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x30>
        return false; // Return false if any pointer is invalid
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e024      	b.n	8000f42 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x7a>
    }

    // Attempt to receive data
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t *)buffer_RX,  sizeof(buffer_RX));
 8000ef8:	2210      	movs	r2, #16
 8000efa:	4914      	ldr	r1, [pc, #80]	; (8000f4c <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x84>)
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f008 f865 	bl	8008fcc <HAL_UART_Receive_DMA>
 8000f02:	4603      	mov	r3, r0
 8000f04:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x48>
        return false; // Return false if the reception fails
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e018      	b.n	8000f42 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x7a>
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x84>)
 8000f12:	681a      	ldr	r2, [r3, #0]
    }

    memcpy(data1, buffer_RX, sizeof(float));
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	601a      	str	r2, [r3, #0]
    memcpy(data2, buffer_RX + sizeof(float), sizeof(float));
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x88>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	601a      	str	r2, [r3, #0]
    memcpy(data3, buffer_RX + 2 * sizeof(float), sizeof(float));
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x8c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	601a      	str	r2, [r3, #0]
    memcpy(data4, buffer_RX + 3 * sizeof(float), sizeof(float));
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x90>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_DMA(huart, buffer_RX, sizeof(buffer_RX));
 8000f36:	2210      	movs	r2, #16
 8000f38:	4904      	ldr	r1, [pc, #16]	; (8000f4c <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_+0x84>)
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f008 f846 	bl	8008fcc <HAL_UART_Receive_DMA>
    return true;
 8000f40:	2301      	movs	r3, #1
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000023c 	.word	0x2000023c
 8000f50:	20000240 	.word	0x20000240
 8000f54:	20000244 	.word	0x20000244
 8000f58:	20000248 	.word	0x20000248

08000f5c <_Z13UART_TRANSMITv>:


void UART_TRANSMIT(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	UART_TransmitData_Arrive_Destination_DMA(&huart4, arrive);
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <_Z13UART_TRANSMITv+0x14>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <_Z13UART_TRANSMITv+0x18>)
 8000f68:	f7ff ff9a 	bl	8000ea0 <_Z40UART_TransmitData_Arrive_Destination_DMAP20__UART_HandleTypeDefb>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200002cd 	.word	0x200002cd
 8000f74:	200005b8 	.word	0x200005b8

08000f78 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_UART_TxCpltCallback+0x44>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d113      	bne.n	8000fb2 <HAL_UART_TxCpltCallback+0x3a>
    	tx++;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_UART_TxCpltCallback+0x48>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_UART_TxCpltCallback+0x48>)
 8000f92:	6013      	str	r3, [r2, #0]
        // Add transmission complete logic here
    	if (arrive == true){
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_UART_TxCpltCallback+0x4c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d105      	bne.n	8000fa8 <HAL_UART_TxCpltCallback+0x30>
    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <HAL_UART_TxCpltCallback+0x50>)
 8000fa2:	f006 f8a9 	bl	80070f8 <HAL_GPIO_WritePin>
    	}else {
    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
    	}
    }
}
 8000fa6:	e004      	b.n	8000fb2 <HAL_UART_TxCpltCallback+0x3a>
    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2120      	movs	r1, #32
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <HAL_UART_TxCpltCallback+0x50>)
 8000fae:	f006 f8a3 	bl	80070f8 <HAL_GPIO_WritePin>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40004c00 	.word	0x40004c00
 8000fc0:	20000234 	.word	0x20000234
 8000fc4:	200002cd 	.word	0x200002cd
 8000fc8:	40020000 	.word	0x40020000

08000fcc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	6078      	str	r0, [r7, #4]

    if (huart->Instance == UART4) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a2c      	ldr	r2, [pc, #176]	; (800108c <HAL_UART_RxCpltCallback+0xc0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d151      	bne.n	8001082 <HAL_UART_RxCpltCallback+0xb6>

    	float t_0 = statusData[0], t_1 = statusData[1], t_2 = statusData[2], t_3 = statusData[3];
 8000fde:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <HAL_UART_RxCpltCallback+0xc4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <HAL_UART_RxCpltCallback+0xc4>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b29      	ldr	r3, [pc, #164]	; (8001090 <HAL_UART_RxCpltCallback+0xc4>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <HAL_UART_RxCpltCallback+0xc4>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]

        if(UART_ReceiveData_Status_DMA(&huart4, &statusData[0], &statusData[1], &statusData[2], &statusData[3])) rx++;
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <HAL_UART_RxCpltCallback+0xc8>)
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <HAL_UART_RxCpltCallback+0xcc>)
 8000ffc:	4a27      	ldr	r2, [pc, #156]	; (800109c <HAL_UART_RxCpltCallback+0xd0>)
 8000ffe:	4924      	ldr	r1, [pc, #144]	; (8001090 <HAL_UART_RxCpltCallback+0xc4>)
 8001000:	4827      	ldr	r0, [pc, #156]	; (80010a0 <HAL_UART_RxCpltCallback+0xd4>)
 8001002:	f7ff ff61 	bl	8000ec8 <_Z27UART_ReceiveData_Status_DMAP20__UART_HandleTypeDefPfS1_S1_S1_>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <HAL_UART_RxCpltCallback+0x4c>
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <HAL_UART_RxCpltCallback+0xd8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <HAL_UART_RxCpltCallback+0xd8>)
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e004      	b.n	8001022 <HAL_UART_RxCpltCallback+0x56>
        else rx--;
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <HAL_UART_RxCpltCallback+0xd8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3b01      	subs	r3, #1
 800101e:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <HAL_UART_RxCpltCallback+0xd8>)
 8001020:	6013      	str	r3, [r2, #0]
//        		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//        }else if (statusData[0] > 0 && statusData[1] > 0 && statusData[2] > 0 && statusData[3] > 0){
//        		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//        }

        if(!(t_0 == statusData[0] && t_1 == statusData[1] && t_2 == statusData[2] && t_3 == statusData[3])){
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_UART_RxCpltCallback+0xc4>)
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ed97 7a05 	vldr	s14, [r7, #20]
 800102c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	d11d      	bne.n	8001072 <HAL_UART_RxCpltCallback+0xa6>
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_UART_RxCpltCallback+0xc4>)
 8001038:	edd3 7a01 	vldr	s15, [r3, #4]
 800103c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001040:	eeb4 7a67 	vcmp.f32	s14, s15
 8001044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001048:	d113      	bne.n	8001072 <HAL_UART_RxCpltCallback+0xa6>
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_UART_RxCpltCallback+0xc4>)
 800104c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001050:	ed97 7a03 	vldr	s14, [r7, #12]
 8001054:	eeb4 7a67 	vcmp.f32	s14, s15
 8001058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105c:	d109      	bne.n	8001072 <HAL_UART_RxCpltCallback+0xa6>
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_UART_RxCpltCallback+0xc4>)
 8001060:	edd3 7a03 	vldr	s15, [r3, #12]
 8001064:	ed97 7a02 	vldr	s14, [r7, #8]
 8001068:	eeb4 7a67 	vcmp.f32	s14, s15
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	d007      	beq.n	8001082 <HAL_UART_RxCpltCallback+0xb6>

        	nextPoint = 1;
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_UART_RxCpltCallback+0xdc>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
        	arrive = 0;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_UART_RxCpltCallback+0xe0>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
        	UART_TRANSMIT();
 800107e:	f7ff ff6d 	bl	8000f5c <_Z13UART_TRANSMITv>
        }
    }
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40004c00 	.word	0x40004c00
 8001090:	20000220 	.word	0x20000220
 8001094:	2000022c 	.word	0x2000022c
 8001098:	20000228 	.word	0x20000228
 800109c:	20000224 	.word	0x20000224
 80010a0:	200005b8 	.word	0x200005b8
 80010a4:	20000230 	.word	0x20000230
 80010a8:	20000000 	.word	0x20000000
 80010ac:	200002cd 	.word	0x200002cd

080010b0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80010be:	eef0 7ae7 	vabs.f32	s15, s15
 80010c2:	eeb0 0a67 	vmov.f32	s0, s15
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010da:	edc7 0a00 	vstr	s1, [r7]
 80010de:	edd7 0a00 	vldr	s1, [r7]
 80010e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010e6:	f009 f9b5 	bl	800a454 <atan2f>
 80010ea:	eef0 7a40 	vmov.f32	s15, s0
 80010ee:	eeb0 0a67 	vmov.f32	s0, s15
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001102:	ed97 0a01 	vldr	s0, [r7, #4]
 8001106:	f009 f871 	bl	800a1ec <cosf>
 800110a:	eef0 7a40 	vmov.f32	s15, s0
 800110e:	eeb0 0a67 	vmov.f32	s0, s15
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001122:	ed97 0a01 	vldr	s0, [r7, #4]
 8001126:	f009 f8dd 	bl	800a2e4 <sinf>
 800112a:	eef0 7a40 	vmov.f32	s15, s0
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_ZSt4fminff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001142:	edc7 0a00 	vstr	s1, [r7]
 8001146:	edd7 0a00 	vldr	s1, [r7]
 800114a:	ed97 0a01 	vldr	s0, [r7, #4]
 800114e:	f009 f891 	bl	800a274 <fminf>
 8001152:	eef0 7a40 	vmov.f32	s15, s0
 8001156:	eeb0 0a67 	vmov.f32	s0, s15
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_Z23cis_speedTransfer_modlev>:
int check_e = 0;

bool line_find = 0;
bool arrive = 0;

void cis_speedTransfer_modle(){
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	af00      	add	r7, sp, #0

	//rps
	encodersp(encRead);
 8001164:	482e      	ldr	r0, [pc, #184]	; (8001220 <_Z23cis_speedTransfer_modlev+0xc0>)
 8001166:	f003 fae7 	bl	8004738 <_Z9encoderspPf>

	// 0:right, 1:left
	//cm/s
	chassis_speed 	 = ((encRead[0] + encRead[1]) / 2) * (2 * pi * wheel_radius) / 2;
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <_Z23cis_speedTransfer_modlev+0xc0>)
 800116c:	ed93 7a00 	vldr	s14, [r3]
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <_Z23cis_speedTransfer_modlev+0xc0>)
 8001172:	edd3 7a01 	vldr	s15, [r3, #4]
 8001176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800117e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001182:	ee16 0a90 	vmov	r0, s13
 8001186:	f7ff f9a3 	bl	80004d0 <__aeabi_f2d>
 800118a:	4604      	mov	r4, r0
 800118c:	460d      	mov	r5, r1
 800118e:	4b25      	ldr	r3, [pc, #148]	; (8001224 <_Z23cis_speedTransfer_modlev+0xc4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f99c 	bl	80004d0 <__aeabi_f2d>
 8001198:	a31f      	add	r3, pc, #124	; (adr r3, 8001218 <_Z23cis_speedTransfer_modlev+0xb8>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff f9ef 	bl	8000580 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4620      	mov	r0, r4
 80011a8:	4629      	mov	r1, r5
 80011aa:	f7ff f9e9 	bl	8000580 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011be:	f7ff fb09 	bl	80007d4 <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fc89 	bl	8000ae0 <__aeabi_d2f>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a15      	ldr	r2, [pc, #84]	; (8001228 <_Z23cis_speedTransfer_modlev+0xc8>)
 80011d2:	6013      	str	r3, [r2, #0]

	//rps
	chassis_angspeed = ((encRead[0] - encRead[1]) / 2) * wheel_radius / chassis_radius / 2;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <_Z23cis_speedTransfer_modlev+0xc0>)
 80011d6:	ed93 7a00 	vldr	s14, [r3]
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <_Z23cis_speedTransfer_modlev+0xc0>)
 80011dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80011e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <_Z23cis_speedTransfer_modlev+0xc4>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <_Z23cis_speedTransfer_modlev+0xcc>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001200:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <_Z23cis_speedTransfer_modlev+0xd0>)
 800120a:	edc3 7a00 	vstr	s15, [r3]
}
 800120e:	bf00      	nop
 8001210:	bdb0      	pop	{r4, r5, r7, pc}
 8001212:	bf00      	nop
 8001214:	f3af 8000 	nop.w
 8001218:	f01b866e 	.word	0xf01b866e
 800121c:	401921f9 	.word	0x401921f9
 8001220:	2000025c 	.word	0x2000025c
 8001224:	20000004 	.word	0x20000004
 8001228:	20000254 	.word	0x20000254
 800122c:	20000008 	.word	0x20000008
 8001230:	20000258 	.word	0x20000258
 8001234:	00000000 	.word	0x00000000

08001238 <_Z25trans_speedTransfer_modleff>:
//input cm/s, rps
void trans_speedTransfer_modle(float chassis_sp, float chassis_angsp){
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001242:	edc7 0a00 	vstr	s1, [r7]

	//rps
	chassis_right_wheel_angspeed = (chassis_sp / (2 * pi) + chassis_radius * chassis_angsp) / wheel_radius * 2;
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff f942 	bl	80004d0 <__aeabi_f2d>
 800124c:	a33e      	add	r3, pc, #248	; (adr r3, 8001348 <_Z25trans_speedTransfer_modleff+0x110>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff fabf 	bl	80007d4 <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4614      	mov	r4, r2
 800125c:	461d      	mov	r5, r3
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <_Z25trans_speedTransfer_modleff+0x118>)
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	edd7 7a00 	vldr	s15, [r7]
 8001268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126c:	ee17 0a90 	vmov	r0, s15
 8001270:	f7ff f92e 	bl	80004d0 <__aeabi_f2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7fe ffca 	bl	8000214 <__adddf3>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4614      	mov	r4, r2
 8001286:	461d      	mov	r5, r3
 8001288:	4b32      	ldr	r3, [pc, #200]	; (8001354 <_Z25trans_speedTransfer_modleff+0x11c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f91f 	bl	80004d0 <__aeabi_f2d>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4620      	mov	r0, r4
 8001298:	4629      	mov	r1, r5
 800129a:	f7ff fa9b 	bl	80007d4 <__aeabi_ddiv>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	f7fe ffb3 	bl	8000214 <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc13 	bl	8000ae0 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a26      	ldr	r2, [pc, #152]	; (8001358 <_Z25trans_speedTransfer_modleff+0x120>)
 80012be:	6013      	str	r3, [r2, #0]
	chassis_left_wheel_angspeed  = (chassis_sp / (2 * pi) - chassis_radius * chassis_angsp) / wheel_radius * 2;
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff f905 	bl	80004d0 <__aeabi_f2d>
 80012c6:	a320      	add	r3, pc, #128	; (adr r3, 8001348 <_Z25trans_speedTransfer_modleff+0x110>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff fa82 	bl	80007d4 <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4614      	mov	r4, r2
 80012d6:	461d      	mov	r5, r3
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <_Z25trans_speedTransfer_modleff+0x118>)
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	edd7 7a00 	vldr	s15, [r7]
 80012e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e6:	ee17 0a90 	vmov	r0, s15
 80012ea:	f7ff f8f1 	bl	80004d0 <__aeabi_f2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7fe ff8b 	bl	8000210 <__aeabi_dsub>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4614      	mov	r4, r2
 8001300:	461d      	mov	r5, r3
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <_Z25trans_speedTransfer_modleff+0x11c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f8e2 	bl	80004d0 <__aeabi_f2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff fa5e 	bl	80007d4 <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	f7fe ff76 	bl	8000214 <__adddf3>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fbd6 	bl	8000ae0 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <_Z25trans_speedTransfer_modleff+0x124>)
 8001338:	6013      	str	r3, [r2, #0]
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bdb0      	pop	{r4, r5, r7, pc}
 8001342:	bf00      	nop
 8001344:	f3af 8000 	nop.w
 8001348:	f01b866e 	.word	0xf01b866e
 800134c:	401921f9 	.word	0x401921f9
 8001350:	20000008 	.word	0x20000008
 8001354:	20000004 	.word	0x20000004
 8001358:	2000024c 	.word	0x2000024c
 800135c:	20000250 	.word	0x20000250

08001360 <_Z14location_resetfff>:
void location_reset(float x, float y, float ang){
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	ed87 0a03 	vstr	s0, [r7, #12]
 800136a:	edc7 0a02 	vstr	s1, [r7, #8]
 800136e:	ed87 1a01 	vstr	s2, [r7, #4]

	map_x = x;
 8001372:	4a37      	ldr	r2, [pc, #220]	; (8001450 <_Z14location_resetfff+0xf0>)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6013      	str	r3, [r2, #0]
	map_y = y;
 8001378:	4a36      	ldr	r2, [pc, #216]	; (8001454 <_Z14location_resetfff+0xf4>)
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	6013      	str	r3, [r2, #0]
	map_theta_front = ang * pi / 180;
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff f8a6 	bl	80004d0 <__aeabi_f2d>
 8001384:	a330      	add	r3, pc, #192	; (adr r3, 8001448 <_Z14location_resetfff+0xe8>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff f8f9 	bl	8000580 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <_Z14location_resetfff+0xf8>)
 800139c:	f7ff fa1a 	bl	80007d4 <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fb9a 	bl	8000ae0 <__aeabi_d2f>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a2b      	ldr	r2, [pc, #172]	; (800145c <_Z14location_resetfff+0xfc>)
 80013b0:	6013      	str	r3, [r2, #0]
	map_theta_back = -1 * map_theta_front;
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <_Z14location_resetfff+0xfc>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	eef1 7a67 	vneg.f32	s15, s15
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <_Z14location_resetfff+0x100>)
 80013be:	edc3 7a00 	vstr	s15, [r3]

	goal_x = 0;
 80013c2:	4b28      	ldr	r3, [pc, #160]	; (8001464 <_Z14location_resetfff+0x104>)
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
	goal_y = 0;
 80013ca:	4b27      	ldr	r3, [pc, #156]	; (8001468 <_Z14location_resetfff+0x108>)
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
	to_theta = 0;
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <_Z14location_resetfff+0x10c>)
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
	goal_theta = 0;
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <_Z14location_resetfff+0x110>)
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]

	start_x = 0;
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <_Z14location_resetfff+0x114>)
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
	start_y = 0;
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <_Z14location_resetfff+0x118>)
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
	start_theta_front = 0;
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <_Z14location_resetfff+0x11c>)
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
	start_theta_back = 0;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <_Z14location_resetfff+0x120>)
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
	end_theta_front = 0;
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <_Z14location_resetfff+0x124>)
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

	last_x = 0;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <_Z14location_resetfff+0x128>)
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
	last_y = 0;
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <_Z14location_resetfff+0x12c>)
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
	last_theta = 0;
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <_Z14location_resetfff+0x130>)
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
	last_goal_theta = 0;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <_Z14location_resetfff+0x134>)
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	601a      	str	r2, [r3, #0]

	chassis_right_wheel_angspeed = 0;
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <_Z14location_resetfff+0x138>)
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
	chassis_left_wheel_angspeed = 0;
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <_Z14location_resetfff+0x13c>)
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	601a      	str	r2, [r3, #0]

	arrive = 1;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <_Z14location_resetfff+0x140>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	f01b866e 	.word	0xf01b866e
 800144c:	400921f9 	.word	0x400921f9
 8001450:	20000264 	.word	0x20000264
 8001454:	20000268 	.word	0x20000268
 8001458:	40668000 	.word	0x40668000
 800145c:	20000010 	.word	0x20000010
 8001460:	2000026c 	.word	0x2000026c
 8001464:	20000270 	.word	0x20000270
 8001468:	20000274 	.word	0x20000274
 800146c:	20000278 	.word	0x20000278
 8001470:	2000027c 	.word	0x2000027c
 8001474:	20000280 	.word	0x20000280
 8001478:	20000284 	.word	0x20000284
 800147c:	20000288 	.word	0x20000288
 8001480:	2000028c 	.word	0x2000028c
 8001484:	20000290 	.word	0x20000290
 8001488:	20000294 	.word	0x20000294
 800148c:	20000298 	.word	0x20000298
 8001490:	2000029c 	.word	0x2000029c
 8001494:	200002a0 	.word	0x200002a0
 8001498:	2000024c 	.word	0x2000024c
 800149c:	20000250 	.word	0x20000250
 80014a0:	200002cd 	.word	0x200002cd

080014a4 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 80014a4:	b5b0      	push	{r4, r5, r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
      return atan2(__type(__y), __type(__x));
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7fe fffc 	bl	80004ac <__aeabi_i2d>
 80014b4:	4604      	mov	r4, r0
 80014b6:	460d      	mov	r5, r1
 80014b8:	6838      	ldr	r0, [r7, #0]
 80014ba:	f7fe fff7 	bl	80004ac <__aeabi_i2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	ec43 2b11 	vmov	d1, r2, r3
 80014c6:	ec45 4b10 	vmov	d0, r4, r5
 80014ca:	f008 ff51 	bl	800a370 <atan2>
 80014ce:	eeb0 7a40 	vmov.f32	s14, s0
 80014d2:	eef0 7a60 	vmov.f32	s15, s1
    }
 80014d6:	eeb0 0a47 	vmov.f32	s0, s14
 80014da:	eef0 0a67 	vmov.f32	s1, s15
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}
 80014e4:	0000      	movs	r0, r0
	...

080014e8 <_Z13location_datai>:
//update location info 0 path, 1 integral, 2 stop
void location_data(int MODE){
 80014e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014ec:	ed2d 8b02 	vpush	{d8}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]

	cis_speedTransfer_modle();
 80014f6:	f7ff fe33 	bl	8001160 <_Z23cis_speedTransfer_modlev>

	//integral location
	if(MODE == 1){
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	f040 8199 	bne.w	8001834 <_Z13location_datai+0x34c>
		last_x = goal_x - map_x;
 8001502:	4bbd      	ldr	r3, [pc, #756]	; (80017f8 <_Z13location_datai+0x310>)
 8001504:	ed93 7a00 	vldr	s14, [r3]
 8001508:	4bbc      	ldr	r3, [pc, #752]	; (80017fc <_Z13location_datai+0x314>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001512:	4bbb      	ldr	r3, [pc, #748]	; (8001800 <_Z13location_datai+0x318>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
		last_y = goal_y - map_y;
 8001518:	4bba      	ldr	r3, [pc, #744]	; (8001804 <_Z13location_datai+0x31c>)
 800151a:	ed93 7a00 	vldr	s14, [r3]
 800151e:	4bba      	ldr	r3, [pc, #744]	; (8001808 <_Z13location_datai+0x320>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001528:	4bb8      	ldr	r3, [pc, #736]	; (800180c <_Z13location_datai+0x324>)
 800152a:	edc3 7a00 	vstr	s15, [r3]

		to_theta = std::atan2(last_y, last_x);
 800152e:	4bb7      	ldr	r3, [pc, #732]	; (800180c <_Z13location_datai+0x324>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	4bb2      	ldr	r3, [pc, #712]	; (8001800 <_Z13location_datai+0x318>)
 8001536:	ed93 7a00 	vldr	s14, [r3]
 800153a:	eef0 0a47 	vmov.f32	s1, s14
 800153e:	eeb0 0a67 	vmov.f32	s0, s15
 8001542:	f7ff fdc5 	bl	80010d0 <_ZSt5atan2ff>
 8001546:	eef0 7a40 	vmov.f32	s15, s0
 800154a:	4bb1      	ldr	r3, [pc, #708]	; (8001810 <_Z13location_datai+0x328>)
 800154c:	edc3 7a00 	vstr	s15, [r3]

		last_theta = std::fmin(std::abs(to_theta - map_theta_front), std::abs(to_theta - map_theta_back));
 8001550:	4baf      	ldr	r3, [pc, #700]	; (8001810 <_Z13location_datai+0x328>)
 8001552:	ed93 7a00 	vldr	s14, [r3]
 8001556:	4baf      	ldr	r3, [pc, #700]	; (8001814 <_Z13location_datai+0x32c>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001560:	eeb0 0a67 	vmov.f32	s0, s15
 8001564:	f7ff fda4 	bl	80010b0 <_ZSt3absf>
 8001568:	eeb0 8a40 	vmov.f32	s16, s0
 800156c:	4ba8      	ldr	r3, [pc, #672]	; (8001810 <_Z13location_datai+0x328>)
 800156e:	ed93 7a00 	vldr	s14, [r3]
 8001572:	4ba9      	ldr	r3, [pc, #676]	; (8001818 <_Z13location_datai+0x330>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157c:	eeb0 0a67 	vmov.f32	s0, s15
 8001580:	f7ff fd96 	bl	80010b0 <_ZSt3absf>
 8001584:	eef0 7a40 	vmov.f32	s15, s0
 8001588:	eef0 0a67 	vmov.f32	s1, s15
 800158c:	eeb0 0a48 	vmov.f32	s0, s16
 8001590:	f7ff fdd2 	bl	8001138 <_ZSt4fminff>
 8001594:	eef0 7a40 	vmov.f32	s15, s0
 8001598:	4ba0      	ldr	r3, [pc, #640]	; (800181c <_Z13location_datai+0x334>)
 800159a:	edc3 7a00 	vstr	s15, [r3]

		if(std::abs(goal_theta - map_theta_front) < pi / 2)
 800159e:	4ba0      	ldr	r3, [pc, #640]	; (8001820 <_Z13location_datai+0x338>)
 80015a0:	ed93 7a00 	vldr	s14, [r3]
 80015a4:	4b9b      	ldr	r3, [pc, #620]	; (8001814 <_Z13location_datai+0x32c>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ae:	eeb0 0a67 	vmov.f32	s0, s15
 80015b2:	f7ff fd7d 	bl	80010b0 <_ZSt3absf>
 80015b6:	ee10 3a10 	vmov	r3, s0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ff88 	bl	80004d0 <__aeabi_f2d>
 80015c0:	2301      	movs	r3, #1
 80015c2:	461e      	mov	r6, r3
 80015c4:	a386      	add	r3, pc, #536	; (adr r3, 80017e0 <_Z13location_datai+0x2f8>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7ff fa4b 	bl	8000a64 <__aeabi_dcmplt>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <_Z13location_datai+0xf0>
 80015d4:	2300      	movs	r3, #0
 80015d6:	461e      	mov	r6, r3
 80015d8:	b2f3      	uxtb	r3, r6
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d011      	beq.n	8001602 <_Z13location_datai+0x11a>
			last_goal_theta = std::abs(goal_theta - map_theta_front);
 80015de:	4b90      	ldr	r3, [pc, #576]	; (8001820 <_Z13location_datai+0x338>)
 80015e0:	ed93 7a00 	vldr	s14, [r3]
 80015e4:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <_Z13location_datai+0x32c>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	f7ff fd5d 	bl	80010b0 <_ZSt3absf>
 80015f6:	eef0 7a40 	vmov.f32	s15, s0
 80015fa:	4b8a      	ldr	r3, [pc, #552]	; (8001824 <_Z13location_datai+0x33c>)
 80015fc:	edc3 7a00 	vstr	s15, [r3]
 8001600:	e020      	b.n	8001644 <_Z13location_datai+0x15c>
		else
			last_goal_theta = 2 * pi - std::abs(goal_theta - map_theta_front);
 8001602:	4b87      	ldr	r3, [pc, #540]	; (8001820 <_Z13location_datai+0x338>)
 8001604:	ed93 7a00 	vldr	s14, [r3]
 8001608:	4b82      	ldr	r3, [pc, #520]	; (8001814 <_Z13location_datai+0x32c>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001612:	eeb0 0a67 	vmov.f32	s0, s15
 8001616:	f7ff fd4b 	bl	80010b0 <_ZSt3absf>
 800161a:	ee10 3a10 	vmov	r3, s0
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff56 	bl	80004d0 <__aeabi_f2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	a16f      	add	r1, pc, #444	; (adr r1, 80017e8 <_Z13location_datai+0x300>)
 800162a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800162e:	f7fe fdef 	bl	8000210 <__aeabi_dsub>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fa51 	bl	8000ae0 <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
 8001640:	4a78      	ldr	r2, [pc, #480]	; (8001824 <_Z13location_datai+0x33c>)
 8001642:	6013      	str	r3, [r2, #0]

		map_x += chassis_speed * timer_span * std::cos(map_theta_front);
 8001644:	4b78      	ldr	r3, [pc, #480]	; (8001828 <_Z13location_datai+0x340>)
 8001646:	ed93 7a00 	vldr	s14, [r3]
 800164a:	4b78      	ldr	r3, [pc, #480]	; (800182c <_Z13location_datai+0x344>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001654:	4b6f      	ldr	r3, [pc, #444]	; (8001814 <_Z13location_datai+0x32c>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	f7ff fd4b 	bl	80010f8 <_ZSt3cosf>
 8001662:	eef0 7a40 	vmov.f32	s15, s0
 8001666:	ee28 7a27 	vmul.f32	s14, s16, s15
 800166a:	4b64      	ldr	r3, [pc, #400]	; (80017fc <_Z13location_datai+0x314>)
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001674:	4b61      	ldr	r3, [pc, #388]	; (80017fc <_Z13location_datai+0x314>)
 8001676:	edc3 7a00 	vstr	s15, [r3]
		map_y += chassis_speed * timer_span * std::sin(map_theta_front);
 800167a:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <_Z13location_datai+0x340>)
 800167c:	ed93 7a00 	vldr	s14, [r3]
 8001680:	4b6a      	ldr	r3, [pc, #424]	; (800182c <_Z13location_datai+0x344>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee27 8a27 	vmul.f32	s16, s14, s15
 800168a:	4b62      	ldr	r3, [pc, #392]	; (8001814 <_Z13location_datai+0x32c>)
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	eeb0 0a67 	vmov.f32	s0, s15
 8001694:	f7ff fd40 	bl	8001118 <_ZSt3sinf>
 8001698:	eef0 7a40 	vmov.f32	s15, s0
 800169c:	ee28 7a27 	vmul.f32	s14, s16, s15
 80016a0:	4b59      	ldr	r3, [pc, #356]	; (8001808 <_Z13location_datai+0x320>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016aa:	4b57      	ldr	r3, [pc, #348]	; (8001808 <_Z13location_datai+0x320>)
 80016ac:	edc3 7a00 	vstr	s15, [r3]

		//record orientation change(rad)
		map_theta_front += chassis_angspeed * timer_span * 2 * pi;
 80016b0:	4b58      	ldr	r3, [pc, #352]	; (8001814 <_Z13location_datai+0x32c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff0b 	bl	80004d0 <__aeabi_f2d>
 80016ba:	4680      	mov	r8, r0
 80016bc:	4689      	mov	r9, r1
 80016be:	4b5c      	ldr	r3, [pc, #368]	; (8001830 <_Z13location_datai+0x348>)
 80016c0:	ed93 7a00 	vldr	s14, [r3]
 80016c4:	4b59      	ldr	r3, [pc, #356]	; (800182c <_Z13location_datai+0x344>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016d2:	ee17 0a90 	vmov	r0, s15
 80016d6:	f7fe fefb 	bl	80004d0 <__aeabi_f2d>
 80016da:	a345      	add	r3, pc, #276	; (adr r3, 80017f0 <_Z13location_datai+0x308>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ff4e 	bl	8000580 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4640      	mov	r0, r8
 80016ea:	4649      	mov	r1, r9
 80016ec:	f7fe fd92 	bl	8000214 <__adddf3>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff f9f2 	bl	8000ae0 <__aeabi_d2f>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a45      	ldr	r2, [pc, #276]	; (8001814 <_Z13location_datai+0x32c>)
 8001700:	6013      	str	r3, [r2, #0]

		if(map_theta_front > 0)
 8001702:	4b44      	ldr	r3, [pc, #272]	; (8001814 <_Z13location_datai+0x32c>)
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	dd13      	ble.n	800173a <_Z13location_datai+0x252>
			map_theta_back = map_theta_front - pi;
 8001712:	4b40      	ldr	r3, [pc, #256]	; (8001814 <_Z13location_datai+0x32c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe feda 	bl	80004d0 <__aeabi_f2d>
 800171c:	a334      	add	r3, pc, #208	; (adr r3, 80017f0 <_Z13location_datai+0x308>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7fe fd75 	bl	8000210 <__aeabi_dsub>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff f9d7 	bl	8000ae0 <__aeabi_d2f>
 8001732:	4603      	mov	r3, r0
 8001734:	4a38      	ldr	r2, [pc, #224]	; (8001818 <_Z13location_datai+0x330>)
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e012      	b.n	8001760 <_Z13location_datai+0x278>
		else
			map_theta_back = map_theta_front + pi;
 800173a:	4b36      	ldr	r3, [pc, #216]	; (8001814 <_Z13location_datai+0x32c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fec6 	bl	80004d0 <__aeabi_f2d>
 8001744:	a32a      	add	r3, pc, #168	; (adr r3, 80017f0 <_Z13location_datai+0x308>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe fd63 	bl	8000214 <__adddf3>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff f9c3 	bl	8000ae0 <__aeabi_d2f>
 800175a:	4603      	mov	r3, r0
 800175c:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <_Z13location_datai+0x330>)
 800175e:	6013      	str	r3, [r2, #0]

		//rad:+pi ~ -pi
		if(map_theta_front > std::atan2(0, -1) || map_theta_front <= -1 * std::atan2(0, -1))
 8001760:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <_Z13location_datai+0x32c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe feb3 	bl	80004d0 <__aeabi_f2d>
 800176a:	4680      	mov	r8, r0
 800176c:	4689      	mov	r9, r1
 800176e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fe96 	bl	80014a4 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001778:	ec53 2b10 	vmov	r2, r3, d0
 800177c:	4640      	mov	r0, r8
 800177e:	4649      	mov	r1, r9
 8001780:	f7ff f98e 	bl	8000aa0 <__aeabi_dcmpgt>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d119      	bne.n	80017be <_Z13location_datai+0x2d6>
 800178a:	4b22      	ldr	r3, [pc, #136]	; (8001814 <_Z13location_datai+0x32c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fe9e 	bl	80004d0 <__aeabi_f2d>
 8001794:	4680      	mov	r8, r0
 8001796:	4689      	mov	r9, r1
 8001798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fe81 	bl	80014a4 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017a2:	ec53 2b10 	vmov	r2, r3, d0
 80017a6:	4614      	mov	r4, r2
 80017a8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80017ac:	4622      	mov	r2, r4
 80017ae:	462b      	mov	r3, r5
 80017b0:	4640      	mov	r0, r8
 80017b2:	4649      	mov	r1, r9
 80017b4:	f7ff f960 	bl	8000a78 <__aeabi_dcmple>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <_Z13location_datai+0x2da>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <_Z13location_datai+0x2dc>
 80017c2:	2300      	movs	r3, #0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d074      	beq.n	80018b2 <_Z13location_datai+0x3ca>
			map_theta_front *= -1;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <_Z13location_datai+0x32c>)
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	eef1 7a67 	vneg.f32	s15, s15
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <_Z13location_datai+0x32c>)
 80017d4:	edc3 7a00 	vstr	s15, [r3]

		if(last_y <= 0.1 && path_dis != 0)
			arrive = 1;
	}

}
 80017d8:	e06b      	b.n	80018b2 <_Z13location_datai+0x3ca>
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	f01b866e 	.word	0xf01b866e
 80017e4:	3ff921f9 	.word	0x3ff921f9
 80017e8:	f01b866e 	.word	0xf01b866e
 80017ec:	401921f9 	.word	0x401921f9
 80017f0:	f01b866e 	.word	0xf01b866e
 80017f4:	400921f9 	.word	0x400921f9
 80017f8:	20000270 	.word	0x20000270
 80017fc:	20000264 	.word	0x20000264
 8001800:	20000294 	.word	0x20000294
 8001804:	20000274 	.word	0x20000274
 8001808:	20000268 	.word	0x20000268
 800180c:	20000298 	.word	0x20000298
 8001810:	20000278 	.word	0x20000278
 8001814:	20000010 	.word	0x20000010
 8001818:	2000026c 	.word	0x2000026c
 800181c:	2000029c 	.word	0x2000029c
 8001820:	2000027c 	.word	0x2000027c
 8001824:	200002a0 	.word	0x200002a0
 8001828:	20000254 	.word	0x20000254
 800182c:	2000000c 	.word	0x2000000c
 8001830:	20000258 	.word	0x20000258
	else if(MODE == 0){
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d13b      	bne.n	80018b2 <_Z13location_datai+0x3ca>
		last_y = path_dis - map_y;
 800183a:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <_Z13location_datai+0x3e0>)
 800183c:	ed93 7a00 	vldr	s14, [r3]
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <_Z13location_datai+0x3e4>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <_Z13location_datai+0x3e8>)
 800184c:	edc3 7a00 	vstr	s15, [r3]
		if(path_dis)
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <_Z13location_datai+0x3e0>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	eef5 7a40 	vcmp.f32	s15, #0.0
 800185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185e:	d00f      	beq.n	8001880 <_Z13location_datai+0x398>
			map_y += chassis_speed * timer_span;
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <_Z13location_datai+0x3ec>)
 8001862:	ed93 7a00 	vldr	s14, [r3]
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <_Z13location_datai+0x3f0>)
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <_Z13location_datai+0x3e4>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <_Z13location_datai+0x3e4>)
 800187c:	edc3 7a00 	vstr	s15, [r3]
		if(last_y <= 0.1 && path_dis != 0)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_Z13location_datai+0x3e8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe23 	bl	80004d0 <__aeabi_f2d>
 800188a:	a30d      	add	r3, pc, #52	; (adr r3, 80018c0 <_Z13location_datai+0x3d8>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7ff f8f2 	bl	8000a78 <__aeabi_dcmple>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d100      	bne.n	800189c <_Z13location_datai+0x3b4>
}
 800189a:	e00a      	b.n	80018b2 <_Z13location_datai+0x3ca>
		if(last_y <= 0.1 && path_dis != 0)
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <_Z13location_datai+0x3e0>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	d002      	beq.n	80018b2 <_Z13location_datai+0x3ca>
			arrive = 1;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <_Z13location_datai+0x3f4>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	ecbd 8b02 	vpop	{d8}
 80018bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018c0:	9999999a 	.word	0x9999999a
 80018c4:	3fb99999 	.word	0x3fb99999
 80018c8:	2000071c 	.word	0x2000071c
 80018cc:	20000268 	.word	0x20000268
 80018d0:	20000298 	.word	0x20000298
 80018d4:	20000254 	.word	0x20000254
 80018d8:	2000000c 	.word	0x2000000c
 80018dc:	200002cd 	.word	0x200002cd

080018e0 <_Z15integral_movetofff>:
//goto (x,y), orientation 180 ~ -180 degree，input 1000 to not spin
void integral_moveto(float x, float y, float orientation){
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80018ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80018ee:	ed87 1a01 	vstr	s2, [r7, #4]

	bool direction = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	75fb      	strb	r3, [r7, #23]
	bool ar = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	75bb      	strb	r3, [r7, #22]
	bool Correction = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	757b      	strb	r3, [r7, #21]

	arrive = 0;
 80018fe:	4bbe      	ldr	r3, [pc, #760]	; (8001bf8 <_Z15integral_movetofff+0x318>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
	mode = 0;
 8001904:	4bbd      	ldr	r3, [pc, #756]	; (8001bfc <_Z15integral_movetofff+0x31c>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]

	SP = 0;
 800190a:	4bbd      	ldr	r3, [pc, #756]	; (8001c00 <_Z15integral_movetofff+0x320>)
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
	spin = 0;
 8001912:	4bbc      	ldr	r3, [pc, #752]	; (8001c04 <_Z15integral_movetofff+0x324>)
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

	start_x = map_x;
 800191a:	4bbb      	ldr	r3, [pc, #748]	; (8001c08 <_Z15integral_movetofff+0x328>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4abb      	ldr	r2, [pc, #748]	; (8001c0c <_Z15integral_movetofff+0x32c>)
 8001920:	6013      	str	r3, [r2, #0]
	start_y = map_y;
 8001922:	4bbb      	ldr	r3, [pc, #748]	; (8001c10 <_Z15integral_movetofff+0x330>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4abb      	ldr	r2, [pc, #748]	; (8001c14 <_Z15integral_movetofff+0x334>)
 8001928:	6013      	str	r3, [r2, #0]
	start_theta_front = map_theta_front;
 800192a:	4bbb      	ldr	r3, [pc, #748]	; (8001c18 <_Z15integral_movetofff+0x338>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4abb      	ldr	r2, [pc, #748]	; (8001c1c <_Z15integral_movetofff+0x33c>)
 8001930:	6013      	str	r3, [r2, #0]
	end_theta_front = map_theta_front;
 8001932:	4bb9      	ldr	r3, [pc, #740]	; (8001c18 <_Z15integral_movetofff+0x338>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4aba      	ldr	r2, [pc, #744]	; (8001c20 <_Z15integral_movetofff+0x340>)
 8001938:	6013      	str	r3, [r2, #0]

	if(start_theta_front > 0)
 800193a:	4bb8      	ldr	r3, [pc, #736]	; (8001c1c <_Z15integral_movetofff+0x33c>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	dd13      	ble.n	8001972 <_Z15integral_movetofff+0x92>
		start_theta_back = start_theta_front - pi;
 800194a:	4bb4      	ldr	r3, [pc, #720]	; (8001c1c <_Z15integral_movetofff+0x33c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fdbe 	bl	80004d0 <__aeabi_f2d>
 8001954:	a39e      	add	r3, pc, #632	; (adr r3, 8001bd0 <_Z15integral_movetofff+0x2f0>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe fc59 	bl	8000210 <__aeabi_dsub>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f8bb 	bl	8000ae0 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	4aad      	ldr	r2, [pc, #692]	; (8001c24 <_Z15integral_movetofff+0x344>)
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e012      	b.n	8001998 <_Z15integral_movetofff+0xb8>
	else
		start_theta_back = start_theta_front + pi;
 8001972:	4baa      	ldr	r3, [pc, #680]	; (8001c1c <_Z15integral_movetofff+0x33c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fdaa 	bl	80004d0 <__aeabi_f2d>
 800197c:	a394      	add	r3, pc, #592	; (adr r3, 8001bd0 <_Z15integral_movetofff+0x2f0>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe fc47 	bl	8000214 <__adddf3>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f7ff f8a7 	bl	8000ae0 <__aeabi_d2f>
 8001992:	4603      	mov	r3, r0
 8001994:	4aa3      	ldr	r2, [pc, #652]	; (8001c24 <_Z15integral_movetofff+0x344>)
 8001996:	6013      	str	r3, [r2, #0]

	goal_x = x;
 8001998:	4aa3      	ldr	r2, [pc, #652]	; (8001c28 <_Z15integral_movetofff+0x348>)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6013      	str	r3, [r2, #0]
	goal_y = y;
 800199e:	4aa3      	ldr	r2, [pc, #652]	; (8001c2c <_Z15integral_movetofff+0x34c>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	6013      	str	r3, [r2, #0]
	goal_theta = orientation * pi / 180;
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7fe fd93 	bl	80004d0 <__aeabi_f2d>
 80019aa:	a389      	add	r3, pc, #548	; (adr r3, 8001bd0 <_Z15integral_movetofff+0x2f0>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	f7fe fde6 	bl	8000580 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b9b      	ldr	r3, [pc, #620]	; (8001c30 <_Z15integral_movetofff+0x350>)
 80019c2:	f7fe ff07 	bl	80007d4 <__aeabi_ddiv>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f887 	bl	8000ae0 <__aeabi_d2f>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a97      	ldr	r2, [pc, #604]	; (8001c34 <_Z15integral_movetofff+0x354>)
 80019d6:	6013      	str	r3, [r2, #0]

	location_data(1);
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff fd85 	bl	80014e8 <_Z13location_datai>

	//forward or backward
	if(std::abs(map_theta_front - to_theta) > pi / 2 && std::abs(map_theta_front - to_theta) < 1.5 * pi)
 80019de:	4b8e      	ldr	r3, [pc, #568]	; (8001c18 <_Z15integral_movetofff+0x338>)
 80019e0:	ed93 7a00 	vldr	s14, [r3]
 80019e4:	4b94      	ldr	r3, [pc, #592]	; (8001c38 <_Z15integral_movetofff+0x358>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ee:	eeb0 0a67 	vmov.f32	s0, s15
 80019f2:	f7ff fb5d 	bl	80010b0 <_ZSt3absf>
 80019f6:	ee10 3a10 	vmov	r3, s0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fd68 	bl	80004d0 <__aeabi_f2d>
 8001a00:	a375      	add	r3, pc, #468	; (adr r3, 8001bd8 <_Z15integral_movetofff+0x2f8>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7ff f84b 	bl	8000aa0 <__aeabi_dcmpgt>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01a      	beq.n	8001a46 <_Z15integral_movetofff+0x166>
 8001a10:	4b81      	ldr	r3, [pc, #516]	; (8001c18 <_Z15integral_movetofff+0x338>)
 8001a12:	ed93 7a00 	vldr	s14, [r3]
 8001a16:	4b88      	ldr	r3, [pc, #544]	; (8001c38 <_Z15integral_movetofff+0x358>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a20:	eeb0 0a67 	vmov.f32	s0, s15
 8001a24:	f7ff fb44 	bl	80010b0 <_ZSt3absf>
 8001a28:	ee10 3a10 	vmov	r3, s0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd4f 	bl	80004d0 <__aeabi_f2d>
 8001a32:	a36b      	add	r3, pc, #428	; (adr r3, 8001be0 <_Z15integral_movetofff+0x300>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7ff f814 	bl	8000a64 <__aeabi_dcmplt>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <_Z15integral_movetofff+0x166>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <_Z15integral_movetofff+0x168>
 8001a46:	2300      	movs	r3, #0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <_Z15integral_movetofff+0x172>
		direction = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]
 8001a50:	e001      	b.n	8001a56 <_Z15integral_movetofff+0x176>
	else
		direction = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]

	while(!arrive){
 8001a56:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <_Z15integral_movetofff+0x318>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 84a0 	bne.w	80023a0 <_Z15integral_movetofff+0xac0>

		//spin forward
		if(((std::abs(map_theta_front - to_theta) > pi / 180) && std::abs(map_theta_front - to_theta) <= pi * 359 / 180) && (std::abs(last_x) >= 1 ||
 8001a60:	4b6d      	ldr	r3, [pc, #436]	; (8001c18 <_Z15integral_movetofff+0x338>)
 8001a62:	ed93 7a00 	vldr	s14, [r3]
 8001a66:	4b74      	ldr	r3, [pc, #464]	; (8001c38 <_Z15integral_movetofff+0x358>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a70:	eeb0 0a67 	vmov.f32	s0, s15
 8001a74:	f7ff fb1c 	bl	80010b0 <_ZSt3absf>
 8001a78:	ee10 3a10 	vmov	r3, s0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd27 	bl	80004d0 <__aeabi_f2d>
			std::abs(last_y) >= 1) && direction && !ar){
 8001a82:	a359      	add	r3, pc, #356	; (adr r3, 8001be8 <_Z15integral_movetofff+0x308>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7ff f80a 	bl	8000aa0 <__aeabi_dcmpgt>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d043      	beq.n	8001b1a <_Z15integral_movetofff+0x23a>
		if(((std::abs(map_theta_front - to_theta) > pi / 180) && std::abs(map_theta_front - to_theta) <= pi * 359 / 180) && (std::abs(last_x) >= 1 ||
 8001a92:	4b61      	ldr	r3, [pc, #388]	; (8001c18 <_Z15integral_movetofff+0x338>)
 8001a94:	ed93 7a00 	vldr	s14, [r3]
 8001a98:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <_Z15integral_movetofff+0x358>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa6:	f7ff fb03 	bl	80010b0 <_ZSt3absf>
 8001aaa:	ee10 3a10 	vmov	r3, s0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd0e 	bl	80004d0 <__aeabi_f2d>
 8001ab4:	a34e      	add	r3, pc, #312	; (adr r3, 8001bf0 <_Z15integral_movetofff+0x310>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe ffdd 	bl	8000a78 <__aeabi_dcmple>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d02a      	beq.n	8001b1a <_Z15integral_movetofff+0x23a>
 8001ac4:	4b5d      	ldr	r3, [pc, #372]	; (8001c3c <_Z15integral_movetofff+0x35c>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ace:	f7ff faef 	bl	80010b0 <_ZSt3absf>
 8001ad2:	eef0 7a40 	vmov.f32	s15, s0
 8001ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae2:	da0f      	bge.n	8001b04 <_Z15integral_movetofff+0x224>
			std::abs(last_y) >= 1) && direction && !ar){
 8001ae4:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <_Z15integral_movetofff+0x360>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	eeb0 0a67 	vmov.f32	s0, s15
 8001aee:	f7ff fadf 	bl	80010b0 <_ZSt3absf>
 8001af2:	eef0 7a40 	vmov.f32	s15, s0
		if(((std::abs(map_theta_front - to_theta) > pi / 180) && std::abs(map_theta_front - to_theta) <= pi * 359 / 180) && (std::abs(last_x) >= 1 ||
 8001af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	db0a      	blt.n	8001b1a <_Z15integral_movetofff+0x23a>
			std::abs(last_y) >= 1) && direction && !ar){
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <_Z15integral_movetofff+0x23a>
 8001b0a:	7dbb      	ldrb	r3, [r7, #22]
 8001b0c:	f083 0301 	eor.w	r3, r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <_Z15integral_movetofff+0x23a>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <_Z15integral_movetofff+0x23c>
 8001b1a:	2300      	movs	r3, #0
		if(((std::abs(map_theta_front - to_theta) > pi / 180) && std::abs(map_theta_front - to_theta) <= pi * 359 / 180) && (std::abs(last_x) >= 1 ||
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8113 	beq.w	8001d48 <_Z15integral_movetofff+0x468>

			mode = 1;
 8001b22:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <_Z15integral_movetofff+0x31c>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
			check_sf++;
 8001b28:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <_Z15integral_movetofff+0x364>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	4a45      	ldr	r2, [pc, #276]	; (8001c44 <_Z15integral_movetofff+0x364>)
 8001b30:	6013      	str	r3, [r2, #0]

			if(!Correction){
 8001b32:	7d7b      	ldrb	r3, [r7, #21]
 8001b34:	f083 0301 	eor.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 809d 	beq.w	8001c7a <_Z15integral_movetofff+0x39a>
				if(((map_theta_front > to_theta && std::abs(map_theta_front - to_theta) < pi * 1.5)) ||
 8001b40:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <_Z15integral_movetofff+0x338>)
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <_Z15integral_movetofff+0x358>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	dd18      	ble.n	8001b88 <_Z15integral_movetofff+0x2a8>
 8001b56:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <_Z15integral_movetofff+0x338>)
 8001b58:	ed93 7a00 	vldr	s14, [r3]
 8001b5c:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <_Z15integral_movetofff+0x358>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b66:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6a:	f7ff faa1 	bl	80010b0 <_ZSt3absf>
 8001b6e:	ee10 3a10 	vmov	r3, s0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fcac 	bl	80004d0 <__aeabi_f2d>
 8001b78:	a319      	add	r3, pc, #100	; (adr r3, 8001be0 <_Z15integral_movetofff+0x300>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe ff71 	bl	8000a64 <__aeabi_dcmplt>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d120      	bne.n	8001bca <_Z15integral_movetofff+0x2ea>
					(std::abs(map_theta_front - to_theta) > pi * 1.5 && map_theta_front < 0))
 8001b88:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <_Z15integral_movetofff+0x338>)
 8001b8a:	ed93 7a00 	vldr	s14, [r3]
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <_Z15integral_movetofff+0x358>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9c:	f7ff fa88 	bl	80010b0 <_ZSt3absf>
 8001ba0:	ee10 3a10 	vmov	r3, s0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fc93 	bl	80004d0 <__aeabi_f2d>
				if(((map_theta_front > to_theta && std::abs(map_theta_front - to_theta) < pi * 1.5)) ||
 8001baa:	a30d      	add	r3, pc, #52	; (adr r3, 8001be0 <_Z15integral_movetofff+0x300>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f7fe ff76 	bl	8000aa0 <__aeabi_dcmpgt>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d046      	beq.n	8001c48 <_Z15integral_movetofff+0x368>
					(std::abs(map_theta_front - to_theta) > pi * 1.5 && map_theta_front < 0))
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <_Z15integral_movetofff+0x338>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	d53e      	bpl.n	8001c48 <_Z15integral_movetofff+0x368>
				if(((map_theta_front > to_theta && std::abs(map_theta_front - to_theta) < pi * 1.5)) ||
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e03d      	b.n	8001c4a <_Z15integral_movetofff+0x36a>
 8001bce:	bf00      	nop
 8001bd0:	f01b866e 	.word	0xf01b866e
 8001bd4:	400921f9 	.word	0x400921f9
 8001bd8:	f01b866e 	.word	0xf01b866e
 8001bdc:	3ff921f9 	.word	0x3ff921f9
 8001be0:	7414a4d2 	.word	0x7414a4d2
 8001be4:	4012d97b 	.word	0x4012d97b
 8001be8:	a50de270 	.word	0xa50de270
 8001bec:	3f91df45 	.word	0x3f91df45
 8001bf0:	aa76788b 	.word	0xaa76788b
 8001bf4:	4019101a 	.word	0x4019101a
 8001bf8:	200002cd 	.word	0x200002cd
 8001bfc:	200002b0 	.word	0x200002b0
 8001c00:	200002a4 	.word	0x200002a4
 8001c04:	200002a8 	.word	0x200002a8
 8001c08:	20000264 	.word	0x20000264
 8001c0c:	20000280 	.word	0x20000280
 8001c10:	20000268 	.word	0x20000268
 8001c14:	20000284 	.word	0x20000284
 8001c18:	20000010 	.word	0x20000010
 8001c1c:	20000288 	.word	0x20000288
 8001c20:	20000290 	.word	0x20000290
 8001c24:	2000028c 	.word	0x2000028c
 8001c28:	20000270 	.word	0x20000270
 8001c2c:	20000274 	.word	0x20000274
 8001c30:	40668000 	.word	0x40668000
 8001c34:	2000027c 	.word	0x2000027c
 8001c38:	20000278 	.word	0x20000278
 8001c3c:	20000294 	.word	0x20000294
 8001c40:	20000298 	.word	0x20000298
 8001c44:	200002b4 	.word	0x200002b4
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <_Z15integral_movetofff+0x386>
					trans_speedTransfer_modle(0, -1 * spin);
 8001c4e:	4bae      	ldr	r3, [pc, #696]	; (8001f08 <_Z15integral_movetofff+0x628>)
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	eef1 7a67 	vneg.f32	s15, s15
 8001c58:	eef0 0a67 	vmov.f32	s1, s15
 8001c5c:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8001f0c <_Z15integral_movetofff+0x62c>
 8001c60:	f7ff faea 	bl	8001238 <_Z25trans_speedTransfer_modleff>
 8001c64:	e06c      	b.n	8001d40 <_Z15integral_movetofff+0x460>
				else
					trans_speedTransfer_modle(0, spin);
 8001c66:	4ba8      	ldr	r3, [pc, #672]	; (8001f08 <_Z15integral_movetofff+0x628>)
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	eef0 0a67 	vmov.f32	s1, s15
 8001c70:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 8001f0c <_Z15integral_movetofff+0x62c>
 8001c74:	f7ff fae0 	bl	8001238 <_Z25trans_speedTransfer_modleff>
 8001c78:	e062      	b.n	8001d40 <_Z15integral_movetofff+0x460>
			}
			else{
				spin = 0;
 8001c7a:	4ba3      	ldr	r3, [pc, #652]	; (8001f08 <_Z15integral_movetofff+0x628>)
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

				if(((map_theta_front > to_theta && std::abs(map_theta_front - to_theta) < pi * 1.5)) ||
 8001c82:	4ba3      	ldr	r3, [pc, #652]	; (8001f10 <_Z15integral_movetofff+0x630>)
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	4ba2      	ldr	r3, [pc, #648]	; (8001f14 <_Z15integral_movetofff+0x634>)
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c96:	dd18      	ble.n	8001cca <_Z15integral_movetofff+0x3ea>
 8001c98:	4b9d      	ldr	r3, [pc, #628]	; (8001f10 <_Z15integral_movetofff+0x630>)
 8001c9a:	ed93 7a00 	vldr	s14, [r3]
 8001c9e:	4b9d      	ldr	r3, [pc, #628]	; (8001f14 <_Z15integral_movetofff+0x634>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cac:	f7ff fa00 	bl	80010b0 <_ZSt3absf>
 8001cb0:	ee10 3a10 	vmov	r3, s0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc0b 	bl	80004d0 <__aeabi_f2d>
 8001cba:	a38d      	add	r3, pc, #564	; (adr r3, 8001ef0 <_Z15integral_movetofff+0x610>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fed0 	bl	8000a64 <__aeabi_dcmplt>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d120      	bne.n	8001d0c <_Z15integral_movetofff+0x42c>
					(std::abs(map_theta_front - to_theta) > pi * 1.5 && map_theta_front < 0))
 8001cca:	4b91      	ldr	r3, [pc, #580]	; (8001f10 <_Z15integral_movetofff+0x630>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	4b90      	ldr	r3, [pc, #576]	; (8001f14 <_Z15integral_movetofff+0x634>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cda:	eeb0 0a67 	vmov.f32	s0, s15
 8001cde:	f7ff f9e7 	bl	80010b0 <_ZSt3absf>
 8001ce2:	ee10 3a10 	vmov	r3, s0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fbf2 	bl	80004d0 <__aeabi_f2d>
				if(((map_theta_front > to_theta && std::abs(map_theta_front - to_theta) < pi * 1.5)) ||
 8001cec:	a380      	add	r3, pc, #512	; (adr r3, 8001ef0 <_Z15integral_movetofff+0x610>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fed5 	bl	8000aa0 <__aeabi_dcmpgt>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <_Z15integral_movetofff+0x430>
					(std::abs(map_theta_front - to_theta) > pi * 1.5 && map_theta_front < 0))
 8001cfc:	4b84      	ldr	r3, [pc, #528]	; (8001f10 <_Z15integral_movetofff+0x630>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	d501      	bpl.n	8001d10 <_Z15integral_movetofff+0x430>
				if(((map_theta_front > to_theta && std::abs(map_theta_front - to_theta) < pi * 1.5)) ||
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <_Z15integral_movetofff+0x432>
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <_Z15integral_movetofff+0x44e>
					trans_speedTransfer_modle(0, -1 * Correction_sp);
 8001d16:	4b80      	ldr	r3, [pc, #512]	; (8001f18 <_Z15integral_movetofff+0x638>)
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	eef1 7a67 	vneg.f32	s15, s15
 8001d20:	eef0 0a67 	vmov.f32	s1, s15
 8001d24:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8001f0c <_Z15integral_movetofff+0x62c>
 8001d28:	f7ff fa86 	bl	8001238 <_Z25trans_speedTransfer_modleff>
 8001d2c:	e008      	b.n	8001d40 <_Z15integral_movetofff+0x460>
				else
					trans_speedTransfer_modle(0, Correction_sp);
 8001d2e:	4b7a      	ldr	r3, [pc, #488]	; (8001f18 <_Z15integral_movetofff+0x638>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	eef0 0a67 	vmov.f32	s1, s15
 8001d38:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8001f0c <_Z15integral_movetofff+0x62c>
 8001d3c:	f7ff fa7c 	bl	8001238 <_Z25trans_speedTransfer_modleff>
			}
			arrive = 0;
 8001d40:	4b76      	ldr	r3, [pc, #472]	; (8001f1c <_Z15integral_movetofff+0x63c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	e686      	b.n	8001a56 <_Z15integral_movetofff+0x176>
		}
		//spin backward
		else if((std::abs(map_theta_back - to_theta) > pi / 180 && std::abs(map_theta_back - to_theta) <= pi * 359 / 180) && (std::abs(last_x) >= 1 ||
 8001d48:	4b75      	ldr	r3, [pc, #468]	; (8001f20 <_Z15integral_movetofff+0x640>)
 8001d4a:	ed93 7a00 	vldr	s14, [r3]
 8001d4e:	4b71      	ldr	r3, [pc, #452]	; (8001f14 <_Z15integral_movetofff+0x634>)
 8001d50:	edd3 7a00 	vldr	s15, [r3]
 8001d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d58:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5c:	f7ff f9a8 	bl	80010b0 <_ZSt3absf>
 8001d60:	ee10 3a10 	vmov	r3, s0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fbb3 	bl	80004d0 <__aeabi_f2d>
			std::abs(last_y) >= 1) && !direction && !ar){
 8001d6a:	a363      	add	r3, pc, #396	; (adr r3, 8001ef8 <_Z15integral_movetofff+0x618>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fe96 	bl	8000aa0 <__aeabi_dcmpgt>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d046      	beq.n	8001e08 <_Z15integral_movetofff+0x528>
		else if((std::abs(map_theta_back - to_theta) > pi / 180 && std::abs(map_theta_back - to_theta) <= pi * 359 / 180) && (std::abs(last_x) >= 1 ||
 8001d7a:	4b69      	ldr	r3, [pc, #420]	; (8001f20 <_Z15integral_movetofff+0x640>)
 8001d7c:	ed93 7a00 	vldr	s14, [r3]
 8001d80:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <_Z15integral_movetofff+0x634>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8e:	f7ff f98f 	bl	80010b0 <_ZSt3absf>
 8001d92:	ee10 3a10 	vmov	r3, s0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fb9a 	bl	80004d0 <__aeabi_f2d>
 8001d9c:	a358      	add	r3, pc, #352	; (adr r3, 8001f00 <_Z15integral_movetofff+0x620>)
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	f7fe fe69 	bl	8000a78 <__aeabi_dcmple>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d02d      	beq.n	8001e08 <_Z15integral_movetofff+0x528>
 8001dac:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <_Z15integral_movetofff+0x644>)
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	eeb0 0a67 	vmov.f32	s0, s15
 8001db6:	f7ff f97b 	bl	80010b0 <_ZSt3absf>
 8001dba:	eef0 7a40 	vmov.f32	s15, s0
 8001dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	da0f      	bge.n	8001dec <_Z15integral_movetofff+0x50c>
			std::abs(last_y) >= 1) && !direction && !ar){
 8001dcc:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <_Z15integral_movetofff+0x648>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd6:	f7ff f96b 	bl	80010b0 <_ZSt3absf>
 8001dda:	eef0 7a40 	vmov.f32	s15, s0
		else if((std::abs(map_theta_back - to_theta) > pi / 180 && std::abs(map_theta_back - to_theta) <= pi * 359 / 180) && (std::abs(last_x) >= 1 ||
 8001dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dea:	db0d      	blt.n	8001e08 <_Z15integral_movetofff+0x528>
			std::abs(last_y) >= 1) && !direction && !ar){
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	f083 0301 	eor.w	r3, r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <_Z15integral_movetofff+0x528>
 8001df8:	7dbb      	ldrb	r3, [r7, #22]
 8001dfa:	f083 0301 	eor.w	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <_Z15integral_movetofff+0x528>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <_Z15integral_movetofff+0x52a>
 8001e08:	2300      	movs	r3, #0
		else if((std::abs(map_theta_back - to_theta) > pi / 180 && std::abs(map_theta_back - to_theta) <= pi * 359 / 180) && (std::abs(last_x) >= 1 ||
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80f9 	beq.w	8002002 <_Z15integral_movetofff+0x722>

			mode = 1;
 8001e10:	4b46      	ldr	r3, [pc, #280]	; (8001f2c <_Z15integral_movetofff+0x64c>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
			check_sb++;
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <_Z15integral_movetofff+0x650>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <_Z15integral_movetofff+0x650>)
 8001e1e:	6013      	str	r3, [r2, #0]

			if(!Correction){
 8001e20:	7d7b      	ldrb	r3, [r7, #21]
 8001e22:	f083 0301 	eor.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8083 	beq.w	8001f34 <_Z15integral_movetofff+0x654>
				if((map_theta_back > to_theta  && std::abs(map_theta_back - to_theta) < pi * 1.5)||
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <_Z15integral_movetofff+0x640>)
 8001e30:	ed93 7a00 	vldr	s14, [r3]
 8001e34:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <_Z15integral_movetofff+0x634>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	dd18      	ble.n	8001e76 <_Z15integral_movetofff+0x596>
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <_Z15integral_movetofff+0x640>)
 8001e46:	ed93 7a00 	vldr	s14, [r3]
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <_Z15integral_movetofff+0x634>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e54:	eeb0 0a67 	vmov.f32	s0, s15
 8001e58:	f7ff f92a 	bl	80010b0 <_ZSt3absf>
 8001e5c:	ee10 3a10 	vmov	r3, s0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb35 	bl	80004d0 <__aeabi_f2d>
 8001e66:	a322      	add	r3, pc, #136	; (adr r3, 8001ef0 <_Z15integral_movetofff+0x610>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fdfa 	bl	8000a64 <__aeabi_dcmplt>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d120      	bne.n	8001eb8 <_Z15integral_movetofff+0x5d8>
				(std::abs(map_theta_back - to_theta) > pi * 1.5 && map_theta_back < 0))
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <_Z15integral_movetofff+0x640>)
 8001e78:	ed93 7a00 	vldr	s14, [r3]
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <_Z15integral_movetofff+0x634>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e86:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8a:	f7ff f911 	bl	80010b0 <_ZSt3absf>
 8001e8e:	ee10 3a10 	vmov	r3, s0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fb1c 	bl	80004d0 <__aeabi_f2d>
				if((map_theta_back > to_theta  && std::abs(map_theta_back - to_theta) < pi * 1.5)||
 8001e98:	a315      	add	r3, pc, #84	; (adr r3, 8001ef0 <_Z15integral_movetofff+0x610>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fdff 	bl	8000aa0 <__aeabi_dcmpgt>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d009      	beq.n	8001ebc <_Z15integral_movetofff+0x5dc>
				(std::abs(map_theta_back - to_theta) > pi * 1.5 && map_theta_back < 0))
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <_Z15integral_movetofff+0x640>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	d501      	bpl.n	8001ebc <_Z15integral_movetofff+0x5dc>
				if((map_theta_back > to_theta  && std::abs(map_theta_back - to_theta) < pi * 1.5)||
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <_Z15integral_movetofff+0x5de>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <_Z15integral_movetofff+0x5fa>
					trans_speedTransfer_modle(0, -1 * spin);
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <_Z15integral_movetofff+0x628>)
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	eef1 7a67 	vneg.f32	s15, s15
 8001ecc:	eef0 0a67 	vmov.f32	s1, s15
 8001ed0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001f0c <_Z15integral_movetofff+0x62c>
 8001ed4:	f7ff f9b0 	bl	8001238 <_Z25trans_speedTransfer_modleff>
 8001ed8:	e08f      	b.n	8001ffa <_Z15integral_movetofff+0x71a>
				else
					trans_speedTransfer_modle(0, spin);
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <_Z15integral_movetofff+0x628>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	eef0 0a67 	vmov.f32	s1, s15
 8001ee4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001f0c <_Z15integral_movetofff+0x62c>
 8001ee8:	f7ff f9a6 	bl	8001238 <_Z25trans_speedTransfer_modleff>
 8001eec:	e085      	b.n	8001ffa <_Z15integral_movetofff+0x71a>
 8001eee:	bf00      	nop
 8001ef0:	7414a4d2 	.word	0x7414a4d2
 8001ef4:	4012d97b 	.word	0x4012d97b
 8001ef8:	a50de270 	.word	0xa50de270
 8001efc:	3f91df45 	.word	0x3f91df45
 8001f00:	aa76788b 	.word	0xaa76788b
 8001f04:	4019101a 	.word	0x4019101a
 8001f08:	200002a8 	.word	0x200002a8
 8001f0c:	00000000 	.word	0x00000000
 8001f10:	20000010 	.word	0x20000010
 8001f14:	20000278 	.word	0x20000278
 8001f18:	200002ac 	.word	0x200002ac
 8001f1c:	200002cd 	.word	0x200002cd
 8001f20:	2000026c 	.word	0x2000026c
 8001f24:	20000294 	.word	0x20000294
 8001f28:	20000298 	.word	0x20000298
 8001f2c:	200002b0 	.word	0x200002b0
 8001f30:	200002b8 	.word	0x200002b8
			}else{

				spin = 0;
 8001f34:	4bc6      	ldr	r3, [pc, #792]	; (8002250 <_Z15integral_movetofff+0x970>)
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

				if((map_theta_back > to_theta  && std::abs(map_theta_back - to_theta) < pi * 1.5)||
 8001f3c:	4bc5      	ldr	r3, [pc, #788]	; (8002254 <_Z15integral_movetofff+0x974>)
 8001f3e:	ed93 7a00 	vldr	s14, [r3]
 8001f42:	4bc5      	ldr	r3, [pc, #788]	; (8002258 <_Z15integral_movetofff+0x978>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f50:	dd18      	ble.n	8001f84 <_Z15integral_movetofff+0x6a4>
 8001f52:	4bc0      	ldr	r3, [pc, #768]	; (8002254 <_Z15integral_movetofff+0x974>)
 8001f54:	ed93 7a00 	vldr	s14, [r3]
 8001f58:	4bbf      	ldr	r3, [pc, #764]	; (8002258 <_Z15integral_movetofff+0x978>)
 8001f5a:	edd3 7a00 	vldr	s15, [r3]
 8001f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f62:	eeb0 0a67 	vmov.f32	s0, s15
 8001f66:	f7ff f8a3 	bl	80010b0 <_ZSt3absf>
 8001f6a:	ee10 3a10 	vmov	r3, s0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe faae 	bl	80004d0 <__aeabi_f2d>
 8001f74:	a3ac      	add	r3, pc, #688	; (adr r3, 8002228 <_Z15integral_movetofff+0x948>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fd73 	bl	8000a64 <__aeabi_dcmplt>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d120      	bne.n	8001fc6 <_Z15integral_movetofff+0x6e6>
					(std::abs(map_theta_back - to_theta) > pi * 1.5 && map_theta_back < 0))
 8001f84:	4bb3      	ldr	r3, [pc, #716]	; (8002254 <_Z15integral_movetofff+0x974>)
 8001f86:	ed93 7a00 	vldr	s14, [r3]
 8001f8a:	4bb3      	ldr	r3, [pc, #716]	; (8002258 <_Z15integral_movetofff+0x978>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f94:	eeb0 0a67 	vmov.f32	s0, s15
 8001f98:	f7ff f88a 	bl	80010b0 <_ZSt3absf>
 8001f9c:	ee10 3a10 	vmov	r3, s0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fa95 	bl	80004d0 <__aeabi_f2d>
				if((map_theta_back > to_theta  && std::abs(map_theta_back - to_theta) < pi * 1.5)||
 8001fa6:	a3a0      	add	r3, pc, #640	; (adr r3, 8002228 <_Z15integral_movetofff+0x948>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe fd78 	bl	8000aa0 <__aeabi_dcmpgt>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <_Z15integral_movetofff+0x6ea>
					(std::abs(map_theta_back - to_theta) > pi * 1.5 && map_theta_back < 0))
 8001fb6:	4ba7      	ldr	r3, [pc, #668]	; (8002254 <_Z15integral_movetofff+0x974>)
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc4:	d501      	bpl.n	8001fca <_Z15integral_movetofff+0x6ea>
				if((map_theta_back > to_theta  && std::abs(map_theta_back - to_theta) < pi * 1.5)||
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <_Z15integral_movetofff+0x6ec>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <_Z15integral_movetofff+0x708>
					trans_speedTransfer_modle(0, -1 * Correction_sp);
 8001fd0:	4ba2      	ldr	r3, [pc, #648]	; (800225c <_Z15integral_movetofff+0x97c>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eef1 7a67 	vneg.f32	s15, s15
 8001fda:	eef0 0a67 	vmov.f32	s1, s15
 8001fde:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8002260 <_Z15integral_movetofff+0x980>
 8001fe2:	f7ff f929 	bl	8001238 <_Z25trans_speedTransfer_modleff>
 8001fe6:	e008      	b.n	8001ffa <_Z15integral_movetofff+0x71a>
				else
					trans_speedTransfer_modle(0, Correction_sp);
 8001fe8:	4b9c      	ldr	r3, [pc, #624]	; (800225c <_Z15integral_movetofff+0x97c>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	eef0 0a67 	vmov.f32	s1, s15
 8001ff2:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8002260 <_Z15integral_movetofff+0x980>
 8001ff6:	f7ff f91f 	bl	8001238 <_Z25trans_speedTransfer_modleff>
			}
			arrive = 0;
 8001ffa:	4b9a      	ldr	r3, [pc, #616]	; (8002264 <_Z15integral_movetofff+0x984>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e529      	b.n	8001a56 <_Z15integral_movetofff+0x176>
		}
		//move
		else if((std::abs(last_x) > 0.1 || std::abs(last_y) > 0.1) && !ar){
 8002002:	4b99      	ldr	r3, [pc, #612]	; (8002268 <_Z15integral_movetofff+0x988>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	eeb0 0a67 	vmov.f32	s0, s15
 800200c:	f7ff f850 	bl	80010b0 <_ZSt3absf>
 8002010:	ee10 3a10 	vmov	r3, s0
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fa5b 	bl	80004d0 <__aeabi_f2d>
 800201a:	a385      	add	r3, pc, #532	; (adr r3, 8002230 <_Z15integral_movetofff+0x950>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fd3e 	bl	8000aa0 <__aeabi_dcmpgt>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d113      	bne.n	8002052 <_Z15integral_movetofff+0x772>
 800202a:	4b90      	ldr	r3, [pc, #576]	; (800226c <_Z15integral_movetofff+0x98c>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	eeb0 0a67 	vmov.f32	s0, s15
 8002034:	f7ff f83c 	bl	80010b0 <_ZSt3absf>
 8002038:	ee10 3a10 	vmov	r3, s0
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa47 	bl	80004d0 <__aeabi_f2d>
 8002042:	a37b      	add	r3, pc, #492	; (adr r3, 8002230 <_Z15integral_movetofff+0x950>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f7fe fd2a 	bl	8000aa0 <__aeabi_dcmpgt>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <_Z15integral_movetofff+0x782>
 8002052:	7dbb      	ldrb	r3, [r7, #22]
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <_Z15integral_movetofff+0x782>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <_Z15integral_movetofff+0x784>
 8002062:	2300      	movs	r3, #0
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 809f 	beq.w	80021a8 <_Z15integral_movetofff+0x8c8>

			mode = 2;
 800206a:	4b81      	ldr	r3, [pc, #516]	; (8002270 <_Z15integral_movetofff+0x990>)
 800206c:	2202      	movs	r2, #2
 800206e:	601a      	str	r2, [r3, #0]

			Correction = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	757b      	strb	r3, [r7, #21]

			end_theta_front = map_theta_front;
 8002074:	4b7f      	ldr	r3, [pc, #508]	; (8002274 <_Z15integral_movetofff+0x994>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a7f      	ldr	r2, [pc, #508]	; (8002278 <_Z15integral_movetofff+0x998>)
 800207a:	6013      	str	r3, [r2, #0]

			//forward or backward
			if(std::abs(map_theta_front - to_theta) > pi / 2 && std::abs(map_theta_front - to_theta) < 1.5 * pi)
 800207c:	4b7d      	ldr	r3, [pc, #500]	; (8002274 <_Z15integral_movetofff+0x994>)
 800207e:	ed93 7a00 	vldr	s14, [r3]
 8002082:	4b75      	ldr	r3, [pc, #468]	; (8002258 <_Z15integral_movetofff+0x978>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208c:	eeb0 0a67 	vmov.f32	s0, s15
 8002090:	f7ff f80e 	bl	80010b0 <_ZSt3absf>
 8002094:	ee10 3a10 	vmov	r3, s0
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fa19 	bl	80004d0 <__aeabi_f2d>
 800209e:	a366      	add	r3, pc, #408	; (adr r3, 8002238 <_Z15integral_movetofff+0x958>)
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	f7fe fcfc 	bl	8000aa0 <__aeabi_dcmpgt>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01a      	beq.n	80020e4 <_Z15integral_movetofff+0x804>
 80020ae:	4b71      	ldr	r3, [pc, #452]	; (8002274 <_Z15integral_movetofff+0x994>)
 80020b0:	ed93 7a00 	vldr	s14, [r3]
 80020b4:	4b68      	ldr	r3, [pc, #416]	; (8002258 <_Z15integral_movetofff+0x978>)
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020be:	eeb0 0a67 	vmov.f32	s0, s15
 80020c2:	f7fe fff5 	bl	80010b0 <_ZSt3absf>
 80020c6:	ee10 3a10 	vmov	r3, s0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fa00 	bl	80004d0 <__aeabi_f2d>
 80020d0:	a355      	add	r3, pc, #340	; (adr r3, 8002228 <_Z15integral_movetofff+0x948>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	f7fe fcc5 	bl	8000a64 <__aeabi_dcmplt>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <_Z15integral_movetofff+0x804>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <_Z15integral_movetofff+0x806>
 80020e4:	2300      	movs	r3, #0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <_Z15integral_movetofff+0x810>
				direction = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]
 80020ee:	e001      	b.n	80020f4 <_Z15integral_movetofff+0x814>
			else
				direction = 1;
 80020f0:	2301      	movs	r3, #1
 80020f2:	75fb      	strb	r3, [r7, #23]

			if(std::abs(end_theta_front - to_theta) <= pi / 2 || std::abs(end_theta_front - to_theta) >= pi * 3 / 2){
 80020f4:	4b60      	ldr	r3, [pc, #384]	; (8002278 <_Z15integral_movetofff+0x998>)
 80020f6:	ed93 7a00 	vldr	s14, [r3]
 80020fa:	4b57      	ldr	r3, [pc, #348]	; (8002258 <_Z15integral_movetofff+0x978>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002104:	eeb0 0a67 	vmov.f32	s0, s15
 8002108:	f7fe ffd2 	bl	80010b0 <_ZSt3absf>
 800210c:	ee10 3a10 	vmov	r3, s0
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe f9dd 	bl	80004d0 <__aeabi_f2d>
 8002116:	a348      	add	r3, pc, #288	; (adr r3, 8002238 <_Z15integral_movetofff+0x958>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	f7fe fcac 	bl	8000a78 <__aeabi_dcmple>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d118      	bne.n	8002158 <_Z15integral_movetofff+0x878>
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <_Z15integral_movetofff+0x998>)
 8002128:	ed93 7a00 	vldr	s14, [r3]
 800212c:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <_Z15integral_movetofff+0x978>)
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002136:	eeb0 0a67 	vmov.f32	s0, s15
 800213a:	f7fe ffb9 	bl	80010b0 <_ZSt3absf>
 800213e:	ee10 3a10 	vmov	r3, s0
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f9c4 	bl	80004d0 <__aeabi_f2d>
 8002148:	a337      	add	r3, pc, #220	; (adr r3, 8002228 <_Z15integral_movetofff+0x948>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	f7fe fc9d 	bl	8000a8c <__aeabi_dcmpge>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <_Z15integral_movetofff+0x87c>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <_Z15integral_movetofff+0x87e>
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00e      	beq.n	8002180 <_Z15integral_movetofff+0x8a0>

				check_f++;
 8002162:	4b46      	ldr	r3, [pc, #280]	; (800227c <_Z15integral_movetofff+0x99c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	4a44      	ldr	r2, [pc, #272]	; (800227c <_Z15integral_movetofff+0x99c>)
 800216a:	6013      	str	r3, [r2, #0]
				trans_speedTransfer_modle(SP, 0);
 800216c:	4b44      	ldr	r3, [pc, #272]	; (8002280 <_Z15integral_movetofff+0x9a0>)
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8002260 <_Z15integral_movetofff+0x980>
 8002176:	eeb0 0a67 	vmov.f32	s0, s15
 800217a:	f7ff f85d 	bl	8001238 <_Z25trans_speedTransfer_modleff>
 800217e:	e00f      	b.n	80021a0 <_Z15integral_movetofff+0x8c0>
			}
			else{

				check_b++;
 8002180:	4b40      	ldr	r3, [pc, #256]	; (8002284 <_Z15integral_movetofff+0x9a4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3301      	adds	r3, #1
 8002186:	4a3f      	ldr	r2, [pc, #252]	; (8002284 <_Z15integral_movetofff+0x9a4>)
 8002188:	6013      	str	r3, [r2, #0]
				trans_speedTransfer_modle(-1 * SP, 0);
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <_Z15integral_movetofff+0x9a0>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	eef1 7a67 	vneg.f32	s15, s15
 8002194:	eddf 0a32 	vldr	s1, [pc, #200]	; 8002260 <_Z15integral_movetofff+0x980>
 8002198:	eeb0 0a67 	vmov.f32	s0, s15
 800219c:	f7ff f84c 	bl	8001238 <_Z25trans_speedTransfer_modleff>
			}
			arrive = 0;
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <_Z15integral_movetofff+0x984>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e456      	b.n	8001a56 <_Z15integral_movetofff+0x176>
		}
		//spin to specific orientation(front)
		else if((std::abs(map_theta_front - goal_theta) >= pi / 180 && std::abs(map_theta_front - goal_theta) <= pi * 359 / 180)
 80021a8:	4b32      	ldr	r3, [pc, #200]	; (8002274 <_Z15integral_movetofff+0x994>)
 80021aa:	ed93 7a00 	vldr	s14, [r3]
 80021ae:	4b36      	ldr	r3, [pc, #216]	; (8002288 <_Z15integral_movetofff+0x9a8>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b8:	eeb0 0a67 	vmov.f32	s0, s15
 80021bc:	f7fe ff78 	bl	80010b0 <_ZSt3absf>
 80021c0:	ee10 3a10 	vmov	r3, s0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f983 	bl	80004d0 <__aeabi_f2d>
			&& orientation != 1000){
 80021ca:	a31d      	add	r3, pc, #116	; (adr r3, 8002240 <_Z15integral_movetofff+0x960>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe fc5c 	bl	8000a8c <__aeabi_dcmpge>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d05a      	beq.n	8002290 <_Z15integral_movetofff+0x9b0>
		else if((std::abs(map_theta_front - goal_theta) >= pi / 180 && std::abs(map_theta_front - goal_theta) <= pi * 359 / 180)
 80021da:	4b26      	ldr	r3, [pc, #152]	; (8002274 <_Z15integral_movetofff+0x994>)
 80021dc:	ed93 7a00 	vldr	s14, [r3]
 80021e0:	4b29      	ldr	r3, [pc, #164]	; (8002288 <_Z15integral_movetofff+0x9a8>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ea:	eeb0 0a67 	vmov.f32	s0, s15
 80021ee:	f7fe ff5f 	bl	80010b0 <_ZSt3absf>
 80021f2:	ee10 3a10 	vmov	r3, s0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f96a 	bl	80004d0 <__aeabi_f2d>
 80021fc:	a312      	add	r3, pc, #72	; (adr r3, 8002248 <_Z15integral_movetofff+0x968>)
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	f7fe fc39 	bl	8000a78 <__aeabi_dcmple>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d041      	beq.n	8002290 <_Z15integral_movetofff+0x9b0>
			&& orientation != 1000){
 800220c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002210:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800228c <_Z15integral_movetofff+0x9ac>
 8002214:	eef4 7a47 	vcmp.f32	s15, s14
 8002218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221c:	d038      	beq.n	8002290 <_Z15integral_movetofff+0x9b0>
 800221e:	2301      	movs	r3, #1
 8002220:	e037      	b.n	8002292 <_Z15integral_movetofff+0x9b2>
 8002222:	bf00      	nop
 8002224:	f3af 8000 	nop.w
 8002228:	7414a4d2 	.word	0x7414a4d2
 800222c:	4012d97b 	.word	0x4012d97b
 8002230:	9999999a 	.word	0x9999999a
 8002234:	3fb99999 	.word	0x3fb99999
 8002238:	f01b866e 	.word	0xf01b866e
 800223c:	3ff921f9 	.word	0x3ff921f9
 8002240:	a50de270 	.word	0xa50de270
 8002244:	3f91df45 	.word	0x3f91df45
 8002248:	aa76788b 	.word	0xaa76788b
 800224c:	4019101a 	.word	0x4019101a
 8002250:	200002a8 	.word	0x200002a8
 8002254:	2000026c 	.word	0x2000026c
 8002258:	20000278 	.word	0x20000278
 800225c:	200002ac 	.word	0x200002ac
 8002260:	00000000 	.word	0x00000000
 8002264:	200002cd 	.word	0x200002cd
 8002268:	20000294 	.word	0x20000294
 800226c:	20000298 	.word	0x20000298
 8002270:	200002b0 	.word	0x200002b0
 8002274:	20000010 	.word	0x20000010
 8002278:	20000290 	.word	0x20000290
 800227c:	200002bc 	.word	0x200002bc
 8002280:	200002a4 	.word	0x200002a4
 8002284:	200002c0 	.word	0x200002c0
 8002288:	2000027c 	.word	0x2000027c
 800228c:	447a0000 	.word	0x447a0000
 8002290:	2300      	movs	r3, #0
		else if((std::abs(map_theta_front - goal_theta) >= pi / 180 && std::abs(map_theta_front - goal_theta) <= pi * 359 / 180)
 8002292:	2b00      	cmp	r3, #0
 8002294:	d071      	beq.n	800237a <_Z15integral_movetofff+0xa9a>

			mode = 3;
 8002296:	4b46      	ldr	r3, [pc, #280]	; (80023b0 <_Z15integral_movetofff+0xad0>)
 8002298:	2203      	movs	r2, #3
 800229a:	601a      	str	r2, [r3, #0]

			Correction = 1;
 800229c:	2301      	movs	r3, #1
 800229e:	757b      	strb	r3, [r7, #21]

			ar = 1;
 80022a0:	2301      	movs	r3, #1
 80022a2:	75bb      	strb	r3, [r7, #22]

			check_a++;
 80022a4:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <_Z15integral_movetofff+0xad4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <_Z15integral_movetofff+0xad4>)
 80022ac:	6013      	str	r3, [r2, #0]

			if(std::abs(map_theta_front - goal_theta) < pi){
 80022ae:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <_Z15integral_movetofff+0xad8>)
 80022b0:	ed93 7a00 	vldr	s14, [r3]
 80022b4:	4b41      	ldr	r3, [pc, #260]	; (80023bc <_Z15integral_movetofff+0xadc>)
 80022b6:	edd3 7a00 	vldr	s15, [r3]
 80022ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022be:	eeb0 0a67 	vmov.f32	s0, s15
 80022c2:	f7fe fef5 	bl	80010b0 <_ZSt3absf>
 80022c6:	ee10 3a10 	vmov	r3, s0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f900 	bl	80004d0 <__aeabi_f2d>
 80022d0:	2301      	movs	r3, #1
 80022d2:	461c      	mov	r4, r3
 80022d4:	a334      	add	r3, pc, #208	; (adr r3, 80023a8 <_Z15integral_movetofff+0xac8>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	f7fe fbc3 	bl	8000a64 <__aeabi_dcmplt>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <_Z15integral_movetofff+0xa08>
 80022e4:	2300      	movs	r3, #0
 80022e6:	461c      	mov	r4, r3
 80022e8:	b2e3      	uxtb	r3, r4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d020      	beq.n	8002330 <_Z15integral_movetofff+0xa50>

				if(map_theta_front > goal_theta)
 80022ee:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <_Z15integral_movetofff+0xad8>)
 80022f0:	ed93 7a00 	vldr	s14, [r3]
 80022f4:	4b31      	ldr	r3, [pc, #196]	; (80023bc <_Z15integral_movetofff+0xadc>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	dd0b      	ble.n	800231c <_Z15integral_movetofff+0xa3c>
					trans_speedTransfer_modle(0, -1 * spin);
 8002304:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <_Z15integral_movetofff+0xae0>)
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	eef1 7a67 	vneg.f32	s15, s15
 800230e:	eef0 0a67 	vmov.f32	s1, s15
 8002312:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80023c4 <_Z15integral_movetofff+0xae4>
 8002316:	f7fe ff8f 	bl	8001238 <_Z25trans_speedTransfer_modleff>
 800231a:	e029      	b.n	8002370 <_Z15integral_movetofff+0xa90>
				else
					trans_speedTransfer_modle(0, spin);
 800231c:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <_Z15integral_movetofff+0xae0>)
 800231e:	edd3 7a00 	vldr	s15, [r3]
 8002322:	eef0 0a67 	vmov.f32	s1, s15
 8002326:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80023c4 <_Z15integral_movetofff+0xae4>
 800232a:	f7fe ff85 	bl	8001238 <_Z25trans_speedTransfer_modleff>
 800232e:	e01f      	b.n	8002370 <_Z15integral_movetofff+0xa90>
			}
			else{
				if(map_theta_front > goal_theta)
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <_Z15integral_movetofff+0xad8>)
 8002332:	ed93 7a00 	vldr	s14, [r3]
 8002336:	4b21      	ldr	r3, [pc, #132]	; (80023bc <_Z15integral_movetofff+0xadc>)
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002344:	dd09      	ble.n	800235a <_Z15integral_movetofff+0xa7a>
					trans_speedTransfer_modle(0, spin);
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <_Z15integral_movetofff+0xae0>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	eef0 0a67 	vmov.f32	s1, s15
 8002350:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80023c4 <_Z15integral_movetofff+0xae4>
 8002354:	f7fe ff70 	bl	8001238 <_Z25trans_speedTransfer_modleff>
 8002358:	e00a      	b.n	8002370 <_Z15integral_movetofff+0xa90>
				else
					trans_speedTransfer_modle(0, -1 * spin);
 800235a:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <_Z15integral_movetofff+0xae0>)
 800235c:	edd3 7a00 	vldr	s15, [r3]
 8002360:	eef1 7a67 	vneg.f32	s15, s15
 8002364:	eef0 0a67 	vmov.f32	s1, s15
 8002368:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80023c4 <_Z15integral_movetofff+0xae4>
 800236c:	f7fe ff64 	bl	8001238 <_Z25trans_speedTransfer_modleff>
			}

			arrive = 0;
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <_Z15integral_movetofff+0xae8>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
 8002376:	f7ff bb6e 	b.w	8001a56 <_Z15integral_movetofff+0x176>
		}
		//achieve
		else{

			mode = 4;
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <_Z15integral_movetofff+0xad0>)
 800237c:	2204      	movs	r2, #4
 800237e:	601a      	str	r2, [r3, #0]
			check_e++;
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <_Z15integral_movetofff+0xaec>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	4a11      	ldr	r2, [pc, #68]	; (80023cc <_Z15integral_movetofff+0xaec>)
 8002388:	6013      	str	r3, [r2, #0]
			trans_speedTransfer_modle(0, 0);
 800238a:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80023c4 <_Z15integral_movetofff+0xae4>
 800238e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80023c4 <_Z15integral_movetofff+0xae4>
 8002392:	f7fe ff51 	bl	8001238 <_Z25trans_speedTransfer_modleff>

			arrive = 1;
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <_Z15integral_movetofff+0xae8>)
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
	while(!arrive){
 800239c:	f7ff bb5b 	b.w	8001a56 <_Z15integral_movetofff+0x176>
		}
	}
}
 80023a0:	bf00      	nop
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd90      	pop	{r4, r7, pc}
 80023a8:	f01b866e 	.word	0xf01b866e
 80023ac:	400921f9 	.word	0x400921f9
 80023b0:	200002b0 	.word	0x200002b0
 80023b4:	200002c4 	.word	0x200002c4
 80023b8:	20000010 	.word	0x20000010
 80023bc:	2000027c 	.word	0x2000027c
 80023c0:	200002a8 	.word	0x200002a8
 80023c4:	00000000 	.word	0x00000000
 80023c8:	200002cd 	.word	0x200002cd
 80023cc:	200002c8 	.word	0x200002c8

080023d0 <_Z12move_to_lineib>:
void move_to_line(int type, bool way){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]

	arrive = 0;
 80023dc:	4b3a      	ldr	r3, [pc, #232]	; (80024c8 <_Z12move_to_lineib+0xf8>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]

	float f_sp = 1.5;
 80023e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80023e6:	60fb      	str	r3, [r7, #12]
	float f_spin = 1;
 80023e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023ec:	60bb      	str	r3, [r7, #8]

	if(type <= 6 || type == 8){
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b06      	cmp	r3, #6
 80023f2:	dd02      	ble.n	80023fa <_Z12move_to_lineib+0x2a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d12d      	bne.n	8002456 <_Z12move_to_lineib+0x86>

		//front
		if(way){
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d012      	beq.n	8002426 <_Z12move_to_lineib+0x56>

			line_find = 1;
 8002400:	4b32      	ldr	r3, [pc, #200]	; (80024cc <_Z12move_to_lineib+0xfc>)
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]

			while(!line_check(type)){
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f002 fcec 	bl	8004de4 <_Z10line_checki>
 800240c:	4603      	mov	r3, r0
 800240e:	f083 0301 	eor.w	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d040      	beq.n	800249a <_Z12move_to_lineib+0xca>

				move_mode = 0;
 8002418:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <_Z12move_to_lineib+0x100>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
				path(0);
 800241e:	2000      	movs	r0, #0
 8002420:	f002 fb62 	bl	8004ae8 <_Z4pathb>
			while(!line_check(type)){
 8002424:	e7ef      	b.n	8002406 <_Z12move_to_lineib+0x36>
			}
		}
		//back
		else{
			chassis_right_wheel_angspeed = -1 * f_sp;
 8002426:	edd7 7a03 	vldr	s15, [r7, #12]
 800242a:	eef1 7a67 	vneg.f32	s15, s15
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <_Z12move_to_lineib+0x104>)
 8002430:	edc3 7a00 	vstr	s15, [r3]
			chassis_left_wheel_angspeed  = -1 * f_sp;
 8002434:	edd7 7a03 	vldr	s15, [r7, #12]
 8002438:	eef1 7a67 	vneg.f32	s15, s15
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <_Z12move_to_lineib+0x108>)
 800243e:	edc3 7a00 	vstr	s15, [r3]

			while(!line_check(type)){}
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f002 fcce 	bl	8004de4 <_Z10line_checki>
 8002448:	4603      	mov	r3, r0
 800244a:	f083 0301 	eor.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d022      	beq.n	800249a <_Z12move_to_lineib+0xca>
 8002454:	e7f5      	b.n	8002442 <_Z12move_to_lineib+0x72>
		}
	}
	else{

		//trans
		if(way){
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <_Z12move_to_lineib+0xa2>
			chassis_right_wheel_angspeed = f_spin;
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <_Z12move_to_lineib+0x104>)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	6013      	str	r3, [r2, #0]
			chassis_left_wheel_angspeed  = -1 * f_spin;
 8002462:	edd7 7a02 	vldr	s15, [r7, #8]
 8002466:	eef1 7a67 	vneg.f32	s15, s15
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <_Z12move_to_lineib+0x108>)
 800246c:	edc3 7a00 	vstr	s15, [r3]
 8002470:	e009      	b.n	8002486 <_Z12move_to_lineib+0xb6>
		}
		//cis
		else{
			chassis_right_wheel_angspeed = -1 * f_spin;
 8002472:	edd7 7a02 	vldr	s15, [r7, #8]
 8002476:	eef1 7a67 	vneg.f32	s15, s15
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <_Z12move_to_lineib+0x104>)
 800247c:	edc3 7a00 	vstr	s15, [r3]
			chassis_left_wheel_angspeed  = f_spin;
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <_Z12move_to_lineib+0x108>)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	6013      	str	r3, [r2, #0]
		}
		while(!line_check(type)){}
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f002 fcac 	bl	8004de4 <_Z10line_checki>
 800248c:	4603      	mov	r3, r0
 800248e:	f083 0301 	eor.w	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <_Z12move_to_lineib+0xcc>
 8002498:	e7f5      	b.n	8002486 <_Z12move_to_lineib+0xb6>
		if(way){
 800249a:	bf00      	nop
	}

	chassis_right_wheel_angspeed = 0;
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <_Z12move_to_lineib+0x104>)
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
	chassis_left_wheel_angspeed  = 0;
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <_Z12move_to_lineib+0x108>)
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
	move_mode = 2;
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <_Z12move_to_lineib+0x100>)
 80024ae:	2202      	movs	r2, #2
 80024b0:	601a      	str	r2, [r3, #0]
	line_find = 0;
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <_Z12move_to_lineib+0xfc>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
	arrive = 1;
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <_Z12move_to_lineib+0xf8>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200002cd 	.word	0x200002cd
 80024cc:	200002cc 	.word	0x200002cc
 80024d0:	20000024 	.word	0x20000024
 80024d4:	2000024c 	.word	0x2000024c
 80024d8:	20000250 	.word	0x20000250

080024dc <_Z3achb>:
void ach(bool ach){
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
	arrive = ach;
 80024e6:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <_Z3achb+0x1c>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	7013      	strb	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	200002cd 	.word	0x200002cd
 80024fc:	00000000 	.word	0x00000000

08002500 <_Z12speed_changei>:

void speed_change(int MODE){
 8002500:	b5b0      	push	{r4, r5, r7, lr}
 8002502:	ed2d 8b02 	vpush	{d8}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

	//integral
	if(MODE == 1){
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 852a 	bne.w	8002f68 <_Z12speed_changei+0xa68>

		//speed up
		if(mode == 2 && (std::abs(last_x) > 20 || std::abs(last_y) > 20) && SP <= max_sp &&
 8002514:	4bae      	ldr	r3, [pc, #696]	; (80027d0 <_Z12speed_changei+0x2d0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d156      	bne.n	80025ca <_Z12speed_changei+0xca>
 800251c:	4bad      	ldr	r3, [pc, #692]	; (80027d4 <_Z12speed_changei+0x2d4>)
 800251e:	edd3 7a00 	vldr	s15, [r3]
 8002522:	eeb0 0a67 	vmov.f32	s0, s15
 8002526:	f7fe fdc3 	bl	80010b0 <_ZSt3absf>
 800252a:	eef0 7a40 	vmov.f32	s15, s0
 800252e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253a:	dc0f      	bgt.n	800255c <_Z12speed_changei+0x5c>
 800253c:	4ba6      	ldr	r3, [pc, #664]	; (80027d8 <_Z12speed_changei+0x2d8>)
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	eeb0 0a67 	vmov.f32	s0, s15
 8002546:	f7fe fdb3 	bl	80010b0 <_ZSt3absf>
 800254a:	eef0 7a40 	vmov.f32	s15, s0
 800254e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255a:	dd36      	ble.n	80025ca <_Z12speed_changei+0xca>
 800255c:	4b9f      	ldr	r3, [pc, #636]	; (80027dc <_Z12speed_changei+0x2dc>)
 800255e:	ed93 7a00 	vldr	s14, [r3]
 8002562:	4b9f      	ldr	r3, [pc, #636]	; (80027e0 <_Z12speed_changei+0x2e0>)
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800256c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002570:	d82b      	bhi.n	80025ca <_Z12speed_changei+0xca>
				(std::abs(goal_x - start_x) > 20 || std::abs(goal_y - start_y) > 20))
 8002572:	4b9c      	ldr	r3, [pc, #624]	; (80027e4 <_Z12speed_changei+0x2e4>)
 8002574:	ed93 7a00 	vldr	s14, [r3]
 8002578:	4b9b      	ldr	r3, [pc, #620]	; (80027e8 <_Z12speed_changei+0x2e8>)
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002582:	eeb0 0a67 	vmov.f32	s0, s15
 8002586:	f7fe fd93 	bl	80010b0 <_ZSt3absf>
 800258a:	eef0 7a40 	vmov.f32	s15, s0
		if(mode == 2 && (std::abs(last_x) > 20 || std::abs(last_y) > 20) && SP <= max_sp &&
 800258e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	dc14      	bgt.n	80025c6 <_Z12speed_changei+0xc6>
				(std::abs(goal_x - start_x) > 20 || std::abs(goal_y - start_y) > 20))
 800259c:	4b93      	ldr	r3, [pc, #588]	; (80027ec <_Z12speed_changei+0x2ec>)
 800259e:	ed93 7a00 	vldr	s14, [r3]
 80025a2:	4b93      	ldr	r3, [pc, #588]	; (80027f0 <_Z12speed_changei+0x2f0>)
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ac:	eeb0 0a67 	vmov.f32	s0, s15
 80025b0:	f7fe fd7e 	bl	80010b0 <_ZSt3absf>
 80025b4:	eef0 7a40 	vmov.f32	s15, s0
 80025b8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80025bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c4:	dd01      	ble.n	80025ca <_Z12speed_changei+0xca>
		if(mode == 2 && (std::abs(last_x) > 20 || std::abs(last_y) > 20) && SP <= max_sp &&
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <_Z12speed_changei+0xcc>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d028      	beq.n	8002622 <_Z12speed_changei+0x122>
			//a cm/ms
			SP += std::pow(max_sp, 2) / (2000 * 20);
 80025d0:	4b83      	ldr	r3, [pc, #524]	; (80027e0 <_Z12speed_changei+0x2e0>)
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	2002      	movs	r0, #2
 80025d8:	eeb0 0a67 	vmov.f32	s0, s15
 80025dc:	f000 fe2a 	bl	8003234 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80025e0:	ec51 0b10 	vmov	r0, r1, d0
 80025e4:	a378      	add	r3, pc, #480	; (adr r3, 80027c8 <_Z12speed_changei+0x2c8>)
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	f7fe f8f3 	bl	80007d4 <__aeabi_ddiv>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4614      	mov	r4, r2
 80025f4:	461d      	mov	r5, r3
 80025f6:	4b79      	ldr	r3, [pc, #484]	; (80027dc <_Z12speed_changei+0x2dc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fd ff68 	bl	80004d0 <__aeabi_f2d>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4620      	mov	r0, r4
 8002606:	4629      	mov	r1, r5
 8002608:	f7fd fe04 	bl	8000214 <__adddf3>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	f7fe fa64 	bl	8000ae0 <__aeabi_d2f>
 8002618:	4603      	mov	r3, r0
 800261a:	4a70      	ldr	r2, [pc, #448]	; (80027dc <_Z12speed_changei+0x2dc>)
 800261c:	6013      	str	r3, [r2, #0]
	//stop
	else{
		chassis_right_wheel_angspeed = 0;
		chassis_left_wheel_angspeed  = 0;
	}
}
 800261e:	f000 bdf0 	b.w	8003202 <_Z12speed_changei+0xd02>
		else if(mode == 2 && std::abs(last_x) <= 20 && std::abs(last_y) <= 20 && SP >= min_sp &&
 8002622:	4b6b      	ldr	r3, [pc, #428]	; (80027d0 <_Z12speed_changei+0x2d0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d156      	bne.n	80026d8 <_Z12speed_changei+0x1d8>
 800262a:	4b6a      	ldr	r3, [pc, #424]	; (80027d4 <_Z12speed_changei+0x2d4>)
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	eeb0 0a67 	vmov.f32	s0, s15
 8002634:	f7fe fd3c 	bl	80010b0 <_ZSt3absf>
 8002638:	eef0 7a40 	vmov.f32	s15, s0
 800263c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002648:	d846      	bhi.n	80026d8 <_Z12speed_changei+0x1d8>
 800264a:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <_Z12speed_changei+0x2d8>)
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	eeb0 0a67 	vmov.f32	s0, s15
 8002654:	f7fe fd2c 	bl	80010b0 <_ZSt3absf>
 8002658:	eef0 7a40 	vmov.f32	s15, s0
 800265c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002668:	d836      	bhi.n	80026d8 <_Z12speed_changei+0x1d8>
 800266a:	4b5c      	ldr	r3, [pc, #368]	; (80027dc <_Z12speed_changei+0x2dc>)
 800266c:	ed93 7a00 	vldr	s14, [r3]
 8002670:	4b60      	ldr	r3, [pc, #384]	; (80027f4 <_Z12speed_changei+0x2f4>)
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	db2b      	blt.n	80026d8 <_Z12speed_changei+0x1d8>
				(std::abs(goal_x - start_x) > 20 || std::abs(goal_y - start_y) > 20))
 8002680:	4b58      	ldr	r3, [pc, #352]	; (80027e4 <_Z12speed_changei+0x2e4>)
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <_Z12speed_changei+0x2e8>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002690:	eeb0 0a67 	vmov.f32	s0, s15
 8002694:	f7fe fd0c 	bl	80010b0 <_ZSt3absf>
 8002698:	eef0 7a40 	vmov.f32	s15, s0
		else if(mode == 2 && std::abs(last_x) <= 20 && std::abs(last_y) <= 20 && SP >= min_sp &&
 800269c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80026a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	dc14      	bgt.n	80026d4 <_Z12speed_changei+0x1d4>
				(std::abs(goal_x - start_x) > 20 || std::abs(goal_y - start_y) > 20))
 80026aa:	4b50      	ldr	r3, [pc, #320]	; (80027ec <_Z12speed_changei+0x2ec>)
 80026ac:	ed93 7a00 	vldr	s14, [r3]
 80026b0:	4b4f      	ldr	r3, [pc, #316]	; (80027f0 <_Z12speed_changei+0x2f0>)
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ba:	eeb0 0a67 	vmov.f32	s0, s15
 80026be:	f7fe fcf7 	bl	80010b0 <_ZSt3absf>
 80026c2:	eef0 7a40 	vmov.f32	s15, s0
 80026c6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80026ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d2:	dd01      	ble.n	80026d8 <_Z12speed_changei+0x1d8>
		else if(mode == 2 && std::abs(last_x) <= 20 && std::abs(last_y) <= 20 && SP >= min_sp &&
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <_Z12speed_changei+0x1da>
 80026d8:	2300      	movs	r3, #0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d038      	beq.n	8002750 <_Z12speed_changei+0x250>
			SP -= (std::pow(max_sp, 2) - std::pow(min_sp, 2)) / (2000 * 20);
 80026de:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <_Z12speed_changei+0x2e0>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	2002      	movs	r0, #2
 80026e6:	eeb0 0a67 	vmov.f32	s0, s15
 80026ea:	f000 fda3 	bl	8003234 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80026ee:	ec55 4b10 	vmov	r4, r5, d0
 80026f2:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <_Z12speed_changei+0x2f4>)
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	2002      	movs	r0, #2
 80026fa:	eeb0 0a67 	vmov.f32	s0, s15
 80026fe:	f000 fd99 	bl	8003234 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002702:	ec53 2b10 	vmov	r2, r3, d0
 8002706:	4620      	mov	r0, r4
 8002708:	4629      	mov	r1, r5
 800270a:	f7fd fd81 	bl	8000210 <__aeabi_dsub>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	a32c      	add	r3, pc, #176	; (adr r3, 80027c8 <_Z12speed_changei+0x2c8>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f7fe f85a 	bl	80007d4 <__aeabi_ddiv>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4614      	mov	r4, r2
 8002726:	461d      	mov	r5, r3
 8002728:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <_Z12speed_changei+0x2dc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fecf 	bl	80004d0 <__aeabi_f2d>
 8002732:	4622      	mov	r2, r4
 8002734:	462b      	mov	r3, r5
 8002736:	f7fd fd6b 	bl	8000210 <__aeabi_dsub>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	f7fe f9cd 	bl	8000ae0 <__aeabi_d2f>
 8002746:	4603      	mov	r3, r0
 8002748:	4a24      	ldr	r2, [pc, #144]	; (80027dc <_Z12speed_changei+0x2dc>)
 800274a:	6013      	str	r3, [r2, #0]
}
 800274c:	f000 bd59 	b.w	8003202 <_Z12speed_changei+0xd02>
		else if(mode == 2 && std::abs(goal_x - start_x) <= 20 && std::abs(goal_y - start_y) <= 20)
 8002750:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <_Z12speed_changei+0x2d0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d12b      	bne.n	80027b0 <_Z12speed_changei+0x2b0>
 8002758:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <_Z12speed_changei+0x2e4>)
 800275a:	ed93 7a00 	vldr	s14, [r3]
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <_Z12speed_changei+0x2e8>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002768:	eeb0 0a67 	vmov.f32	s0, s15
 800276c:	f7fe fca0 	bl	80010b0 <_ZSt3absf>
 8002770:	eef0 7a40 	vmov.f32	s15, s0
 8002774:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	d816      	bhi.n	80027b0 <_Z12speed_changei+0x2b0>
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <_Z12speed_changei+0x2ec>)
 8002784:	ed93 7a00 	vldr	s14, [r3]
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <_Z12speed_changei+0x2f0>)
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002792:	eeb0 0a67 	vmov.f32	s0, s15
 8002796:	f7fe fc8b 	bl	80010b0 <_ZSt3absf>
 800279a:	eef0 7a40 	vmov.f32	s15, s0
 800279e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80027a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027aa:	d801      	bhi.n	80027b0 <_Z12speed_changei+0x2b0>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <_Z12speed_changei+0x2b2>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d020      	beq.n	80027f8 <_Z12speed_changei+0x2f8>
			SP = min_sp;
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <_Z12speed_changei+0x2f4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <_Z12speed_changei+0x2dc>)
 80027bc:	6013      	str	r3, [r2, #0]
}
 80027be:	f000 bd20 	b.w	8003202 <_Z12speed_changei+0xd02>
 80027c2:	bf00      	nop
 80027c4:	f3af 8000 	nop.w
 80027c8:	00000000 	.word	0x00000000
 80027cc:	40e38800 	.word	0x40e38800
 80027d0:	200002b0 	.word	0x200002b0
 80027d4:	20000294 	.word	0x20000294
 80027d8:	20000298 	.word	0x20000298
 80027dc:	200002a4 	.word	0x200002a4
 80027e0:	20000014 	.word	0x20000014
 80027e4:	20000270 	.word	0x20000270
 80027e8:	20000280 	.word	0x20000280
 80027ec:	20000274 	.word	0x20000274
 80027f0:	20000284 	.word	0x20000284
 80027f4:	2000001c 	.word	0x2000001c
		else if(mode == 1 && last_theta > std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) * 2  / 3 && spin <= max_spin &&
 80027f8:	4ba3      	ldr	r3, [pc, #652]	; (8002a88 <_Z12speed_changei+0x588>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d16d      	bne.n	80028dc <_Z12speed_changei+0x3dc>
 8002800:	4ba2      	ldr	r3, [pc, #648]	; (8002a8c <_Z12speed_changei+0x58c>)
 8002802:	ed93 7a00 	vldr	s14, [r3]
 8002806:	4ba2      	ldr	r3, [pc, #648]	; (8002a90 <_Z12speed_changei+0x590>)
 8002808:	edd3 7a00 	vldr	s15, [r3]
 800280c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002810:	eeb0 0a67 	vmov.f32	s0, s15
 8002814:	f7fe fc4c 	bl	80010b0 <_ZSt3absf>
 8002818:	eeb0 8a40 	vmov.f32	s16, s0
 800281c:	4b9b      	ldr	r3, [pc, #620]	; (8002a8c <_Z12speed_changei+0x58c>)
 800281e:	ed93 7a00 	vldr	s14, [r3]
 8002822:	4b9c      	ldr	r3, [pc, #624]	; (8002a94 <_Z12speed_changei+0x594>)
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282c:	eeb0 0a67 	vmov.f32	s0, s15
 8002830:	f7fe fc3e 	bl	80010b0 <_ZSt3absf>
 8002834:	eef0 7a40 	vmov.f32	s15, s0
 8002838:	eef0 0a67 	vmov.f32	s1, s15
 800283c:	eeb0 0a48 	vmov.f32	s0, s16
 8002840:	f7fe fc7a 	bl	8001138 <_ZSt4fminff>
 8002844:	eef0 7a40 	vmov.f32	s15, s0
 8002848:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800284c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002850:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002854:	4b90      	ldr	r3, [pc, #576]	; (8002a98 <_Z12speed_changei+0x598>)
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002862:	d53b      	bpl.n	80028dc <_Z12speed_changei+0x3dc>
 8002864:	4b8d      	ldr	r3, [pc, #564]	; (8002a9c <_Z12speed_changei+0x59c>)
 8002866:	ed93 7a00 	vldr	s14, [r3]
 800286a:	4b8d      	ldr	r3, [pc, #564]	; (8002aa0 <_Z12speed_changei+0x5a0>)
 800286c:	edd3 7a00 	vldr	s15, [r3]
 8002870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002878:	d830      	bhi.n	80028dc <_Z12speed_changei+0x3dc>
			std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) > pi / 18)
 800287a:	4b84      	ldr	r3, [pc, #528]	; (8002a8c <_Z12speed_changei+0x58c>)
 800287c:	ed93 7a00 	vldr	s14, [r3]
 8002880:	4b83      	ldr	r3, [pc, #524]	; (8002a90 <_Z12speed_changei+0x590>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288a:	eeb0 0a67 	vmov.f32	s0, s15
 800288e:	f7fe fc0f 	bl	80010b0 <_ZSt3absf>
 8002892:	eeb0 8a40 	vmov.f32	s16, s0
 8002896:	4b7d      	ldr	r3, [pc, #500]	; (8002a8c <_Z12speed_changei+0x58c>)
 8002898:	ed93 7a00 	vldr	s14, [r3]
 800289c:	4b7d      	ldr	r3, [pc, #500]	; (8002a94 <_Z12speed_changei+0x594>)
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a6:	eeb0 0a67 	vmov.f32	s0, s15
 80028aa:	f7fe fc01 	bl	80010b0 <_ZSt3absf>
 80028ae:	eef0 7a40 	vmov.f32	s15, s0
 80028b2:	eef0 0a67 	vmov.f32	s1, s15
 80028b6:	eeb0 0a48 	vmov.f32	s0, s16
 80028ba:	f7fe fc3d 	bl	8001138 <_ZSt4fminff>
 80028be:	ee10 3a10 	vmov	r3, s0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fe04 	bl	80004d0 <__aeabi_f2d>
		else if(mode == 1 && last_theta > std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) * 2  / 3 && spin <= max_spin &&
 80028c8:	a36d      	add	r3, pc, #436	; (adr r3, 8002a80 <_Z12speed_changei+0x580>)
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	f7fe f8e7 	bl	8000aa0 <__aeabi_dcmpgt>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <_Z12speed_changei+0x3dc>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <_Z12speed_changei+0x3de>
 80028dc:	2300      	movs	r3, #0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d05b      	beq.n	800299a <_Z12speed_changei+0x49a>
			spin += std::pow(max_spin, 2) / (2000 * (std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) * 2 / 3));
 80028e2:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <_Z12speed_changei+0x5a0>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	2002      	movs	r0, #2
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	f000 fca1 	bl	8003234 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80028f2:	ec55 4b10 	vmov	r4, r5, d0
 80028f6:	4b65      	ldr	r3, [pc, #404]	; (8002a8c <_Z12speed_changei+0x58c>)
 80028f8:	ed93 7a00 	vldr	s14, [r3]
 80028fc:	4b64      	ldr	r3, [pc, #400]	; (8002a90 <_Z12speed_changei+0x590>)
 80028fe:	edd3 7a00 	vldr	s15, [r3]
 8002902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002906:	eeb0 0a67 	vmov.f32	s0, s15
 800290a:	f7fe fbd1 	bl	80010b0 <_ZSt3absf>
 800290e:	eeb0 8a40 	vmov.f32	s16, s0
 8002912:	4b5e      	ldr	r3, [pc, #376]	; (8002a8c <_Z12speed_changei+0x58c>)
 8002914:	ed93 7a00 	vldr	s14, [r3]
 8002918:	4b5e      	ldr	r3, [pc, #376]	; (8002a94 <_Z12speed_changei+0x594>)
 800291a:	edd3 7a00 	vldr	s15, [r3]
 800291e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002922:	eeb0 0a67 	vmov.f32	s0, s15
 8002926:	f7fe fbc3 	bl	80010b0 <_ZSt3absf>
 800292a:	eef0 7a40 	vmov.f32	s15, s0
 800292e:	eef0 0a67 	vmov.f32	s1, s15
 8002932:	eeb0 0a48 	vmov.f32	s0, s16
 8002936:	f7fe fbff 	bl	8001138 <_ZSt4fminff>
 800293a:	eef0 7a40 	vmov.f32	s15, s0
 800293e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002942:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800294a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002aa4 <_Z12speed_changei+0x5a4>
 800294e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002952:	ee17 0a90 	vmov	r0, s15
 8002956:	f7fd fdbb 	bl	80004d0 <__aeabi_f2d>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4620      	mov	r0, r4
 8002960:	4629      	mov	r1, r5
 8002962:	f7fd ff37 	bl	80007d4 <__aeabi_ddiv>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4614      	mov	r4, r2
 800296c:	461d      	mov	r5, r3
 800296e:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <_Z12speed_changei+0x59c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fdac 	bl	80004d0 <__aeabi_f2d>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4620      	mov	r0, r4
 800297e:	4629      	mov	r1, r5
 8002980:	f7fd fc48 	bl	8000214 <__adddf3>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f8a8 	bl	8000ae0 <__aeabi_d2f>
 8002990:	4603      	mov	r3, r0
 8002992:	4a42      	ldr	r2, [pc, #264]	; (8002a9c <_Z12speed_changei+0x59c>)
 8002994:	6013      	str	r3, [r2, #0]
}
 8002996:	f000 bc34 	b.w	8003202 <_Z12speed_changei+0xd02>
		else if(mode == 1 && last_theta <= std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) / 3 && spin >= min_spin &&
 800299a:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <_Z12speed_changei+0x588>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	f040 8084 	bne.w	8002aac <_Z12speed_changei+0x5ac>
 80029a4:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <_Z12speed_changei+0x58c>)
 80029a6:	ed93 7a00 	vldr	s14, [r3]
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <_Z12speed_changei+0x590>)
 80029ac:	edd3 7a00 	vldr	s15, [r3]
 80029b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b4:	eeb0 0a67 	vmov.f32	s0, s15
 80029b8:	f7fe fb7a 	bl	80010b0 <_ZSt3absf>
 80029bc:	eeb0 8a40 	vmov.f32	s16, s0
 80029c0:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <_Z12speed_changei+0x58c>)
 80029c2:	ed93 7a00 	vldr	s14, [r3]
 80029c6:	4b33      	ldr	r3, [pc, #204]	; (8002a94 <_Z12speed_changei+0x594>)
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d0:	eeb0 0a67 	vmov.f32	s0, s15
 80029d4:	f7fe fb6c 	bl	80010b0 <_ZSt3absf>
 80029d8:	eef0 7a40 	vmov.f32	s15, s0
 80029dc:	eef0 0a67 	vmov.f32	s1, s15
 80029e0:	eeb0 0a48 	vmov.f32	s0, s16
 80029e4:	f7fe fba8 	bl	8001138 <_ZSt4fminff>
 80029e8:	eef0 7a40 	vmov.f32	s15, s0
 80029ec:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80029f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <_Z12speed_changei+0x598>)
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	db53      	blt.n	8002aac <_Z12speed_changei+0x5ac>
 8002a04:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <_Z12speed_changei+0x59c>)
 8002a06:	ed93 7a00 	vldr	s14, [r3]
 8002a0a:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <_Z12speed_changei+0x5a8>)
 8002a0c:	edd3 7a00 	vldr	s15, [r3]
 8002a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	db48      	blt.n	8002aac <_Z12speed_changei+0x5ac>
			std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) > pi / 18)
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <_Z12speed_changei+0x58c>)
 8002a1c:	ed93 7a00 	vldr	s14, [r3]
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <_Z12speed_changei+0x590>)
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2e:	f7fe fb3f 	bl	80010b0 <_ZSt3absf>
 8002a32:	eeb0 8a40 	vmov.f32	s16, s0
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <_Z12speed_changei+0x58c>)
 8002a38:	ed93 7a00 	vldr	s14, [r3]
 8002a3c:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <_Z12speed_changei+0x594>)
 8002a3e:	edd3 7a00 	vldr	s15, [r3]
 8002a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a46:	eeb0 0a67 	vmov.f32	s0, s15
 8002a4a:	f7fe fb31 	bl	80010b0 <_ZSt3absf>
 8002a4e:	eef0 7a40 	vmov.f32	s15, s0
 8002a52:	eef0 0a67 	vmov.f32	s1, s15
 8002a56:	eeb0 0a48 	vmov.f32	s0, s16
 8002a5a:	f7fe fb6d 	bl	8001138 <_ZSt4fminff>
 8002a5e:	ee10 3a10 	vmov	r3, s0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fd34 	bl	80004d0 <__aeabi_f2d>
		else if(mode == 1 && last_theta <= std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) / 3 && spin >= min_spin &&
 8002a68:	a305      	add	r3, pc, #20	; (adr r3, 8002a80 <_Z12speed_changei+0x580>)
 8002a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6e:	f7fe f817 	bl	8000aa0 <__aeabi_dcmpgt>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d019      	beq.n	8002aac <_Z12speed_changei+0x5ac>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e018      	b.n	8002aae <_Z12speed_changei+0x5ae>
 8002a7c:	f3af 8000 	nop.w
 8002a80:	0e515b0c 	.word	0x0e515b0c
 8002a84:	3fc65717 	.word	0x3fc65717
 8002a88:	200002b0 	.word	0x200002b0
 8002a8c:	20000278 	.word	0x20000278
 8002a90:	20000288 	.word	0x20000288
 8002a94:	2000028c 	.word	0x2000028c
 8002a98:	2000029c 	.word	0x2000029c
 8002a9c:	200002a8 	.word	0x200002a8
 8002aa0:	20000018 	.word	0x20000018
 8002aa4:	44fa0000 	.word	0x44fa0000
 8002aa8:	20000020 	.word	0x20000020
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d068      	beq.n	8002b84 <_Z12speed_changei+0x684>
			spin -= (std::pow(max_spin, 2) - std::pow(min_spin, 2)) / (2000 * (std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) / 3));
 8002ab2:	4bb1      	ldr	r3, [pc, #708]	; (8002d78 <_Z12speed_changei+0x878>)
 8002ab4:	edd3 7a00 	vldr	s15, [r3]
 8002ab8:	2002      	movs	r0, #2
 8002aba:	eeb0 0a67 	vmov.f32	s0, s15
 8002abe:	f000 fbb9 	bl	8003234 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002ac2:	ec55 4b10 	vmov	r4, r5, d0
 8002ac6:	4bad      	ldr	r3, [pc, #692]	; (8002d7c <_Z12speed_changei+0x87c>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	2002      	movs	r0, #2
 8002ace:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad2:	f000 fbaf 	bl	8003234 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002ad6:	ec53 2b10 	vmov	r2, r3, d0
 8002ada:	4620      	mov	r0, r4
 8002adc:	4629      	mov	r1, r5
 8002ade:	f7fd fb97 	bl	8000210 <__aeabi_dsub>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4614      	mov	r4, r2
 8002ae8:	461d      	mov	r5, r3
 8002aea:	4ba5      	ldr	r3, [pc, #660]	; (8002d80 <_Z12speed_changei+0x880>)
 8002aec:	ed93 7a00 	vldr	s14, [r3]
 8002af0:	4ba4      	ldr	r3, [pc, #656]	; (8002d84 <_Z12speed_changei+0x884>)
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afa:	eeb0 0a67 	vmov.f32	s0, s15
 8002afe:	f7fe fad7 	bl	80010b0 <_ZSt3absf>
 8002b02:	eeb0 8a40 	vmov.f32	s16, s0
 8002b06:	4b9e      	ldr	r3, [pc, #632]	; (8002d80 <_Z12speed_changei+0x880>)
 8002b08:	ed93 7a00 	vldr	s14, [r3]
 8002b0c:	4b9e      	ldr	r3, [pc, #632]	; (8002d88 <_Z12speed_changei+0x888>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b16:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1a:	f7fe fac9 	bl	80010b0 <_ZSt3absf>
 8002b1e:	eef0 7a40 	vmov.f32	s15, s0
 8002b22:	eef0 0a67 	vmov.f32	s1, s15
 8002b26:	eeb0 0a48 	vmov.f32	s0, s16
 8002b2a:	f7fe fb05 	bl	8001138 <_ZSt4fminff>
 8002b2e:	eeb0 7a40 	vmov.f32	s14, s0
 8002b32:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b3a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8002d8c <_Z12speed_changei+0x88c>
 8002b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b42:	ee17 0a90 	vmov	r0, s15
 8002b46:	f7fd fcc3 	bl	80004d0 <__aeabi_f2d>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4620      	mov	r0, r4
 8002b50:	4629      	mov	r1, r5
 8002b52:	f7fd fe3f 	bl	80007d4 <__aeabi_ddiv>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	461d      	mov	r5, r3
 8002b5e:	4b8c      	ldr	r3, [pc, #560]	; (8002d90 <_Z12speed_changei+0x890>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fcb4 	bl	80004d0 <__aeabi_f2d>
 8002b68:	4622      	mov	r2, r4
 8002b6a:	462b      	mov	r3, r5
 8002b6c:	f7fd fb50 	bl	8000210 <__aeabi_dsub>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	f7fd ffb2 	bl	8000ae0 <__aeabi_d2f>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4a84      	ldr	r2, [pc, #528]	; (8002d90 <_Z12speed_changei+0x890>)
 8002b80:	6013      	str	r3, [r2, #0]
}
 8002b82:	e33e      	b.n	8003202 <_Z12speed_changei+0xd02>
		else if(mode == 1 && std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) <= pi / 18
 8002b84:	4b83      	ldr	r3, [pc, #524]	; (8002d94 <_Z12speed_changei+0x894>)
 8002b86:	681b      	ldr	r3, [r3, #0]
				&& std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) != 0)
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d159      	bne.n	8002c40 <_Z12speed_changei+0x740>
		else if(mode == 1 && std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) <= pi / 18
 8002b8c:	4b7c      	ldr	r3, [pc, #496]	; (8002d80 <_Z12speed_changei+0x880>)
 8002b8e:	ed93 7a00 	vldr	s14, [r3]
 8002b92:	4b7c      	ldr	r3, [pc, #496]	; (8002d84 <_Z12speed_changei+0x884>)
 8002b94:	edd3 7a00 	vldr	s15, [r3]
 8002b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba0:	f7fe fa86 	bl	80010b0 <_ZSt3absf>
 8002ba4:	eeb0 8a40 	vmov.f32	s16, s0
 8002ba8:	4b75      	ldr	r3, [pc, #468]	; (8002d80 <_Z12speed_changei+0x880>)
 8002baa:	ed93 7a00 	vldr	s14, [r3]
 8002bae:	4b76      	ldr	r3, [pc, #472]	; (8002d88 <_Z12speed_changei+0x888>)
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bbc:	f7fe fa78 	bl	80010b0 <_ZSt3absf>
 8002bc0:	eef0 7a40 	vmov.f32	s15, s0
 8002bc4:	eef0 0a67 	vmov.f32	s1, s15
 8002bc8:	eeb0 0a48 	vmov.f32	s0, s16
 8002bcc:	f7fe fab4 	bl	8001138 <_ZSt4fminff>
 8002bd0:	ee10 3a10 	vmov	r3, s0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd fc7b 	bl	80004d0 <__aeabi_f2d>
 8002bda:	a365      	add	r3, pc, #404	; (adr r3, 8002d70 <_Z12speed_changei+0x870>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd ff4a 	bl	8000a78 <__aeabi_dcmple>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02a      	beq.n	8002c40 <_Z12speed_changei+0x740>
				&& std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) != 0)
 8002bea:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <_Z12speed_changei+0x880>)
 8002bec:	ed93 7a00 	vldr	s14, [r3]
 8002bf0:	4b64      	ldr	r3, [pc, #400]	; (8002d84 <_Z12speed_changei+0x884>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8002bfe:	f7fe fa57 	bl	80010b0 <_ZSt3absf>
 8002c02:	eeb0 8a40 	vmov.f32	s16, s0
 8002c06:	4b5e      	ldr	r3, [pc, #376]	; (8002d80 <_Z12speed_changei+0x880>)
 8002c08:	ed93 7a00 	vldr	s14, [r3]
 8002c0c:	4b5e      	ldr	r3, [pc, #376]	; (8002d88 <_Z12speed_changei+0x888>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c16:	eeb0 0a67 	vmov.f32	s0, s15
 8002c1a:	f7fe fa49 	bl	80010b0 <_ZSt3absf>
 8002c1e:	eef0 7a40 	vmov.f32	s15, s0
 8002c22:	eef0 0a67 	vmov.f32	s1, s15
 8002c26:	eeb0 0a48 	vmov.f32	s0, s16
 8002c2a:	f7fe fa85 	bl	8001138 <_ZSt4fminff>
 8002c2e:	eef0 7a40 	vmov.f32	s15, s0
 8002c32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	d001      	beq.n	8002c40 <_Z12speed_changei+0x740>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <_Z12speed_changei+0x742>
 8002c40:	2300      	movs	r3, #0
		else if(mode == 1 && std::fmin(std::abs(to_theta - start_theta_front), std::abs(to_theta - start_theta_back)) <= pi / 18
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d004      	beq.n	8002c50 <_Z12speed_changei+0x750>
			spin = min_spin;
 8002c46:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <_Z12speed_changei+0x87c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a51      	ldr	r2, [pc, #324]	; (8002d90 <_Z12speed_changei+0x890>)
 8002c4c:	6013      	str	r3, [r2, #0]
}
 8002c4e:	e2d8      	b.n	8003202 <_Z12speed_changei+0xd02>
		else if(mode == 3 && last_goal_theta > std::abs(end_theta_front - goal_theta) * 2 / 3 && spin <= max_spin &&
 8002c50:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <_Z12speed_changei+0x894>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d141      	bne.n	8002cdc <_Z12speed_changei+0x7dc>
 8002c58:	4b4f      	ldr	r3, [pc, #316]	; (8002d98 <_Z12speed_changei+0x898>)
 8002c5a:	ed93 7a00 	vldr	s14, [r3]
 8002c5e:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <_Z12speed_changei+0x89c>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c68:	eeb0 0a67 	vmov.f32	s0, s15
 8002c6c:	f7fe fa20 	bl	80010b0 <_ZSt3absf>
 8002c70:	eef0 7a40 	vmov.f32	s15, s0
 8002c74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c78:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c7c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c80:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <_Z12speed_changei+0x8a0>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8e:	d525      	bpl.n	8002cdc <_Z12speed_changei+0x7dc>
 8002c90:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <_Z12speed_changei+0x890>)
 8002c92:	ed93 7a00 	vldr	s14, [r3]
 8002c96:	4b38      	ldr	r3, [pc, #224]	; (8002d78 <_Z12speed_changei+0x878>)
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca4:	d81a      	bhi.n	8002cdc <_Z12speed_changei+0x7dc>
				std::abs(end_theta_front - goal_theta) > pi / 18)
 8002ca6:	4b3c      	ldr	r3, [pc, #240]	; (8002d98 <_Z12speed_changei+0x898>)
 8002ca8:	ed93 7a00 	vldr	s14, [r3]
 8002cac:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <_Z12speed_changei+0x89c>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cba:	f7fe f9f9 	bl	80010b0 <_ZSt3absf>
 8002cbe:	ee10 3a10 	vmov	r3, s0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fc04 	bl	80004d0 <__aeabi_f2d>
		else if(mode == 3 && last_goal_theta > std::abs(end_theta_front - goal_theta) * 2 / 3 && spin <= max_spin &&
 8002cc8:	a329      	add	r3, pc, #164	; (adr r3, 8002d70 <_Z12speed_changei+0x870>)
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f7fd fee7 	bl	8000aa0 <__aeabi_dcmpgt>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <_Z12speed_changei+0x7dc>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <_Z12speed_changei+0x7de>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d060      	beq.n	8002da4 <_Z12speed_changei+0x8a4>
			spin += std::pow(max_spin, 2) / (2000 * std::abs(end_theta_front - goal_theta) * 2 / 3);
 8002ce2:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <_Z12speed_changei+0x878>)
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	2002      	movs	r0, #2
 8002cea:	eeb0 0a67 	vmov.f32	s0, s15
 8002cee:	f000 faa1 	bl	8003234 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002cf2:	ec55 4b10 	vmov	r4, r5, d0
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <_Z12speed_changei+0x898>)
 8002cf8:	ed93 7a00 	vldr	s14, [r3]
 8002cfc:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <_Z12speed_changei+0x89c>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d06:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0a:	f7fe f9d1 	bl	80010b0 <_ZSt3absf>
 8002d0e:	eef0 7a40 	vmov.f32	s15, s0
 8002d12:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002d8c <_Z12speed_changei+0x88c>
 8002d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d1e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002d22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d26:	ee16 0a90 	vmov	r0, s13
 8002d2a:	f7fd fbd1 	bl	80004d0 <__aeabi_f2d>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4620      	mov	r0, r4
 8002d34:	4629      	mov	r1, r5
 8002d36:	f7fd fd4d 	bl	80007d4 <__aeabi_ddiv>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4614      	mov	r4, r2
 8002d40:	461d      	mov	r5, r3
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <_Z12speed_changei+0x890>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fbc2 	bl	80004d0 <__aeabi_f2d>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4620      	mov	r0, r4
 8002d52:	4629      	mov	r1, r5
 8002d54:	f7fd fa5e 	bl	8000214 <__adddf3>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4619      	mov	r1, r3
 8002d60:	f7fd febe 	bl	8000ae0 <__aeabi_d2f>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <_Z12speed_changei+0x890>)
 8002d68:	6013      	str	r3, [r2, #0]
}
 8002d6a:	e24a      	b.n	8003202 <_Z12speed_changei+0xd02>
 8002d6c:	f3af 8000 	nop.w
 8002d70:	0e515b0c 	.word	0x0e515b0c
 8002d74:	3fc65717 	.word	0x3fc65717
 8002d78:	20000018 	.word	0x20000018
 8002d7c:	20000020 	.word	0x20000020
 8002d80:	20000278 	.word	0x20000278
 8002d84:	20000288 	.word	0x20000288
 8002d88:	2000028c 	.word	0x2000028c
 8002d8c:	44fa0000 	.word	0x44fa0000
 8002d90:	200002a8 	.word	0x200002a8
 8002d94:	200002b0 	.word	0x200002b0
 8002d98:	20000290 	.word	0x20000290
 8002d9c:	2000027c 	.word	0x2000027c
 8002da0:	200002a0 	.word	0x200002a0
		else if(mode == 3 && last_goal_theta <= std::abs(end_theta_front - goal_theta) / 3 && spin >= min_spin &&
 8002da4:	4bba      	ldr	r3, [pc, #744]	; (8003090 <_Z12speed_changei+0xb90>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d13f      	bne.n	8002e2c <_Z12speed_changei+0x92c>
 8002dac:	4bb9      	ldr	r3, [pc, #740]	; (8003094 <_Z12speed_changei+0xb94>)
 8002dae:	ed93 7a00 	vldr	s14, [r3]
 8002db2:	4bb9      	ldr	r3, [pc, #740]	; (8003098 <_Z12speed_changei+0xb98>)
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc0:	f7fe f976 	bl	80010b0 <_ZSt3absf>
 8002dc4:	eef0 7a40 	vmov.f32	s15, s0
 8002dc8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002dcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002dd0:	4bb2      	ldr	r3, [pc, #712]	; (800309c <_Z12speed_changei+0xb9c>)
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dde:	db25      	blt.n	8002e2c <_Z12speed_changei+0x92c>
 8002de0:	4baf      	ldr	r3, [pc, #700]	; (80030a0 <_Z12speed_changei+0xba0>)
 8002de2:	ed93 7a00 	vldr	s14, [r3]
 8002de6:	4baf      	ldr	r3, [pc, #700]	; (80030a4 <_Z12speed_changei+0xba4>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	db1a      	blt.n	8002e2c <_Z12speed_changei+0x92c>
				std::abs(end_theta_front - goal_theta) > pi / 18)
 8002df6:	4ba7      	ldr	r3, [pc, #668]	; (8003094 <_Z12speed_changei+0xb94>)
 8002df8:	ed93 7a00 	vldr	s14, [r3]
 8002dfc:	4ba6      	ldr	r3, [pc, #664]	; (8003098 <_Z12speed_changei+0xb98>)
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e06:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0a:	f7fe f951 	bl	80010b0 <_ZSt3absf>
 8002e0e:	ee10 3a10 	vmov	r3, s0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fd fb5c 	bl	80004d0 <__aeabi_f2d>
		else if(mode == 3 && last_goal_theta <= std::abs(end_theta_front - goal_theta) / 3 && spin >= min_spin &&
 8002e18:	a399      	add	r3, pc, #612	; (adr r3, 8003080 <_Z12speed_changei+0xb80>)
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	f7fd fe3f 	bl	8000aa0 <__aeabi_dcmpgt>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <_Z12speed_changei+0x92c>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <_Z12speed_changei+0x92e>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d052      	beq.n	8002ed8 <_Z12speed_changei+0x9d8>
			spin -= (std::pow(max_spin, 2) - std::pow(min_spin, 2)) / (2000 * std::abs(end_theta_front - goal_theta) / 3);
 8002e32:	4b9d      	ldr	r3, [pc, #628]	; (80030a8 <_Z12speed_changei+0xba8>)
 8002e34:	edd3 7a00 	vldr	s15, [r3]
 8002e38:	2002      	movs	r0, #2
 8002e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3e:	f000 f9f9 	bl	8003234 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002e42:	ec55 4b10 	vmov	r4, r5, d0
 8002e46:	4b97      	ldr	r3, [pc, #604]	; (80030a4 <_Z12speed_changei+0xba4>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	2002      	movs	r0, #2
 8002e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e52:	f000 f9ef 	bl	8003234 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002e56:	ec53 2b10 	vmov	r2, r3, d0
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f7fd f9d7 	bl	8000210 <__aeabi_dsub>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4614      	mov	r4, r2
 8002e68:	461d      	mov	r5, r3
 8002e6a:	4b8a      	ldr	r3, [pc, #552]	; (8003094 <_Z12speed_changei+0xb94>)
 8002e6c:	ed93 7a00 	vldr	s14, [r3]
 8002e70:	4b89      	ldr	r3, [pc, #548]	; (8003098 <_Z12speed_changei+0xb98>)
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e7e:	f7fe f917 	bl	80010b0 <_ZSt3absf>
 8002e82:	eef0 7a40 	vmov.f32	s15, s0
 8002e86:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80030ac <_Z12speed_changei+0xbac>
 8002e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e8e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002e92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e96:	ee16 0a90 	vmov	r0, s13
 8002e9a:	f7fd fb19 	bl	80004d0 <__aeabi_f2d>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	f7fd fc95 	bl	80007d4 <__aeabi_ddiv>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4614      	mov	r4, r2
 8002eb0:	461d      	mov	r5, r3
 8002eb2:	4b7b      	ldr	r3, [pc, #492]	; (80030a0 <_Z12speed_changei+0xba0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fb0a 	bl	80004d0 <__aeabi_f2d>
 8002ebc:	4622      	mov	r2, r4
 8002ebe:	462b      	mov	r3, r5
 8002ec0:	f7fd f9a6 	bl	8000210 <__aeabi_dsub>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f7fd fe08 	bl	8000ae0 <__aeabi_d2f>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4a73      	ldr	r2, [pc, #460]	; (80030a0 <_Z12speed_changei+0xba0>)
 8002ed4:	6013      	str	r3, [r2, #0]
}
 8002ed6:	e194      	b.n	8003202 <_Z12speed_changei+0xd02>
		else if(mode == 3 && std::abs(end_theta_front - goal_theta) <= pi / 18 &&
 8002ed8:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <_Z12speed_changei+0xb90>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d12d      	bne.n	8002f3c <_Z12speed_changei+0xa3c>
 8002ee0:	4b6c      	ldr	r3, [pc, #432]	; (8003094 <_Z12speed_changei+0xb94>)
 8002ee2:	ed93 7a00 	vldr	s14, [r3]
 8002ee6:	4b6c      	ldr	r3, [pc, #432]	; (8003098 <_Z12speed_changei+0xb98>)
 8002ee8:	edd3 7a00 	vldr	s15, [r3]
 8002eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef4:	f7fe f8dc 	bl	80010b0 <_ZSt3absf>
 8002ef8:	ee10 3a10 	vmov	r3, s0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fae7 	bl	80004d0 <__aeabi_f2d>
 8002f02:	a35f      	add	r3, pc, #380	; (adr r3, 8003080 <_Z12speed_changei+0xb80>)
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f7fd fdb6 	bl	8000a78 <__aeabi_dcmple>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d014      	beq.n	8002f3c <_Z12speed_changei+0xa3c>
				std::abs(end_theta_front - goal_theta) != 0)
 8002f12:	4b60      	ldr	r3, [pc, #384]	; (8003094 <_Z12speed_changei+0xb94>)
 8002f14:	ed93 7a00 	vldr	s14, [r3]
 8002f18:	4b5f      	ldr	r3, [pc, #380]	; (8003098 <_Z12speed_changei+0xb98>)
 8002f1a:	edd3 7a00 	vldr	s15, [r3]
 8002f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f22:	eeb0 0a67 	vmov.f32	s0, s15
 8002f26:	f7fe f8c3 	bl	80010b0 <_ZSt3absf>
 8002f2a:	eef0 7a40 	vmov.f32	s15, s0
		else if(mode == 3 && std::abs(end_theta_front - goal_theta) <= pi / 18 &&
 8002f2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f36:	d001      	beq.n	8002f3c <_Z12speed_changei+0xa3c>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <_Z12speed_changei+0xa3e>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <_Z12speed_changei+0xa4c>
			spin = min_spin;
 8002f42:	4b58      	ldr	r3, [pc, #352]	; (80030a4 <_Z12speed_changei+0xba4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a56      	ldr	r2, [pc, #344]	; (80030a0 <_Z12speed_changei+0xba0>)
 8002f48:	6013      	str	r3, [r2, #0]
}
 8002f4a:	e15a      	b.n	8003202 <_Z12speed_changei+0xd02>
		else if(arrive){
 8002f4c:	4b58      	ldr	r3, [pc, #352]	; (80030b0 <_Z12speed_changei+0xbb0>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8156 	beq.w	8003202 <_Z12speed_changei+0xd02>
			SP = 0;
 8002f56:	4b57      	ldr	r3, [pc, #348]	; (80030b4 <_Z12speed_changei+0xbb4>)
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
			spin = 0;
 8002f5e:	4b50      	ldr	r3, [pc, #320]	; (80030a0 <_Z12speed_changei+0xba0>)
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
}
 8002f66:	e14c      	b.n	8003202 <_Z12speed_changei+0xd02>
	else if(MODE == 0){
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 813d 	bne.w	80031ea <_Z12speed_changei+0xcea>
		if(line_find && !arrive){
 8002f70:	4b51      	ldr	r3, [pc, #324]	; (80030b8 <_Z12speed_changei+0xbb8>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00f      	beq.n	8002f98 <_Z12speed_changei+0xa98>
 8002f78:	4b4d      	ldr	r3, [pc, #308]	; (80030b0 <_Z12speed_changei+0xbb0>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	f083 0301 	eor.w	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <_Z12speed_changei+0xa98>
			chassis_right_wheel_angspeed = path_motor_speed[0];
 8002f86:	4b4d      	ldr	r3, [pc, #308]	; (80030bc <_Z12speed_changei+0xbbc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a4d      	ldr	r2, [pc, #308]	; (80030c0 <_Z12speed_changei+0xbc0>)
 8002f8c:	6013      	str	r3, [r2, #0]
			chassis_left_wheel_angspeed  = path_motor_speed[1];
 8002f8e:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <_Z12speed_changei+0xbbc>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a4c      	ldr	r2, [pc, #304]	; (80030c4 <_Z12speed_changei+0xbc4>)
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e134      	b.n	8003202 <_Z12speed_changei+0xd02>
		else if(path_motor_speed[0] * path_motor_speed[1] < 0){
 8002f98:	4b48      	ldr	r3, [pc, #288]	; (80030bc <_Z12speed_changei+0xbbc>)
 8002f9a:	ed93 7a00 	vldr	s14, [r3]
 8002f9e:	4b47      	ldr	r3, [pc, #284]	; (80030bc <_Z12speed_changei+0xbbc>)
 8002fa0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb0:	d508      	bpl.n	8002fc4 <_Z12speed_changei+0xac4>
			chassis_right_wheel_angspeed = path_motor_speed[0];
 8002fb2:	4b42      	ldr	r3, [pc, #264]	; (80030bc <_Z12speed_changei+0xbbc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a42      	ldr	r2, [pc, #264]	; (80030c0 <_Z12speed_changei+0xbc0>)
 8002fb8:	6013      	str	r3, [r2, #0]
			chassis_left_wheel_angspeed  = path_motor_speed[1];
 8002fba:	4b40      	ldr	r3, [pc, #256]	; (80030bc <_Z12speed_changei+0xbbc>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4a41      	ldr	r2, [pc, #260]	; (80030c4 <_Z12speed_changei+0xbc4>)
 8002fc0:	6013      	str	r3, [r2, #0]
}
 8002fc2:	e11e      	b.n	8003202 <_Z12speed_changei+0xd02>
		else if(last_y > 15 && path_dis > 15){
 8002fc4:	4b40      	ldr	r3, [pc, #256]	; (80030c8 <_Z12speed_changei+0xbc8>)
 8002fc6:	edd3 7a00 	vldr	s15, [r3]
 8002fca:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd6:	dd7b      	ble.n	80030d0 <_Z12speed_changei+0xbd0>
 8002fd8:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <_Z12speed_changei+0xbcc>)
 8002fda:	edd3 7a00 	vldr	s15, [r3]
 8002fde:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fea:	dd71      	ble.n	80030d0 <_Z12speed_changei+0xbd0>
			if(chassis_right_wheel_angspeed <= path_motor_speed[0])
 8002fec:	4b33      	ldr	r3, [pc, #204]	; (80030bc <_Z12speed_changei+0xbbc>)
 8002fee:	ed93 7a00 	vldr	s14, [r3]
 8002ff2:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <_Z12speed_changei+0xbc0>)
 8002ff4:	edd3 7a00 	vldr	s15, [r3]
 8002ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003000:	db13      	blt.n	800302a <_Z12speed_changei+0xb2a>
				chassis_right_wheel_angspeed += 0.003;
 8003002:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <_Z12speed_changei+0xbc0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fa62 	bl	80004d0 <__aeabi_f2d>
 800300c:	a31e      	add	r3, pc, #120	; (adr r3, 8003088 <_Z12speed_changei+0xb88>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f7fd f8ff 	bl	8000214 <__adddf3>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f7fd fd5f 	bl	8000ae0 <__aeabi_d2f>
 8003022:	4603      	mov	r3, r0
 8003024:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <_Z12speed_changei+0xbc0>)
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	e003      	b.n	8003032 <_Z12speed_changei+0xb32>
				chassis_right_wheel_angspeed = path_motor_speed[0];
 800302a:	4b24      	ldr	r3, [pc, #144]	; (80030bc <_Z12speed_changei+0xbbc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a24      	ldr	r2, [pc, #144]	; (80030c0 <_Z12speed_changei+0xbc0>)
 8003030:	6013      	str	r3, [r2, #0]
			if(chassis_left_wheel_angspeed <= path_motor_speed[1])
 8003032:	4b22      	ldr	r3, [pc, #136]	; (80030bc <_Z12speed_changei+0xbbc>)
 8003034:	ed93 7a01 	vldr	s14, [r3, #4]
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <_Z12speed_changei+0xbc4>)
 800303a:	edd3 7a00 	vldr	s15, [r3]
 800303e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003046:	db13      	blt.n	8003070 <_Z12speed_changei+0xb70>
				chassis_left_wheel_angspeed += 0.003;
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <_Z12speed_changei+0xbc4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fa3f 	bl	80004d0 <__aeabi_f2d>
 8003052:	a30d      	add	r3, pc, #52	; (adr r3, 8003088 <_Z12speed_changei+0xb88>)
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f7fd f8dc 	bl	8000214 <__adddf3>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd fd3c 	bl	8000ae0 <__aeabi_d2f>
 8003068:	4603      	mov	r3, r0
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <_Z12speed_changei+0xbc4>)
 800306c:	6013      	str	r3, [r2, #0]
			if(chassis_left_wheel_angspeed <= path_motor_speed[1])
 800306e:	e0c8      	b.n	8003202 <_Z12speed_changei+0xd02>
				chassis_left_wheel_angspeed = path_motor_speed[1];
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <_Z12speed_changei+0xbbc>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <_Z12speed_changei+0xbc4>)
 8003076:	6013      	str	r3, [r2, #0]
			if(chassis_left_wheel_angspeed <= path_motor_speed[1])
 8003078:	e0c3      	b.n	8003202 <_Z12speed_changei+0xd02>
 800307a:	bf00      	nop
 800307c:	f3af 8000 	nop.w
 8003080:	0e515b0c 	.word	0x0e515b0c
 8003084:	3fc65717 	.word	0x3fc65717
 8003088:	bc6a7efa 	.word	0xbc6a7efa
 800308c:	3f689374 	.word	0x3f689374
 8003090:	200002b0 	.word	0x200002b0
 8003094:	20000290 	.word	0x20000290
 8003098:	2000027c 	.word	0x2000027c
 800309c:	200002a0 	.word	0x200002a0
 80030a0:	200002a8 	.word	0x200002a8
 80030a4:	20000020 	.word	0x20000020
 80030a8:	20000018 	.word	0x20000018
 80030ac:	44fa0000 	.word	0x44fa0000
 80030b0:	200002cd 	.word	0x200002cd
 80030b4:	200002a4 	.word	0x200002a4
 80030b8:	200002cc 	.word	0x200002cc
 80030bc:	20000714 	.word	0x20000714
 80030c0:	2000024c 	.word	0x2000024c
 80030c4:	20000250 	.word	0x20000250
 80030c8:	20000298 	.word	0x20000298
 80030cc:	2000071c 	.word	0x2000071c
		else if(last_y < 15 && path_dis > 15){
 80030d0:	4b51      	ldr	r3, [pc, #324]	; (8003218 <_Z12speed_changei+0xd18>)
 80030d2:	edd3 7a00 	vldr	s15, [r3]
 80030d6:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80030da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e2:	d564      	bpl.n	80031ae <_Z12speed_changei+0xcae>
 80030e4:	4b4d      	ldr	r3, [pc, #308]	; (800321c <_Z12speed_changei+0xd1c>)
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80030ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f6:	dd5a      	ble.n	80031ae <_Z12speed_changei+0xcae>
			if(chassis_right_wheel_angspeed >= path_motor_speed[0] / 5)
 80030f8:	4b49      	ldr	r3, [pc, #292]	; (8003220 <_Z12speed_changei+0xd20>)
 80030fa:	edd3 7a00 	vldr	s15, [r3]
 80030fe:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003102:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003106:	4b47      	ldr	r3, [pc, #284]	; (8003224 <_Z12speed_changei+0xd24>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003114:	d813      	bhi.n	800313e <_Z12speed_changei+0xc3e>
				chassis_right_wheel_angspeed -= 0.003;
 8003116:	4b43      	ldr	r3, [pc, #268]	; (8003224 <_Z12speed_changei+0xd24>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd f9d8 	bl	80004d0 <__aeabi_f2d>
 8003120:	a33b      	add	r3, pc, #236	; (adr r3, 8003210 <_Z12speed_changei+0xd10>)
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	f7fd f873 	bl	8000210 <__aeabi_dsub>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	f7fd fcd5 	bl	8000ae0 <__aeabi_d2f>
 8003136:	4603      	mov	r3, r0
 8003138:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <_Z12speed_changei+0xd24>)
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e009      	b.n	8003152 <_Z12speed_changei+0xc52>
				chassis_right_wheel_angspeed = path_motor_speed[0] / 5;
 800313e:	4b38      	ldr	r3, [pc, #224]	; (8003220 <_Z12speed_changei+0xd20>)
 8003140:	ed93 7a00 	vldr	s14, [r3]
 8003144:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800314c:	4b35      	ldr	r3, [pc, #212]	; (8003224 <_Z12speed_changei+0xd24>)
 800314e:	edc3 7a00 	vstr	s15, [r3]
			if(chassis_left_wheel_angspeed >= path_motor_speed[1] / 5)
 8003152:	4b33      	ldr	r3, [pc, #204]	; (8003220 <_Z12speed_changei+0xd20>)
 8003154:	edd3 7a01 	vldr	s15, [r3, #4]
 8003158:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800315c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003160:	4b31      	ldr	r3, [pc, #196]	; (8003228 <_Z12speed_changei+0xd28>)
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316e:	d813      	bhi.n	8003198 <_Z12speed_changei+0xc98>
				chassis_left_wheel_angspeed -= 0.003;
 8003170:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <_Z12speed_changei+0xd28>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f9ab 	bl	80004d0 <__aeabi_f2d>
 800317a:	a325      	add	r3, pc, #148	; (adr r3, 8003210 <_Z12speed_changei+0xd10>)
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f7fd f846 	bl	8000210 <__aeabi_dsub>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	f7fd fca8 	bl	8000ae0 <__aeabi_d2f>
 8003190:	4603      	mov	r3, r0
 8003192:	4a25      	ldr	r2, [pc, #148]	; (8003228 <_Z12speed_changei+0xd28>)
 8003194:	6013      	str	r3, [r2, #0]
			if(chassis_left_wheel_angspeed >= path_motor_speed[1] / 5)
 8003196:	e034      	b.n	8003202 <_Z12speed_changei+0xd02>
				path_motor_speed[1] = path_motor_speed[1] / 5;
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <_Z12speed_changei+0xd20>)
 800319a:	ed93 7a01 	vldr	s14, [r3, #4]
 800319e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80031a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031a6:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <_Z12speed_changei+0xd20>)
 80031a8:	edc3 7a01 	vstr	s15, [r3, #4]
			if(chassis_left_wheel_angspeed >= path_motor_speed[1] / 5)
 80031ac:	e029      	b.n	8003202 <_Z12speed_changei+0xd02>
		else if(path_dis <= 15){
 80031ae:	4b1b      	ldr	r3, [pc, #108]	; (800321c <_Z12speed_changei+0xd1c>)
 80031b0:	edd3 7a00 	vldr	s15, [r3]
 80031b4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80031b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c0:	d806      	bhi.n	80031d0 <_Z12speed_changei+0xcd0>
			chassis_right_wheel_angspeed = 0.4;
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <_Z12speed_changei+0xd24>)
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <_Z12speed_changei+0xd2c>)
 80031c6:	601a      	str	r2, [r3, #0]
			chassis_left_wheel_angspeed = 0.4;
 80031c8:	4b17      	ldr	r3, [pc, #92]	; (8003228 <_Z12speed_changei+0xd28>)
 80031ca:	4a18      	ldr	r2, [pc, #96]	; (800322c <_Z12speed_changei+0xd2c>)
 80031cc:	601a      	str	r2, [r3, #0]
}
 80031ce:	e018      	b.n	8003202 <_Z12speed_changei+0xd02>
		else if(arrive){
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <_Z12speed_changei+0xd30>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d014      	beq.n	8003202 <_Z12speed_changei+0xd02>
			chassis_right_wheel_angspeed = 0;
 80031d8:	4b12      	ldr	r3, [pc, #72]	; (8003224 <_Z12speed_changei+0xd24>)
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
			chassis_left_wheel_angspeed  = 0;
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <_Z12speed_changei+0xd28>)
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
}
 80031e8:	e00b      	b.n	8003202 <_Z12speed_changei+0xd02>
	else if(MODE == 3){
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d008      	beq.n	8003202 <_Z12speed_changei+0xd02>
		chassis_right_wheel_angspeed = 0;
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <_Z12speed_changei+0xd24>)
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
		chassis_left_wheel_angspeed  = 0;
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <_Z12speed_changei+0xd28>)
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
}
 8003200:	e7ff      	b.n	8003202 <_Z12speed_changei+0xd02>
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	ecbd 8b02 	vpop	{d8}
 800320c:	bdb0      	pop	{r4, r5, r7, pc}
 800320e:	bf00      	nop
 8003210:	bc6a7efa 	.word	0xbc6a7efa
 8003214:	3f689374 	.word	0x3f689374
 8003218:	20000298 	.word	0x20000298
 800321c:	2000071c 	.word	0x2000071c
 8003220:	20000714 	.word	0x20000714
 8003224:	2000024c 	.word	0x2000024c
 8003228:	20000250 	.word	0x20000250
 800322c:	3ecccccd 	.word	0x3ecccccd
 8003230:	200002cd 	.word	0x200002cd

08003234 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8003234:	b5b0      	push	{r4, r5, r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	ed87 0a01 	vstr	s0, [r7, #4]
 800323e:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7fd f945 	bl	80004d0 <__aeabi_f2d>
 8003246:	4604      	mov	r4, r0
 8003248:	460d      	mov	r5, r1
 800324a:	6838      	ldr	r0, [r7, #0]
 800324c:	f7fd f92e 	bl	80004ac <__aeabi_i2d>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	ec43 2b11 	vmov	d1, r2, r3
 8003258:	ec45 4b10 	vmov	d0, r4, r5
 800325c:	f007 f88a 	bl	800a374 <pow>
 8003260:	eeb0 7a40 	vmov.f32	s14, s0
 8003264:	eef0 7a60 	vmov.f32	s15, s1
    }
 8003268:	eeb0 0a47 	vmov.f32	s0, s14
 800326c:	eef0 0a67 	vmov.f32	s1, s15
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003278 <_Z41__static_initialization_and_destruction_0ii>:
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d11f      	bne.n	80032c8 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800328e:	4293      	cmp	r3, r2
 8003290:	d11a      	bne.n	80032c8 <_Z41__static_initialization_and_destruction_0ii+0x50>
float map_theta_back = -1 * map_theta_front;
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	eef1 7a67 	vneg.f32	s15, s15
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800329e:	edc3 7a00 	vstr	s15, [r3]
float Correction_sp = max_sp * 0.9;
 80032a2:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fd f912 	bl	80004d0 <__aeabi_f2d>
 80032ac:	a308      	add	r3, pc, #32	; (adr r3, 80032d0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	f7fd f965 	bl	8000580 <__aeabi_dmul>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	f7fd fc0f 	bl	8000ae0 <__aeabi_d2f>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80032c6:	6013      	str	r3, [r2, #0]
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	cccccccd 	.word	0xcccccccd
 80032d4:	3feccccc 	.word	0x3feccccc
 80032d8:	20000010 	.word	0x20000010
 80032dc:	2000026c 	.word	0x2000026c
 80032e0:	20000014 	.word	0x20000014
 80032e4:	200002ac 	.word	0x200002ac

080032e8 <_GLOBAL__sub_I_wheel_radius>:
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80032f0:	2001      	movs	r0, #1
 80032f2:	f7ff ffc1 	bl	8003278 <_Z41__static_initialization_and_destruction_0ii>
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032fc:	f002 fba8 	bl	8005a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003300:	f000 f81e 	bl	8003340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003304:	f000 fc3e 	bl	8003b84 <MX_GPIO_Init>
  MX_DMA_Init();
 8003308:	f000 fbfe 	bl	8003b08 <MX_DMA_Init>
  MX_ADC1_Init();
 800330c:	f000 f886 	bl	800341c <MX_ADC1_Init>
  MX_TIM1_Init();
 8003310:	f000 f92a 	bl	8003568 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003314:	f000 f9d0 	bl	80036b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003318:	f000 fa22 	bl	8003760 <MX_TIM3_Init>
  MX_TIM4_Init();
 800331c:	f000 fa74 	bl	8003808 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003320:	f000 fafc 	bl	800391c <MX_TIM8_Init>
  MX_UART4_Init();
 8003324:	f000 fbc6 	bl	8003ab4 <MX_UART4_Init>
  MX_TIM7_Init();
 8003328:	f000 fac2 	bl	80038b0 <MX_TIM7_Init>
  MX_TIM12_Init();
 800332c:	f000 fb4e 	bl	80039cc <MX_TIM12_Init>
  MX_TIM13_Init();
 8003330:	f000 fb9c 	bl	8003a6c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8003334:	f000 fcc0 	bl	8003cb8 <setup>
  main_function();
 8003338:	f000 fd0c 	bl	8003d54 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800333c:	e7fe      	b.n	800333c <main+0x44>
	...

08003340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b094      	sub	sp, #80	; 0x50
 8003344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003346:	f107 031c 	add.w	r3, r7, #28
 800334a:	2234      	movs	r2, #52	; 0x34
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f009 f84e 	bl	800c3f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003354:	f107 0308 	add.w	r3, r7, #8
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003364:	2300      	movs	r3, #0
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	4b2a      	ldr	r3, [pc, #168]	; (8003414 <SystemClock_Config+0xd4>)
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	4a29      	ldr	r2, [pc, #164]	; (8003414 <SystemClock_Config+0xd4>)
 800336e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003372:	6413      	str	r3, [r2, #64]	; 0x40
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <SystemClock_Config+0xd4>)
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003380:	2300      	movs	r3, #0
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4b24      	ldr	r3, [pc, #144]	; (8003418 <SystemClock_Config+0xd8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800338c:	4a22      	ldr	r2, [pc, #136]	; (8003418 <SystemClock_Config+0xd8>)
 800338e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b20      	ldr	r3, [pc, #128]	; (8003418 <SystemClock_Config+0xd8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033a0:	2302      	movs	r3, #2
 80033a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033a4:	2301      	movs	r3, #1
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033a8:	2310      	movs	r3, #16
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ac:	2302      	movs	r3, #2
 80033ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033b0:	2300      	movs	r3, #0
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80033b4:	2310      	movs	r3, #16
 80033b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80033b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80033bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80033be:	2304      	movs	r3, #4
 80033c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80033c2:	2302      	movs	r3, #2
 80033c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80033c6:	2302      	movs	r3, #2
 80033c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033ca:	f107 031c 	add.w	r3, r7, #28
 80033ce:	4618      	mov	r0, r3
 80033d0:	f004 fa0e 	bl	80077f0 <HAL_RCC_OscConfig>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80033da:	f000 fc67 	bl	8003cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033de:	230f      	movs	r3, #15
 80033e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033e2:	2302      	movs	r3, #2
 80033e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033f4:	f107 0308 	add.w	r3, r7, #8
 80033f8:	2102      	movs	r1, #2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 feae 	bl	800715c <HAL_RCC_ClockConfig>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003406:	f000 fc51 	bl	8003cac <Error_Handler>
  }
}
 800340a:	bf00      	nop
 800340c:	3750      	adds	r7, #80	; 0x50
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	40007000 	.word	0x40007000

0800341c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003422:	463b      	mov	r3, r7
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800342e:	4b4b      	ldr	r3, [pc, #300]	; (800355c <MX_ADC1_Init+0x140>)
 8003430:	4a4b      	ldr	r2, [pc, #300]	; (8003560 <MX_ADC1_Init+0x144>)
 8003432:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003434:	4b49      	ldr	r3, [pc, #292]	; (800355c <MX_ADC1_Init+0x140>)
 8003436:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800343a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800343c:	4b47      	ldr	r3, [pc, #284]	; (800355c <MX_ADC1_Init+0x140>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003442:	4b46      	ldr	r3, [pc, #280]	; (800355c <MX_ADC1_Init+0x140>)
 8003444:	2201      	movs	r2, #1
 8003446:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003448:	4b44      	ldr	r3, [pc, #272]	; (800355c <MX_ADC1_Init+0x140>)
 800344a:	2201      	movs	r2, #1
 800344c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800344e:	4b43      	ldr	r3, [pc, #268]	; (800355c <MX_ADC1_Init+0x140>)
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003456:	4b41      	ldr	r3, [pc, #260]	; (800355c <MX_ADC1_Init+0x140>)
 8003458:	2200      	movs	r2, #0
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800345c:	4b3f      	ldr	r3, [pc, #252]	; (800355c <MX_ADC1_Init+0x140>)
 800345e:	4a41      	ldr	r2, [pc, #260]	; (8003564 <MX_ADC1_Init+0x148>)
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003462:	4b3e      	ldr	r3, [pc, #248]	; (800355c <MX_ADC1_Init+0x140>)
 8003464:	2200      	movs	r2, #0
 8003466:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8003468:	4b3c      	ldr	r3, [pc, #240]	; (800355c <MX_ADC1_Init+0x140>)
 800346a:	2207      	movs	r2, #7
 800346c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800346e:	4b3b      	ldr	r3, [pc, #236]	; (800355c <MX_ADC1_Init+0x140>)
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <MX_ADC1_Init+0x140>)
 8003478:	2201      	movs	r2, #1
 800347a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800347c:	4837      	ldr	r0, [pc, #220]	; (800355c <MX_ADC1_Init+0x140>)
 800347e:	f002 fb59 	bl	8005b34 <HAL_ADC_Init>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003488:	f000 fc10 	bl	8003cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800348c:	2307      	movs	r3, #7
 800348e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003490:	2301      	movs	r3, #1
 8003492:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003494:	2307      	movs	r3, #7
 8003496:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003498:	463b      	mov	r3, r7
 800349a:	4619      	mov	r1, r3
 800349c:	482f      	ldr	r0, [pc, #188]	; (800355c <MX_ADC1_Init+0x140>)
 800349e:	f002 fcbb 	bl	8005e18 <HAL_ADC_ConfigChannel>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80034a8:	f000 fc00 	bl	8003cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80034ac:	2306      	movs	r3, #6
 80034ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80034b0:	2302      	movs	r3, #2
 80034b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034b4:	463b      	mov	r3, r7
 80034b6:	4619      	mov	r1, r3
 80034b8:	4828      	ldr	r0, [pc, #160]	; (800355c <MX_ADC1_Init+0x140>)
 80034ba:	f002 fcad 	bl	8005e18 <HAL_ADC_ConfigChannel>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80034c4:	f000 fbf2 	bl	8003cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80034c8:	2304      	movs	r3, #4
 80034ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80034cc:	2303      	movs	r3, #3
 80034ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034d0:	463b      	mov	r3, r7
 80034d2:	4619      	mov	r1, r3
 80034d4:	4821      	ldr	r0, [pc, #132]	; (800355c <MX_ADC1_Init+0x140>)
 80034d6:	f002 fc9f 	bl	8005e18 <HAL_ADC_ConfigChannel>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80034e0:	f000 fbe4 	bl	8003cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80034e4:	2301      	movs	r3, #1
 80034e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80034e8:	2304      	movs	r3, #4
 80034ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034ec:	463b      	mov	r3, r7
 80034ee:	4619      	mov	r1, r3
 80034f0:	481a      	ldr	r0, [pc, #104]	; (800355c <MX_ADC1_Init+0x140>)
 80034f2:	f002 fc91 	bl	8005e18 <HAL_ADC_ConfigChannel>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80034fc:	f000 fbd6 	bl	8003cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003500:	2300      	movs	r3, #0
 8003502:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003504:	2305      	movs	r3, #5
 8003506:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003508:	463b      	mov	r3, r7
 800350a:	4619      	mov	r1, r3
 800350c:	4813      	ldr	r0, [pc, #76]	; (800355c <MX_ADC1_Init+0x140>)
 800350e:	f002 fc83 	bl	8005e18 <HAL_ADC_ConfigChannel>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8003518:	f000 fbc8 	bl	8003cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800351c:	2308      	movs	r3, #8
 800351e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003520:	2306      	movs	r3, #6
 8003522:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003524:	463b      	mov	r3, r7
 8003526:	4619      	mov	r1, r3
 8003528:	480c      	ldr	r0, [pc, #48]	; (800355c <MX_ADC1_Init+0x140>)
 800352a:	f002 fc75 	bl	8005e18 <HAL_ADC_ConfigChannel>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8003534:	f000 fbba 	bl	8003cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003538:	2309      	movs	r3, #9
 800353a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800353c:	2307      	movs	r3, #7
 800353e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003540:	463b      	mov	r3, r7
 8003542:	4619      	mov	r1, r3
 8003544:	4805      	ldr	r0, [pc, #20]	; (800355c <MX_ADC1_Init+0x140>)
 8003546:	f002 fc67 	bl	8005e18 <HAL_ADC_ConfigChannel>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8003550:	f000 fbac 	bl	8003cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	200002d0 	.word	0x200002d0
 8003560:	40012000 	.word	0x40012000
 8003564:	0f000001 	.word	0x0f000001

08003568 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b092      	sub	sp, #72	; 0x48
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800356e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
 8003588:	615a      	str	r2, [r3, #20]
 800358a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800358c:	1d3b      	adds	r3, r7, #4
 800358e:	2220      	movs	r2, #32
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f008 ff2c 	bl	800c3f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003598:	4b45      	ldr	r3, [pc, #276]	; (80036b0 <MX_TIM1_Init+0x148>)
 800359a:	4a46      	ldr	r2, [pc, #280]	; (80036b4 <MX_TIM1_Init+0x14c>)
 800359c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800359e:	4b44      	ldr	r3, [pc, #272]	; (80036b0 <MX_TIM1_Init+0x148>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a4:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <MX_TIM1_Init+0x148>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4199;
 80035aa:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <MX_TIM1_Init+0x148>)
 80035ac:	f241 0267 	movw	r2, #4199	; 0x1067
 80035b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b2:	4b3f      	ldr	r3, [pc, #252]	; (80036b0 <MX_TIM1_Init+0x148>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035b8:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <MX_TIM1_Init+0x148>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035be:	4b3c      	ldr	r3, [pc, #240]	; (80036b0 <MX_TIM1_Init+0x148>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035c4:	483a      	ldr	r0, [pc, #232]	; (80036b0 <MX_TIM1_Init+0x148>)
 80035c6:	f004 fca0 	bl	8007f0a <HAL_TIM_PWM_Init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80035d0:	f000 fb6c 	bl	8003cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d4:	2300      	movs	r3, #0
 80035d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d8:	2300      	movs	r3, #0
 80035da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035e0:	4619      	mov	r1, r3
 80035e2:	4833      	ldr	r0, [pc, #204]	; (80036b0 <MX_TIM1_Init+0x148>)
 80035e4:	f005 fb44 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80035ee:	f000 fb5d 	bl	8003cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035f2:	2360      	movs	r3, #96	; 0x60
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035fa:	2300      	movs	r3, #0
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035fe:	2300      	movs	r3, #0
 8003600:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003602:	2300      	movs	r3, #0
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003606:	2300      	movs	r3, #0
 8003608:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800360e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003612:	2200      	movs	r2, #0
 8003614:	4619      	mov	r1, r3
 8003616:	4826      	ldr	r0, [pc, #152]	; (80036b0 <MX_TIM1_Init+0x148>)
 8003618:	f004 ffca 	bl	80085b0 <HAL_TIM_PWM_ConfigChannel>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003622:	f000 fb43 	bl	8003cac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362a:	2204      	movs	r2, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4820      	ldr	r0, [pc, #128]	; (80036b0 <MX_TIM1_Init+0x148>)
 8003630:	f004 ffbe 	bl	80085b0 <HAL_TIM_PWM_ConfigChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800363a:	f000 fb37 	bl	8003cac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800363e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003642:	2208      	movs	r2, #8
 8003644:	4619      	mov	r1, r3
 8003646:	481a      	ldr	r0, [pc, #104]	; (80036b0 <MX_TIM1_Init+0x148>)
 8003648:	f004 ffb2 	bl	80085b0 <HAL_TIM_PWM_ConfigChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003652:	f000 fb2b 	bl	8003cac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800365a:	220c      	movs	r2, #12
 800365c:	4619      	mov	r1, r3
 800365e:	4814      	ldr	r0, [pc, #80]	; (80036b0 <MX_TIM1_Init+0x148>)
 8003660:	f004 ffa6 	bl	80085b0 <HAL_TIM_PWM_ConfigChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800366a:	f000 fb1f 	bl	8003cac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800366e:	2300      	movs	r3, #0
 8003670:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003686:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003688:	2300      	movs	r3, #0
 800368a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800368c:	1d3b      	adds	r3, r7, #4
 800368e:	4619      	mov	r1, r3
 8003690:	4807      	ldr	r0, [pc, #28]	; (80036b0 <MX_TIM1_Init+0x148>)
 8003692:	f005 fb69 	bl	8008d68 <HAL_TIMEx_ConfigBreakDeadTime>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800369c:	f000 fb06 	bl	8003cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036a0:	4803      	ldr	r0, [pc, #12]	; (80036b0 <MX_TIM1_Init+0x148>)
 80036a2:	f002 f809 	bl	80056b8 <HAL_TIM_MspPostInit>

}
 80036a6:	bf00      	nop
 80036a8:	3748      	adds	r7, #72	; 0x48
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000378 	.word	0x20000378
 80036b4:	40010000 	.word	0x40010000

080036b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	; 0x30
 80036bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f008 fe92 	bl	800c3f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036cc:	1d3b      	adds	r3, r7, #4
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036d4:	4b21      	ldr	r3, [pc, #132]	; (800375c <MX_TIM2_Init+0xa4>)
 80036d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036dc:	4b1f      	ldr	r3, [pc, #124]	; (800375c <MX_TIM2_Init+0xa4>)
 80036de:	2200      	movs	r2, #0
 80036e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e2:	4b1e      	ldr	r3, [pc, #120]	; (800375c <MX_TIM2_Init+0xa4>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80036e8:	4b1c      	ldr	r3, [pc, #112]	; (800375c <MX_TIM2_Init+0xa4>)
 80036ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <MX_TIM2_Init+0xa4>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f6:	4b19      	ldr	r3, [pc, #100]	; (800375c <MX_TIM2_Init+0xa4>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036fc:	2303      	movs	r3, #3
 80036fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003704:	2301      	movs	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003708:	2300      	movs	r3, #0
 800370a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003710:	2300      	movs	r3, #0
 8003712:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003714:	2301      	movs	r3, #1
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003718:	2300      	movs	r3, #0
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003720:	f107 030c 	add.w	r3, r7, #12
 8003724:	4619      	mov	r1, r3
 8003726:	480d      	ldr	r0, [pc, #52]	; (800375c <MX_TIM2_Init+0xa4>)
 8003728:	f004 fd06 	bl	8008138 <HAL_TIM_Encoder_Init>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003732:	f000 fabb 	bl	8003cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	4619      	mov	r1, r3
 8003742:	4806      	ldr	r0, [pc, #24]	; (800375c <MX_TIM2_Init+0xa4>)
 8003744:	f005 fa94 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800374e:	f000 faad 	bl	8003cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003752:	bf00      	nop
 8003754:	3730      	adds	r7, #48	; 0x30
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200003c0 	.word	0x200003c0

08003760 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08c      	sub	sp, #48	; 0x30
 8003764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003766:	f107 030c 	add.w	r3, r7, #12
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f008 fe3e 	bl	800c3f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800377c:	4b20      	ldr	r3, [pc, #128]	; (8003800 <MX_TIM3_Init+0xa0>)
 800377e:	4a21      	ldr	r2, [pc, #132]	; (8003804 <MX_TIM3_Init+0xa4>)
 8003780:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003782:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <MX_TIM3_Init+0xa0>)
 8003784:	2200      	movs	r2, #0
 8003786:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <MX_TIM3_Init+0xa0>)
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800378e:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <MX_TIM3_Init+0xa0>)
 8003790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003794:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003796:	4b1a      	ldr	r3, [pc, #104]	; (8003800 <MX_TIM3_Init+0xa0>)
 8003798:	2200      	movs	r2, #0
 800379a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800379c:	4b18      	ldr	r3, [pc, #96]	; (8003800 <MX_TIM3_Init+0xa0>)
 800379e:	2200      	movs	r2, #0
 80037a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037a2:	2303      	movs	r3, #3
 80037a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037aa:	2301      	movs	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037b6:	2300      	movs	r3, #0
 80037b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037ba:	2301      	movs	r3, #1
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037be:	2300      	movs	r3, #0
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037c6:	f107 030c 	add.w	r3, r7, #12
 80037ca:	4619      	mov	r1, r3
 80037cc:	480c      	ldr	r0, [pc, #48]	; (8003800 <MX_TIM3_Init+0xa0>)
 80037ce:	f004 fcb3 	bl	8008138 <HAL_TIM_Encoder_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80037d8:	f000 fa68 	bl	8003cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4805      	ldr	r0, [pc, #20]	; (8003800 <MX_TIM3_Init+0xa0>)
 80037ea:	f005 fa41 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80037f4:	f000 fa5a 	bl	8003cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037f8:	bf00      	nop
 80037fa:	3730      	adds	r7, #48	; 0x30
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000408 	.word	0x20000408
 8003804:	40000400 	.word	0x40000400

08003808 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08c      	sub	sp, #48	; 0x30
 800380c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800380e:	f107 030c 	add.w	r3, r7, #12
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f008 fdea 	bl	800c3f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003824:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <MX_TIM4_Init+0xa0>)
 8003826:	4a21      	ldr	r2, [pc, #132]	; (80038ac <MX_TIM4_Init+0xa4>)
 8003828:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800382a:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <MX_TIM4_Init+0xa0>)
 800382c:	2200      	movs	r2, #0
 800382e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <MX_TIM4_Init+0xa0>)
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003836:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <MX_TIM4_Init+0xa0>)
 8003838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800383c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800383e:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <MX_TIM4_Init+0xa0>)
 8003840:	2200      	movs	r2, #0
 8003842:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003844:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <MX_TIM4_Init+0xa0>)
 8003846:	2200      	movs	r2, #0
 8003848:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800384a:	2303      	movs	r3, #3
 800384c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003852:	2301      	movs	r3, #1
 8003854:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800385e:	2300      	movs	r3, #0
 8003860:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003862:	2301      	movs	r3, #1
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003866:	2300      	movs	r3, #0
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800386e:	f107 030c 	add.w	r3, r7, #12
 8003872:	4619      	mov	r1, r3
 8003874:	480c      	ldr	r0, [pc, #48]	; (80038a8 <MX_TIM4_Init+0xa0>)
 8003876:	f004 fc5f 	bl	8008138 <HAL_TIM_Encoder_Init>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003880:	f000 fa14 	bl	8003cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003884:	2300      	movs	r3, #0
 8003886:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800388c:	1d3b      	adds	r3, r7, #4
 800388e:	4619      	mov	r1, r3
 8003890:	4805      	ldr	r0, [pc, #20]	; (80038a8 <MX_TIM4_Init+0xa0>)
 8003892:	f005 f9ed 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800389c:	f000 fa06 	bl	8003cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80038a0:	bf00      	nop
 80038a2:	3730      	adds	r7, #48	; 0x30
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000450 	.word	0x20000450
 80038ac:	40000800 	.word	0x40000800

080038b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b6:	463b      	mov	r3, r7
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <MX_TIM7_Init+0x64>)
 80038c0:	4a15      	ldr	r2, [pc, #84]	; (8003918 <MX_TIM7_Init+0x68>)
 80038c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80038c4:	4b13      	ldr	r3, [pc, #76]	; (8003914 <MX_TIM7_Init+0x64>)
 80038c6:	2253      	movs	r2, #83	; 0x53
 80038c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <MX_TIM7_Init+0x64>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80038d0:	4b10      	ldr	r3, [pc, #64]	; (8003914 <MX_TIM7_Init+0x64>)
 80038d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038d8:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <MX_TIM7_Init+0x64>)
 80038da:	2200      	movs	r2, #0
 80038dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80038de:	480d      	ldr	r0, [pc, #52]	; (8003914 <MX_TIM7_Init+0x64>)
 80038e0:	f004 fa24 	bl	8007d2c <HAL_TIM_Base_Init>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80038ea:	f000 f9df 	bl	8003cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80038f6:	463b      	mov	r3, r7
 80038f8:	4619      	mov	r1, r3
 80038fa:	4806      	ldr	r0, [pc, #24]	; (8003914 <MX_TIM7_Init+0x64>)
 80038fc:	f005 f9b8 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003906:	f000 f9d1 	bl	8003cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000498 	.word	0x20000498
 8003918:	40001400 	.word	0x40001400

0800391c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	; 0x30
 8003920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003922:	f107 030c 	add.w	r3, r7, #12
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f008 fd60 	bl	800c3f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003938:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <MX_TIM8_Init+0xa8>)
 800393a:	4a23      	ldr	r2, [pc, #140]	; (80039c8 <MX_TIM8_Init+0xac>)
 800393c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800393e:	4b21      	ldr	r3, [pc, #132]	; (80039c4 <MX_TIM8_Init+0xa8>)
 8003940:	2200      	movs	r2, #0
 8003942:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003944:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <MX_TIM8_Init+0xa8>)
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <MX_TIM8_Init+0xa8>)
 800394c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003950:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003952:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <MX_TIM8_Init+0xa8>)
 8003954:	2200      	movs	r2, #0
 8003956:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <MX_TIM8_Init+0xa8>)
 800395a:	2200      	movs	r2, #0
 800395c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <MX_TIM8_Init+0xa8>)
 8003960:	2200      	movs	r2, #0
 8003962:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003964:	2303      	movs	r3, #3
 8003966:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800396c:	2301      	movs	r3, #1
 800396e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800397c:	2301      	movs	r3, #1
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003980:	2300      	movs	r3, #0
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003988:	f107 030c 	add.w	r3, r7, #12
 800398c:	4619      	mov	r1, r3
 800398e:	480d      	ldr	r0, [pc, #52]	; (80039c4 <MX_TIM8_Init+0xa8>)
 8003990:	f004 fbd2 	bl	8008138 <HAL_TIM_Encoder_Init>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800399a:	f000 f987 	bl	8003cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800399e:	2300      	movs	r3, #0
 80039a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80039a6:	1d3b      	adds	r3, r7, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4806      	ldr	r0, [pc, #24]	; (80039c4 <MX_TIM8_Init+0xa8>)
 80039ac:	f005 f960 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80039b6:	f000 f979 	bl	8003cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80039ba:	bf00      	nop
 80039bc:	3730      	adds	r7, #48	; 0x30
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200004e0 	.word	0x200004e0
 80039c8:	40010400 	.word	0x40010400

080039cc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80039d2:	1d3b      	adds	r3, r7, #4
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]
 80039e0:	615a      	str	r2, [r3, #20]
 80039e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80039e4:	4b1f      	ldr	r3, [pc, #124]	; (8003a64 <MX_TIM12_Init+0x98>)
 80039e6:	4a20      	ldr	r2, [pc, #128]	; (8003a68 <MX_TIM12_Init+0x9c>)
 80039e8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <MX_TIM12_Init+0x98>)
 80039ec:	2253      	movs	r2, #83	; 0x53
 80039ee:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f0:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <MX_TIM12_Init+0x98>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19999;
 80039f6:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <MX_TIM12_Init+0x98>)
 80039f8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80039fc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039fe:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <MX_TIM12_Init+0x98>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a04:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <MX_TIM12_Init+0x98>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003a0a:	4816      	ldr	r0, [pc, #88]	; (8003a64 <MX_TIM12_Init+0x98>)
 8003a0c:	f004 fa7d 	bl	8007f0a <HAL_TIM_PWM_Init>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8003a16:	f000 f949 	bl	8003cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a1a:	2360      	movs	r3, #96	; 0x60
 8003a1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a2a:	1d3b      	adds	r3, r7, #4
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4619      	mov	r1, r3
 8003a30:	480c      	ldr	r0, [pc, #48]	; (8003a64 <MX_TIM12_Init+0x98>)
 8003a32:	f004 fdbd 	bl	80085b0 <HAL_TIM_PWM_ConfigChannel>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8003a3c:	f000 f936 	bl	8003cac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a40:	1d3b      	adds	r3, r7, #4
 8003a42:	2204      	movs	r2, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	4807      	ldr	r0, [pc, #28]	; (8003a64 <MX_TIM12_Init+0x98>)
 8003a48:	f004 fdb2 	bl	80085b0 <HAL_TIM_PWM_ConfigChannel>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8003a52:	f000 f92b 	bl	8003cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003a56:	4803      	ldr	r0, [pc, #12]	; (8003a64 <MX_TIM12_Init+0x98>)
 8003a58:	f001 fe2e 	bl	80056b8 <HAL_TIM_MspPostInit>

}
 8003a5c:	bf00      	nop
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000528 	.word	0x20000528
 8003a68:	40001800 	.word	0x40001800

08003a6c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <MX_TIM13_Init+0x40>)
 8003a72:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <MX_TIM13_Init+0x44>)
 8003a74:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 839;
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <MX_TIM13_Init+0x40>)
 8003a78:	f240 3247 	movw	r2, #839	; 0x347
 8003a7c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <MX_TIM13_Init+0x40>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 99;
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <MX_TIM13_Init+0x40>)
 8003a86:	2263      	movs	r2, #99	; 0x63
 8003a88:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a8a:	4b08      	ldr	r3, [pc, #32]	; (8003aac <MX_TIM13_Init+0x40>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <MX_TIM13_Init+0x40>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003a96:	4805      	ldr	r0, [pc, #20]	; (8003aac <MX_TIM13_Init+0x40>)
 8003a98:	f004 f948 	bl	8007d2c <HAL_TIM_Base_Init>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8003aa2:	f000 f903 	bl	8003cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000570 	.word	0x20000570
 8003ab0:	40001c00 	.word	0x40001c00

08003ab4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <MX_UART4_Init+0x4c>)
 8003aba:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <MX_UART4_Init+0x50>)
 8003abc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <MX_UART4_Init+0x4c>)
 8003ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ac4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <MX_UART4_Init+0x4c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <MX_UART4_Init+0x4c>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <MX_UART4_Init+0x4c>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <MX_UART4_Init+0x4c>)
 8003ada:	220c      	movs	r2, #12
 8003adc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <MX_UART4_Init+0x4c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <MX_UART4_Init+0x4c>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003aea:	4805      	ldr	r0, [pc, #20]	; (8003b00 <MX_UART4_Init+0x4c>)
 8003aec:	f005 f9a2 	bl	8008e34 <HAL_UART_Init>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003af6:	f000 f8d9 	bl	8003cac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200005b8 	.word	0x200005b8
 8003b04:	40004c00 	.word	0x40004c00

08003b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <MX_DMA_Init+0x78>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4a1a      	ldr	r2, [pc, #104]	; (8003b80 <MX_DMA_Init+0x78>)
 8003b18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1e:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <MX_DMA_Init+0x78>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <MX_DMA_Init+0x78>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <MX_DMA_Init+0x78>)
 8003b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b38:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <MX_DMA_Init+0x78>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	200d      	movs	r0, #13
 8003b4c:	f002 fcef 	bl	800652e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003b50:	200d      	movs	r0, #13
 8003b52:	f002 fd08 	bl	8006566 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003b56:	2200      	movs	r2, #0
 8003b58:	2100      	movs	r1, #0
 8003b5a:	200f      	movs	r0, #15
 8003b5c:	f002 fce7 	bl	800652e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003b60:	200f      	movs	r0, #15
 8003b62:	f002 fd00 	bl	8006566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8003b66:	2201      	movs	r2, #1
 8003b68:	2100      	movs	r1, #0
 8003b6a:	2038      	movs	r0, #56	; 0x38
 8003b6c:	f002 fcdf 	bl	800652e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003b70:	2038      	movs	r0, #56	; 0x38
 8003b72:	f002 fcf8 	bl	8006566 <HAL_NVIC_EnableIRQ>

}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800

08003b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b8a:	f107 030c 	add.w	r3, r7, #12
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	609a      	str	r2, [r3, #8]
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <MX_GPIO_Init+0x118>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a3e      	ldr	r2, [pc, #248]	; (8003c9c <MX_GPIO_Init+0x118>)
 8003ba4:	f043 0304 	orr.w	r3, r3, #4
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b3c      	ldr	r3, [pc, #240]	; (8003c9c <MX_GPIO_Init+0x118>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	4b38      	ldr	r3, [pc, #224]	; (8003c9c <MX_GPIO_Init+0x118>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	4a37      	ldr	r2, [pc, #220]	; (8003c9c <MX_GPIO_Init+0x118>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc6:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <MX_GPIO_Init+0x118>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	607b      	str	r3, [r7, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <MX_GPIO_Init+0x118>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a30      	ldr	r2, [pc, #192]	; (8003c9c <MX_GPIO_Init+0x118>)
 8003bdc:	f043 0302 	orr.w	r3, r3, #2
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <MX_GPIO_Init+0x118>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003bf4:	482a      	ldr	r0, [pc, #168]	; (8003ca0 <MX_GPIO_Init+0x11c>)
 8003bf6:	f003 fa7f 	bl	80070f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2120      	movs	r1, #32
 8003bfe:	4829      	ldr	r0, [pc, #164]	; (8003ca4 <MX_GPIO_Init+0x120>)
 8003c00:	f003 fa7a 	bl	80070f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8003c04:	2200      	movs	r2, #0
 8003c06:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003c0a:	4827      	ldr	r0, [pc, #156]	; (8003ca8 <MX_GPIO_Init+0x124>)
 8003c0c:	f003 fa74 	bl	80070f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8003c10:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c16:	2301      	movs	r3, #1
 8003c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c22:	f107 030c 	add.w	r3, r7, #12
 8003c26:	4619      	mov	r1, r3
 8003c28:	481d      	ldr	r0, [pc, #116]	; (8003ca0 <MX_GPIO_Init+0x11c>)
 8003c2a:	f003 f8b9 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003c2e:	2320      	movs	r3, #32
 8003c30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c32:	2301      	movs	r3, #1
 8003c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003c3e:	f107 030c 	add.w	r3, r7, #12
 8003c42:	4619      	mov	r1, r3
 8003c44:	4817      	ldr	r0, [pc, #92]	; (8003ca4 <MX_GPIO_Init+0x120>)
 8003c46:	f003 f8ab 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003c4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003c4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c50:	2301      	movs	r3, #1
 8003c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5c:	f107 030c 	add.w	r3, r7, #12
 8003c60:	4619      	mov	r1, r3
 8003c62:	4811      	ldr	r0, [pc, #68]	; (8003ca8 <MX_GPIO_Init+0x124>)
 8003c64:	f003 f89c 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c74:	2302      	movs	r3, #2
 8003c76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c78:	f107 030c 	add.w	r3, r7, #12
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4808      	ldr	r0, [pc, #32]	; (8003ca0 <MX_GPIO_Init+0x11c>)
 8003c80:	f003 f88e 	bl	8006da0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8003c84:	2201      	movs	r2, #1
 8003c86:	2100      	movs	r1, #0
 8003c88:	2017      	movs	r0, #23
 8003c8a:	f002 fc50 	bl	800652e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c8e:	2017      	movs	r0, #23
 8003c90:	f002 fc69 	bl	8006566 <HAL_NVIC_EnableIRQ>

}
 8003c94:	bf00      	nop
 8003c96:	3720      	adds	r7, #32
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40020800 	.word	0x40020800
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	40020400 	.word	0x40020400

08003cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb0:	b672      	cpsid	i
}
 8003cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cb4:	e7fe      	b.n	8003cb4 <Error_Handler+0x8>
	...

08003cb8 <setup>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart4;

int move_mode = 2;

void setup(){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
	//UART_setup();

	HAL_TIM_Base_Start_IT(&htim7);
 8003cbc:	4809      	ldr	r0, [pc, #36]	; (8003ce4 <setup+0x2c>)
 8003cbe:	f004 f885 	bl	8007dcc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003cc2:	4809      	ldr	r0, [pc, #36]	; (8003ce8 <setup+0x30>)
 8003cc4:	f004 f882 	bl	8007dcc <HAL_TIM_Base_Start_IT>
	DCmotor_setup();
 8003cc8:	f000 f9a2 	bl	8004010 <_Z13DCmotor_setupv>
	path_setup();
 8003ccc:	f000 fe36 	bl	800493c <_Z10path_setupv>
	UART_setup();
 8003cd0:	f7fd f8d8 	bl	8000e84 <_Z10UART_setupv>
	servo_setup();
 8003cd4:	f001 f946 	bl	8004f64 <_Z11servo_setupv>
	arrive = 0;
 8003cd8:	4b04      	ldr	r3, [pc, #16]	; (8003cec <setup+0x34>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000498 	.word	0x20000498
 8003ce8:	20000570 	.word	0x20000570
 8003cec:	200002cd 	.word	0x200002cd

08003cf0 <divide>:
int divide(int times,int *count){
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]

	if (*count > times){
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	da04      	bge.n	8003d0e <divide+0x1e>
		*count = 0;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
		return 1;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <divide+0x20>

	}else{
		return 0;
 8003d0e:	2300      	movs	r3, #0
	}
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <wait>:

void wait(int time){//time單位為ms
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim13);
 8003d24:	4809      	ldr	r0, [pc, #36]	; (8003d4c <wait+0x30>)
 8003d26:	f004 f851 	bl	8007dcc <HAL_TIM_Base_Start_IT>

	while(delay_count < time){
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <wait+0x34>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	dd00      	ble.n	8003d36 <wait+0x1a>
 8003d34:	e7f9      	b.n	8003d2a <wait+0xe>
	}

	HAL_TIM_Base_Stop_IT(&htim13);
 8003d36:	4805      	ldr	r0, [pc, #20]	; (8003d4c <wait+0x30>)
 8003d38:	f004 f8b8 	bl	8007eac <HAL_TIM_Base_Stop_IT>

	delay_count = 0;
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <wait+0x34>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000570 	.word	0x20000570
 8003d50:	200006bc 	.word	0x200006bc

08003d54 <main_function>:

void main_function(){
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0

	while(1){

		if(nextPoint){
 8003d58:	4b77      	ldr	r3, [pc, #476]	; (8003f38 <main_function+0x1e4>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0fb      	beq.n	8003d58 <main_function+0x4>

			arrive = 0;
 8003d60:	4b76      	ldr	r3, [pc, #472]	; (8003f3c <main_function+0x1e8>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	701a      	strb	r2, [r3, #0]

			//path
			if(statusData[0] == 1){
 8003d66:	4b76      	ldr	r3, [pc, #472]	; (8003f40 <main_function+0x1ec>)
 8003d68:	edd3 7a00 	vldr	s15, [r3]
 8003d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d70:	eef4 7a47 	vcmp.f32	s15, s14
 8003d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d78:	d10a      	bne.n	8003d90 <main_function+0x3c>

				move_mode = 0;
 8003d7a:	4b72      	ldr	r3, [pc, #456]	; (8003f44 <main_function+0x1f0>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
				path_moveto(statusData[2]);
 8003d80:	4b6f      	ldr	r3, [pc, #444]	; (8003f40 <main_function+0x1ec>)
 8003d82:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d86:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8a:	f001 f801 	bl	8004d90 <_Z11path_movetof>
 8003d8e:	e0cb      	b.n	8003f28 <main_function+0x1d4>
			}
			//integral
			else if(statusData[0] == 2){
 8003d90:	4b6b      	ldr	r3, [pc, #428]	; (8003f40 <main_function+0x1ec>)
 8003d92:	edd3 7a00 	vldr	s15, [r3]
 8003d96:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003d9a:	eef4 7a47 	vcmp.f32	s15, s14
 8003d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da2:	d114      	bne.n	8003dce <main_function+0x7a>

				move_mode = 1;
 8003da4:	4b67      	ldr	r3, [pc, #412]	; (8003f44 <main_function+0x1f0>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
				integral_moveto(statusData[1], statusData[2], statusData[3]);
 8003daa:	4b65      	ldr	r3, [pc, #404]	; (8003f40 <main_function+0x1ec>)
 8003dac:	edd3 7a01 	vldr	s15, [r3, #4]
 8003db0:	4b63      	ldr	r3, [pc, #396]	; (8003f40 <main_function+0x1ec>)
 8003db2:	ed93 7a02 	vldr	s14, [r3, #8]
 8003db6:	4b62      	ldr	r3, [pc, #392]	; (8003f40 <main_function+0x1ec>)
 8003db8:	edd3 6a03 	vldr	s13, [r3, #12]
 8003dbc:	eeb0 1a66 	vmov.f32	s2, s13
 8003dc0:	eef0 0a47 	vmov.f32	s1, s14
 8003dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc8:	f7fd fd8a 	bl	80018e0 <_Z15integral_movetofff>
 8003dcc:	e0ac      	b.n	8003f28 <main_function+0x1d4>
			}
			//stop
			else if(statusData[0] == 3){
 8003dce:	4b5c      	ldr	r3, [pc, #368]	; (8003f40 <main_function+0x1ec>)
 8003dd0:	edd3 7a00 	vldr	s15, [r3]
 8003dd4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003dd8:	eef4 7a47 	vcmp.f32	s15, s14
 8003ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de0:	d106      	bne.n	8003df0 <main_function+0x9c>

				move_mode = 2;
 8003de2:	4b58      	ldr	r3, [pc, #352]	; (8003f44 <main_function+0x1f0>)
 8003de4:	2202      	movs	r2, #2
 8003de6:	601a      	str	r2, [r3, #0]
				arrive = 1;
 8003de8:	4b54      	ldr	r3, [pc, #336]	; (8003f3c <main_function+0x1e8>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	e09b      	b.n	8003f28 <main_function+0x1d4>
			}
			//find line
			else if(statusData[0] == 4){
 8003df0:	4b53      	ldr	r3, [pc, #332]	; (8003f40 <main_function+0x1ec>)
 8003df2:	edd3 7a00 	vldr	s15, [r3]
 8003df6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003dfa:	eef4 7a47 	vcmp.f32	s15, s14
 8003dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e02:	d118      	bne.n	8003e36 <main_function+0xe2>

				move_mode = 3;
 8003e04:	4b4f      	ldr	r3, [pc, #316]	; (8003f44 <main_function+0x1f0>)
 8003e06:	2203      	movs	r2, #3
 8003e08:	601a      	str	r2, [r3, #0]
				move_to_line(statusData[1], statusData[2]);
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	; (8003f40 <main_function+0x1ec>)
 8003e0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e10:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003e14:	4b4a      	ldr	r3, [pc, #296]	; (8003f40 <main_function+0x1ec>)
 8003e16:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	ee17 0a10 	vmov	r0, s14
 8003e30:	f7fe face 	bl	80023d0 <_Z12move_to_lineib>
 8003e34:	e078      	b.n	8003f28 <main_function+0x1d4>
			}
			//reset
			else if(statusData[0] == 5){
 8003e36:	4b42      	ldr	r3, [pc, #264]	; (8003f40 <main_function+0x1ec>)
 8003e38:	edd3 7a00 	vldr	s15, [r3]
 8003e3c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003e40:	eef4 7a47 	vcmp.f32	s15, s14
 8003e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e48:	d114      	bne.n	8003e74 <main_function+0x120>

				move_mode = 2;
 8003e4a:	4b3e      	ldr	r3, [pc, #248]	; (8003f44 <main_function+0x1f0>)
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	601a      	str	r2, [r3, #0]
				location_reset(statusData[1], statusData[2], statusData[3]);
 8003e50:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <main_function+0x1ec>)
 8003e52:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e56:	4b3a      	ldr	r3, [pc, #232]	; (8003f40 <main_function+0x1ec>)
 8003e58:	ed93 7a02 	vldr	s14, [r3, #8]
 8003e5c:	4b38      	ldr	r3, [pc, #224]	; (8003f40 <main_function+0x1ec>)
 8003e5e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003e62:	eeb0 1a66 	vmov.f32	s2, s13
 8003e66:	eef0 0a47 	vmov.f32	s1, s14
 8003e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e6e:	f7fd fa77 	bl	8001360 <_Z14location_resetfff>
 8003e72:	e059      	b.n	8003f28 <main_function+0x1d4>
			}
			//cascade
			else if(statusData[0] == 6){
 8003e74:	4b32      	ldr	r3, [pc, #200]	; (8003f40 <main_function+0x1ec>)
 8003e76:	edd3 7a00 	vldr	s15, [r3]
 8003e7a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003e7e:	eef4 7a47 	vcmp.f32	s15, s14
 8003e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e86:	d130      	bne.n	8003eea <main_function+0x196>

				move_mode = 2;
 8003e88:	4b2e      	ldr	r3, [pc, #184]	; (8003f44 <main_function+0x1f0>)
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	601a      	str	r2, [r3, #0]

				if(statusData[1] == 1)
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <main_function+0x1ec>)
 8003e90:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e98:	eef4 7a47 	vcmp.f32	s15, s14
 8003e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea0:	d104      	bne.n	8003eac <main_function+0x158>
					update_cascadeState(1);
 8003ea2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003ea6:	f000 fcc5 	bl	8004834 <_Z19update_cascadeStatef>
 8003eaa:	e01a      	b.n	8003ee2 <main_function+0x18e>

				else if(statusData[1] == 0)
 8003eac:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <main_function+0x1ec>)
 8003eae:	edd3 7a01 	vldr	s15, [r3, #4]
 8003eb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eba:	d104      	bne.n	8003ec6 <main_function+0x172>
					update_cascadeState(0);
 8003ebc:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8003f48 <main_function+0x1f4>
 8003ec0:	f000 fcb8 	bl	8004834 <_Z19update_cascadeStatef>
 8003ec4:	e00d      	b.n	8003ee2 <main_function+0x18e>

				else if(statusData[1] == 2)
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <main_function+0x1ec>)
 8003ec8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ecc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ed0:	eef4 7a47 	vcmp.f32	s15, s14
 8003ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed8:	d103      	bne.n	8003ee2 <main_function+0x18e>
					update_cascadeState(2);
 8003eda:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003ede:	f000 fca9 	bl	8004834 <_Z19update_cascadeStatef>

				arrive = 1;
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <main_function+0x1e8>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	e01e      	b.n	8003f28 <main_function+0x1d4>
			}
			//cascade servo
			else if(statusData[0] == 7){
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <main_function+0x1ec>)
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003ef4:	eef4 7a47 	vcmp.f32	s15, s14
 8003ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efc:	d114      	bne.n	8003f28 <main_function+0x1d4>

				move_mode = 2;
 8003efe:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <main_function+0x1f0>)
 8003f00:	2202      	movs	r2, #2
 8003f02:	601a      	str	r2, [r3, #0]

				if(statusData[1])
 8003f04:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <main_function+0x1ec>)
 8003f06:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f12:	d003      	beq.n	8003f1c <main_function+0x1c8>

					update_blockstate(1);
 8003f14:	2001      	movs	r0, #1
 8003f16:	f001 f947 	bl	80051a8 <_Z17update_blockstateb>
 8003f1a:	e002      	b.n	8003f22 <main_function+0x1ce>
				else
					update_blockstate(0);
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f001 f943 	bl	80051a8 <_Z17update_blockstateb>

				arrive = 1;
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <main_function+0x1e8>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
			}
			nextPoint = 0;
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <main_function+0x1e4>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
			move_mode = 2;
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <main_function+0x1f0>)
 8003f30:	2202      	movs	r2, #2
 8003f32:	601a      	str	r2, [r3, #0]
		if(nextPoint){
 8003f34:	e710      	b.n	8003d58 <main_function+0x4>
 8003f36:	bf00      	nop
 8003f38:	20000000 	.word	0x20000000
 8003f3c:	200002cd 	.word	0x200002cd
 8003f40:	20000220 	.word	0x20000220
 8003f44:	20000024 	.word	0x20000024
 8003f48:	00000000 	.word	0x00000000

08003f4c <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}
int tt,ttt;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

	if (htim -> Instance == TIM7){
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1f      	ldr	r2, [pc, #124]	; (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d12d      	bne.n	8003fba <HAL_TIM_PeriodElapsedCallback+0x6e>
		divide_10_count++;
 8003f5e:	4b1f      	ldr	r3, [pc, #124]	; (8003fdc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3301      	adds	r3, #1
 8003f64:	4a1d      	ldr	r2, [pc, #116]	; (8003fdc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003f66:	6013      	str	r3, [r2, #0]
		divide_100_count++;
 8003f68:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003f70:	6013      	str	r3, [r2, #0]
		speedOutput(move_mode);
 8003f72:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fbf8 	bl	800476c <_Z11speedOutputi>
		DCmotor_run();
 8003f7c:	f000 fb94 	bl	80046a8 <_Z11DCmotor_runv>
		Cascade_run();
 8003f80:	f000 f9d6 	bl	8004330 <_Z11Cascade_runv>
		blockState();
 8003f84:	f001 f8be 	bl	8005104 <_Z10blockStatev>

		if(divide(10,&divide_10_count)){
 8003f88:	4914      	ldr	r1, [pc, #80]	; (8003fdc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003f8a:	200a      	movs	r0, #10
 8003f8c:	f7ff feb0 	bl	8003cf0 <divide>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0

			}
		if(divide(100,&divide_100_count)){
 8003f94:	4912      	ldr	r1, [pc, #72]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003f96:	2064      	movs	r0, #100	; 0x64
 8003f98:	f7ff feaa 	bl	8003cf0 <divide>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	bf14      	ite	ne
 8003fa2:	2301      	movne	r3, #1
 8003fa4:	2300      	moveq	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d006      	beq.n	8003fba <HAL_TIM_PeriodElapsedCallback+0x6e>
			tt++;
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	4a0d      	ldr	r2, [pc, #52]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003fb4:	6013      	str	r3, [r2, #0]
			UART_TRANSMIT();
 8003fb6:	f7fc ffd1 	bl	8000f5c <_Z13UART_TRANSMITv>
		}
		//transmit_test();
		//HAL_UART_Transmit_DMA(&huart1, buffer_TX, sizeof(buffer_TX));
		//HAL_UART_Transmit_IT(&huart1, buffer_TX, sizeof(buffer_TX));
	}
	 if (htim -> Instance == TIM13){
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a0b      	ldr	r2, [pc, #44]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d104      	bne.n	8003fce <HAL_TIM_PeriodElapsedCallback+0x82>
		// UART_TRANSMIT();
		 delay_count++;
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003fcc:	6013      	str	r3, [r2, #0]
		 //UART_ReceiveData_Status_IT(&huart4, &statusData[0], &statusData[1], &statusData[2], &statusData[3]);
	}
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40001400 	.word	0x40001400
 8003fdc:	200006c0 	.word	0x200006c0
 8003fe0:	200006c4 	.word	0x200006c4
 8003fe4:	20000024 	.word	0x20000024
 8003fe8:	200006c8 	.word	0x200006c8
 8003fec:	40001c00 	.word	0x40001c00
 8003ff0:	200006bc 	.word	0x200006bc

08003ff4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	80fb      	strh	r3, [r7, #6]

//UART test
	updateLocation(GPIO_Pin);
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fadf 	bl	80045c4 <_Z14updateLocationt>

//		UART_TRANSMIT();
////
//
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <_Z13DCmotor_setupv>:
	{&PID_controllers[1],&htim4,0,0,0,reduction_ratio},
	{&PID_controllers[2],&htim8,0,0,0,reduction_ratio},
	{&PID_controllers[3],&htim3,0,0,0,reduction_ratio}
};

void DCmotor_setup(){
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);//motor[1]
 8004014:	2104      	movs	r1, #4
 8004016:	4818      	ldr	r0, [pc, #96]	; (8004078 <_Z13DCmotor_setupv+0x68>)
 8004018:	f004 f934 	bl	8008284 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 800401c:	2100      	movs	r1, #0
 800401e:	4816      	ldr	r0, [pc, #88]	; (8004078 <_Z13DCmotor_setupv+0x68>)
 8004020:	f004 f930 	bl	8008284 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);//motor[2]
 8004024:	2104      	movs	r1, #4
 8004026:	4815      	ldr	r0, [pc, #84]	; (800407c <_Z13DCmotor_setupv+0x6c>)
 8004028:	f004 f92c 	bl	8008284 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 800402c:	2100      	movs	r1, #0
 800402e:	4813      	ldr	r0, [pc, #76]	; (800407c <_Z13DCmotor_setupv+0x6c>)
 8004030:	f004 f928 	bl	8008284 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);//motor[3]
 8004034:	2104      	movs	r1, #4
 8004036:	4812      	ldr	r0, [pc, #72]	; (8004080 <_Z13DCmotor_setupv+0x70>)
 8004038:	f004 f924 	bl	8008284 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 800403c:	2100      	movs	r1, #0
 800403e:	4810      	ldr	r0, [pc, #64]	; (8004080 <_Z13DCmotor_setupv+0x70>)
 8004040:	f004 f920 	bl	8008284 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_2);//motor[4]
 8004044:	2104      	movs	r1, #4
 8004046:	480f      	ldr	r0, [pc, #60]	; (8004084 <_Z13DCmotor_setupv+0x74>)
 8004048:	f004 f91c 	bl	8008284 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 800404c:	2100      	movs	r1, #0
 800404e:	480d      	ldr	r0, [pc, #52]	; (8004084 <_Z13DCmotor_setupv+0x74>)
 8004050:	f004 f918 	bl	8008284 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004054:	2100      	movs	r1, #0
 8004056:	480c      	ldr	r0, [pc, #48]	; (8004088 <_Z13DCmotor_setupv+0x78>)
 8004058:	f003 ffa6 	bl	8007fa8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800405c:	2104      	movs	r1, #4
 800405e:	480a      	ldr	r0, [pc, #40]	; (8004088 <_Z13DCmotor_setupv+0x78>)
 8004060:	f003 ffa2 	bl	8007fa8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004064:	2108      	movs	r1, #8
 8004066:	4808      	ldr	r0, [pc, #32]	; (8004088 <_Z13DCmotor_setupv+0x78>)
 8004068:	f003 ff9e 	bl	8007fa8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800406c:	210c      	movs	r1, #12
 800406e:	4806      	ldr	r0, [pc, #24]	; (8004088 <_Z13DCmotor_setupv+0x78>)
 8004070:	f003 ff9a 	bl	8007fa8 <HAL_TIM_PWM_Start>
}
 8004074:	bf00      	nop
 8004076:	bd80      	pop	{r7, pc}
 8004078:	200003c0 	.word	0x200003c0
 800407c:	20000408 	.word	0x20000408
 8004080:	20000450 	.word	0x20000450
 8004084:	200004e0 	.word	0x200004e0
 8004088:	20000378 	.word	0x20000378

0800408c <_Z14PI_control_runP8DC_motorf>:

void PI_control_run(DC_motor *motor,float sp) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	ed87 0a00 	vstr	s0, [r7]
    float error, u_a = 0;
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
    int pul = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
    float bound = 1 / motor->PID_Controllers->ki;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80040aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040b2:	edc7 7a03 	vstr	s15, [r7, #12]
    motor->PID_Controllers->setpoint = sp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	611a      	str	r2, [r3, #16]
    error = motor->PID_Controllers->setpoint - motor->speed;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	ed93 7a04 	vldr	s14, [r3, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80040cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040d0:	edc7 7a02 	vstr	s15, [r7, #8]
    motor->PID_Controllers->integral += error * motor->PID_Controllers->span;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80040e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80040e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f4:	edc3 7a02 	vstr	s15, [r3, #8]

    if (motor->PID_Controllers->integral
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8004100:	ed97 7a03 	vldr	s14, [r7, #12]
 8004104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410c:	d504      	bpl.n	8004118 <_Z14PI_control_runP8DC_motorf+0x8c>
    		> bound) motor->PID_Controllers->integral = bound;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	e014      	b.n	8004142 <_Z14PI_control_runP8DC_motorf+0xb6>
    else if (motor->PID_Controllers->integral
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	ed93 7a02 	vldr	s14, [r3, #8]
    		< -bound) motor->PID_Controllers->integral = -bound;
 8004120:	edd7 7a03 	vldr	s15, [r7, #12]
 8004124:	eef1 7a67 	vneg.f32	s15, s15
    else if (motor->PID_Controllers->integral
 8004128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800412c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004130:	d507      	bpl.n	8004142 <_Z14PI_control_runP8DC_motorf+0xb6>
    		< -bound) motor->PID_Controllers->integral = -bound;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	edd7 7a03 	vldr	s15, [r7, #12]
 800413a:	eef1 7a67 	vneg.f32	s15, s15
 800413e:	edc3 7a02 	vstr	s15, [r3, #8]
    u_a = motor->PID_Controllers->kp * error
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	ed93 7a00 	vldr	s14, [r3]
 800414a:	edd7 7a02 	vldr	s15, [r7, #8]
 800414e:	ee27 7a27 	vmul.f32	s14, s14, s15
    		+ motor->PID_Controllers->ki * motor->PID_Controllers->integral;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	edd3 6a01 	vldr	s13, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004162:	ee66 7aa7 	vmul.f32	s15, s13, s15
    u_a = motor->PID_Controllers->kp * error
 8004166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800416a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (u_a > 1) u_a = 1;
 800416e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	dd03      	ble.n	8004188 <_Z14PI_control_runP8DC_motorf+0xfc>
 8004180:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e00a      	b.n	800419e <_Z14PI_control_runP8DC_motorf+0x112>
    else if (u_a < -1) u_a = -1;
 8004188:	edd7 7a05 	vldr	s15, [r7, #20]
 800418c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004198:	d501      	bpl.n	800419e <_Z14PI_control_runP8DC_motorf+0x112>
 800419a:	4b3c      	ldr	r3, [pc, #240]	; (800428c <_Z14PI_control_runP8DC_motorf+0x200>)
 800419c:	617b      	str	r3, [r7, #20]

    if (u_a > 0) {
 800419e:	edd7 7a05 	vldr	s15, [r7, #20]
 80041a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041aa:	dd1a      	ble.n	80041e2 <_Z14PI_control_runP8DC_motorf+0x156>
        pul = (int)(u_a * motor->PID_Controllers->arr);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80041be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041c6:	ee17 3a90 	vmov	r3, s15
 80041ca:	613b      	str	r3, [r7, #16]
        HAL_GPIO_WritePin(motor->PID_Controllers->gpioPort, motor->PID_Controllers->gpioPin, GPIO_PIN_SET);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6998      	ldr	r0, [r3, #24]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	8b9b      	ldrh	r3, [r3, #28]
 80041d8:	2201      	movs	r2, #1
 80041da:	4619      	mov	r1, r3
 80041dc:	f002 ff8c 	bl	80070f8 <HAL_GPIO_WritePin>
 80041e0:	e025      	b.n	800422e <_Z14PI_control_runP8DC_motorf+0x1a2>
    } else if (u_a < 0) {
 80041e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80041e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ee:	d51c      	bpl.n	800422a <_Z14PI_control_runP8DC_motorf+0x19e>
        pul = (int)(-u_a * motor->PID_Controllers->arr);
 80041f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80041f4:	eeb1 7a67 	vneg.f32	s14, s15
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800420e:	ee17 3a90 	vmov	r3, s15
 8004212:	613b      	str	r3, [r7, #16]
        HAL_GPIO_WritePin(motor->PID_Controllers->gpioPort, motor->PID_Controllers->gpioPin, GPIO_PIN_RESET);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6998      	ldr	r0, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	8b9b      	ldrh	r3, [r3, #28]
 8004220:	2200      	movs	r2, #0
 8004222:	4619      	mov	r1, r3
 8004224:	f002 ff68 	bl	80070f8 <HAL_GPIO_WritePin>
 8004228:	e001      	b.n	800422e <_Z14PI_control_runP8DC_motorf+0x1a2>
    } else {
        pul = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
    }
    __HAL_TIM_SET_COMPARE(motor->PID_Controllers->htim, motor->PID_Controllers->TIM_CHANNEL, pul);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <_Z14PI_control_runP8DC_motorf+0x1ba>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004244:	e01d      	b.n	8004282 <_Z14PI_control_runP8DC_motorf+0x1f6>
    __HAL_TIM_SET_COMPARE(motor->PID_Controllers->htim, motor->PID_Controllers->TIM_CHANNEL, pul);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	2b04      	cmp	r3, #4
 800424e:	d106      	bne.n	800425e <_Z14PI_control_runP8DC_motorf+0x1d2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800425c:	e011      	b.n	8004282 <_Z14PI_control_runP8DC_motorf+0x1f6>
    __HAL_TIM_SET_COMPARE(motor->PID_Controllers->htim, motor->PID_Controllers->TIM_CHANNEL, pul);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	2b08      	cmp	r3, #8
 8004266:	d106      	bne.n	8004276 <_Z14PI_control_runP8DC_motorf+0x1ea>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004274:	e005      	b.n	8004282 <_Z14PI_control_runP8DC_motorf+0x1f6>
    __HAL_TIM_SET_COMPARE(motor->PID_Controllers->htim, motor->PID_Controllers->TIM_CHANNEL, pul);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004282:	bf00      	nop
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	bf800000 	.word	0xbf800000

08004290 <_Z8getStateP8DC_motorii>:

void getState(DC_motor *motor,int sign_speed,int sign_height){
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
	int16_t enc ;
	enc = __HAL_TIM_GetCounter(motor->htim);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	82fb      	strh	r3, [r7, #22]
	motor->speed = sign_speed*(float)enc /(4*resolution*motor->reduction_ratio*span);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	ee07 3a90 	vmov	s15, r3
 80042ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042b4:	ee07 3a90 	vmov	s15, r3
 80042b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042bc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80042c6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004328 <_Z8getStateP8DC_motorii+0x98>
 80042ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042ce:	4b17      	ldr	r3, [pc, #92]	; (800432c <_Z8getStateP8DC_motorii+0x9c>)
 80042d0:	edd3 7a00 	vldr	s15, [r3]
 80042d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	edc3 7a02 	vstr	s15, [r3, #8]
	__HAL_TIM_SetCounter(motor->htim,0);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2200      	movs	r2, #0
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
	motor->currentHeight += motor->speed*span*sign_height;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <_Z8getStateP8DC_motorii+0x9c>)
 80042fa:	edd3 7a00 	vldr	s15, [r3]
 80042fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	ee07 3a90 	vmov	s15, r3
 8004308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800430c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	45000000 	.word	0x45000000
 800432c:	20000040 	.word	0x20000040

08004330 <_Z11Cascade_runv>:
//	}else{
//		*velocity_sp = 0;
//	}
//}
int k = 0;
void Cascade_run(){//put in timer_IT
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
	//改GO_BACK就好,false 上升,true 下降
	if(GO_BACK == 0){//上升
 8004334:	4b9b      	ldr	r3, [pc, #620]	; (80045a4 <_Z11Cascade_runv+0x274>)
 8004336:	edd3 7a00 	vldr	s15, [r3]
 800433a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004342:	d161      	bne.n	8004408 <_Z11Cascade_runv+0xd8>
		//先修改底下微動到點判斷
		cascade_arrive_down[0] = false;
 8004344:	4b98      	ldr	r3, [pc, #608]	; (80045a8 <_Z11Cascade_runv+0x278>)
 8004346:	2200      	movs	r2, #0
 8004348:	701a      	strb	r2, [r3, #0]
		cascade_arrive_down[1] = false;
 800434a:	4b97      	ldr	r3, [pc, #604]	; (80045a8 <_Z11Cascade_runv+0x278>)
 800434c:	2200      	movs	r2, #0
 800434e:	705a      	strb	r2, [r3, #1]
		//給速度
		if(DC_Motors[0].currentHeight < goalHeight){
 8004350:	4b96      	ldr	r3, [pc, #600]	; (80045ac <_Z11Cascade_runv+0x27c>)
 8004352:	ed93 7a03 	vldr	s14, [r3, #12]
 8004356:	4b96      	ldr	r3, [pc, #600]	; (80045b0 <_Z11Cascade_runv+0x280>)
 8004358:	edd3 7a00 	vldr	s15, [r3]
 800435c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004364:	d504      	bpl.n	8004370 <_Z11Cascade_runv+0x40>
			sp[0] = cascade_speed;
 8004366:	4b93      	ldr	r3, [pc, #588]	; (80045b4 <_Z11Cascade_runv+0x284>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a93      	ldr	r2, [pc, #588]	; (80045b8 <_Z11Cascade_runv+0x288>)
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e00e      	b.n	800438e <_Z11Cascade_runv+0x5e>
		}else if(DC_Motors[0].currentHeight >= goalHeight)
 8004370:	4b8e      	ldr	r3, [pc, #568]	; (80045ac <_Z11Cascade_runv+0x27c>)
 8004372:	ed93 7a03 	vldr	s14, [r3, #12]
 8004376:	4b8e      	ldr	r3, [pc, #568]	; (80045b0 <_Z11Cascade_runv+0x280>)
 8004378:	edd3 7a00 	vldr	s15, [r3]
 800437c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004384:	db03      	blt.n	800438e <_Z11Cascade_runv+0x5e>
			sp[0] = 0;
 8004386:	4b8c      	ldr	r3, [pc, #560]	; (80045b8 <_Z11Cascade_runv+0x288>)
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
		if(DC_Motors[1].currentHeight < goalHeight){
 800438e:	4b87      	ldr	r3, [pc, #540]	; (80045ac <_Z11Cascade_runv+0x27c>)
 8004390:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004394:	4b86      	ldr	r3, [pc, #536]	; (80045b0 <_Z11Cascade_runv+0x280>)
 8004396:	edd3 7a00 	vldr	s15, [r3]
 800439a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	d504      	bpl.n	80043ae <_Z11Cascade_runv+0x7e>
			sp[1] = cascade_speed;
 80043a4:	4b83      	ldr	r3, [pc, #524]	; (80045b4 <_Z11Cascade_runv+0x284>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a83      	ldr	r2, [pc, #524]	; (80045b8 <_Z11Cascade_runv+0x288>)
 80043aa:	6053      	str	r3, [r2, #4]
 80043ac:	e00e      	b.n	80043cc <_Z11Cascade_runv+0x9c>
		}else if(DC_Motors[1].currentHeight >= goalHeight)
 80043ae:	4b7f      	ldr	r3, [pc, #508]	; (80045ac <_Z11Cascade_runv+0x27c>)
 80043b0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80043b4:	4b7e      	ldr	r3, [pc, #504]	; (80045b0 <_Z11Cascade_runv+0x280>)
 80043b6:	edd3 7a00 	vldr	s15, [r3]
 80043ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c2:	db03      	blt.n	80043cc <_Z11Cascade_runv+0x9c>
			sp[1] = 0;
 80043c4:	4b7c      	ldr	r3, [pc, #496]	; (80045b8 <_Z11Cascade_runv+0x288>)
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	605a      	str	r2, [r3, #4]
		//到點判斷
		if(DC_Motors[0].currentHeight >= goalHeight &&
 80043cc:	4b77      	ldr	r3, [pc, #476]	; (80045ac <_Z11Cascade_runv+0x27c>)
 80043ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80043d2:	4b77      	ldr	r3, [pc, #476]	; (80045b0 <_Z11Cascade_runv+0x280>)
 80043d4:	edd3 7a00 	vldr	s15, [r3]
 80043d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e0:	db0e      	blt.n	8004400 <_Z11Cascade_runv+0xd0>
				DC_Motors[1].currentHeight >= goalHeight){//到達上面
 80043e2:	4b72      	ldr	r3, [pc, #456]	; (80045ac <_Z11Cascade_runv+0x27c>)
 80043e4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80043e8:	4b71      	ldr	r3, [pc, #452]	; (80045b0 <_Z11Cascade_runv+0x280>)
 80043ea:	edd3 7a00 	vldr	s15, [r3]
		if(DC_Motors[0].currentHeight >= goalHeight &&
 80043ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f6:	db03      	blt.n	8004400 <_Z11Cascade_runv+0xd0>
			cascade_state = 2;
 80043f8:	4b70      	ldr	r3, [pc, #448]	; (80045bc <_Z11Cascade_runv+0x28c>)
 80043fa:	2202      	movs	r2, #2
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e0cf      	b.n	80045a0 <_Z11Cascade_runv+0x270>
		}else{
			cascade_state = 1;
 8004400:	4b6e      	ldr	r3, [pc, #440]	; (80045bc <_Z11Cascade_runv+0x28c>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET &&
					HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_SET){
				cascade_state = 0;
			}
		}
}
 8004406:	e0cb      	b.n	80045a0 <_Z11Cascade_runv+0x270>
	else if(GO_BACK == 1){//下降
 8004408:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <_Z11Cascade_runv+0x274>)
 800440a:	edd3 7a00 	vldr	s15, [r3]
 800440e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004412:	eef4 7a47 	vcmp.f32	s15, s14
 8004416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441a:	d14d      	bne.n	80044b8 <_Z11Cascade_runv+0x188>
		if (cascade_arrive_down[0] == false){
 800441c:	4b62      	ldr	r3, [pc, #392]	; (80045a8 <_Z11Cascade_runv+0x278>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d108      	bne.n	8004436 <_Z11Cascade_runv+0x106>
			sp[0] = -cascade_speed;
 8004424:	4b63      	ldr	r3, [pc, #396]	; (80045b4 <_Z11Cascade_runv+0x284>)
 8004426:	edd3 7a00 	vldr	s15, [r3]
 800442a:	eef1 7a67 	vneg.f32	s15, s15
 800442e:	4b62      	ldr	r3, [pc, #392]	; (80045b8 <_Z11Cascade_runv+0x288>)
 8004430:	edc3 7a00 	vstr	s15, [r3]
 8004434:	e011      	b.n	800445a <_Z11Cascade_runv+0x12a>
		}else if (cascade_arrive_down[0] == true||DC_Motors[0].currentHeight <= -0.5){
 8004436:	4b5c      	ldr	r3, [pc, #368]	; (80045a8 <_Z11Cascade_runv+0x278>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d009      	beq.n	8004452 <_Z11Cascade_runv+0x122>
 800443e:	4b5b      	ldr	r3, [pc, #364]	; (80045ac <_Z11Cascade_runv+0x27c>)
 8004440:	edd3 7a03 	vldr	s15, [r3, #12]
 8004444:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8004448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800444c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004450:	d803      	bhi.n	800445a <_Z11Cascade_runv+0x12a>
			sp[0] = 0;
 8004452:	4b59      	ldr	r3, [pc, #356]	; (80045b8 <_Z11Cascade_runv+0x288>)
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
		if (cascade_arrive_down[1] == false){
 800445a:	4b53      	ldr	r3, [pc, #332]	; (80045a8 <_Z11Cascade_runv+0x278>)
 800445c:	785b      	ldrb	r3, [r3, #1]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d108      	bne.n	8004474 <_Z11Cascade_runv+0x144>
			sp[1] = -cascade_speed;
 8004462:	4b54      	ldr	r3, [pc, #336]	; (80045b4 <_Z11Cascade_runv+0x284>)
 8004464:	edd3 7a00 	vldr	s15, [r3]
 8004468:	eef1 7a67 	vneg.f32	s15, s15
 800446c:	4b52      	ldr	r3, [pc, #328]	; (80045b8 <_Z11Cascade_runv+0x288>)
 800446e:	edc3 7a01 	vstr	s15, [r3, #4]
 8004472:	e011      	b.n	8004498 <_Z11Cascade_runv+0x168>
		}else if (cascade_arrive_down[1] == true||DC_Motors[1].currentHeight <= -0.5){
 8004474:	4b4c      	ldr	r3, [pc, #304]	; (80045a8 <_Z11Cascade_runv+0x278>)
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d009      	beq.n	8004490 <_Z11Cascade_runv+0x160>
 800447c:	4b4b      	ldr	r3, [pc, #300]	; (80045ac <_Z11Cascade_runv+0x27c>)
 800447e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004482:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8004486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448e:	d803      	bhi.n	8004498 <_Z11Cascade_runv+0x168>
			sp[1] = 0;
 8004490:	4b49      	ldr	r3, [pc, #292]	; (80045b8 <_Z11Cascade_runv+0x288>)
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	605a      	str	r2, [r3, #4]
		if(cascade_arrive_down[0] == true && cascade_arrive_down[1] == true){
 8004498:	4b43      	ldr	r3, [pc, #268]	; (80045a8 <_Z11Cascade_runv+0x278>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d107      	bne.n	80044b0 <_Z11Cascade_runv+0x180>
 80044a0:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <_Z11Cascade_runv+0x278>)
 80044a2:	785b      	ldrb	r3, [r3, #1]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d103      	bne.n	80044b0 <_Z11Cascade_runv+0x180>
			cascade_state = 0;
 80044a8:	4b44      	ldr	r3, [pc, #272]	; (80045bc <_Z11Cascade_runv+0x28c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e077      	b.n	80045a0 <_Z11Cascade_runv+0x270>
			cascade_state = 1;
 80044b0:	4b42      	ldr	r3, [pc, #264]	; (80045bc <_Z11Cascade_runv+0x28c>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
}
 80044b6:	e073      	b.n	80045a0 <_Z11Cascade_runv+0x270>
	else if(GO_BACK == 2){
 80044b8:	4b3a      	ldr	r3, [pc, #232]	; (80045a4 <_Z11Cascade_runv+0x274>)
 80044ba:	edd3 7a00 	vldr	s15, [r3]
 80044be:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80044c2:	eef4 7a47 	vcmp.f32	s15, s14
 80044c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ca:	d169      	bne.n	80045a0 <_Z11Cascade_runv+0x270>
		cascade_state = 1;
 80044cc:	4b3b      	ldr	r3, [pc, #236]	; (80045bc <_Z11Cascade_runv+0x28c>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET){
 80044d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044d6:	483a      	ldr	r0, [pc, #232]	; (80045c0 <_Z11Cascade_runv+0x290>)
 80044d8:	f002 fdf6 	bl	80070c8 <HAL_GPIO_ReadPin>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <_Z11Cascade_runv+0x1ce>
				sp[1] = -cascade_speed;
 80044ec:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <_Z11Cascade_runv+0x284>)
 80044ee:	edd3 7a00 	vldr	s15, [r3]
 80044f2:	eef1 7a67 	vneg.f32	s15, s15
 80044f6:	4b30      	ldr	r3, [pc, #192]	; (80045b8 <_Z11Cascade_runv+0x288>)
 80044f8:	edc3 7a01 	vstr	s15, [r3, #4]
 80044fc:	e010      	b.n	8004520 <_Z11Cascade_runv+0x1f0>
			else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET){
 80044fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004502:	482f      	ldr	r0, [pc, #188]	; (80045c0 <_Z11Cascade_runv+0x290>)
 8004504:	f002 fde0 	bl	80070c8 <HAL_GPIO_ReadPin>
 8004508:	4603      	mov	r3, r0
 800450a:	2b01      	cmp	r3, #1
 800450c:	bf0c      	ite	eq
 800450e:	2301      	moveq	r3, #1
 8004510:	2300      	movne	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <_Z11Cascade_runv+0x1f0>
				sp[1] = 0;
 8004518:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <_Z11Cascade_runv+0x288>)
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	605a      	str	r2, [r3, #4]
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8004520:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004524:	4826      	ldr	r0, [pc, #152]	; (80045c0 <_Z11Cascade_runv+0x290>)
 8004526:	f002 fdcf 	bl	80070c8 <HAL_GPIO_ReadPin>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d008      	beq.n	800454c <_Z11Cascade_runv+0x21c>
				sp[0] = -cascade_speed;
 800453a:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <_Z11Cascade_runv+0x284>)
 800453c:	edd3 7a00 	vldr	s15, [r3]
 8004540:	eef1 7a67 	vneg.f32	s15, s15
 8004544:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <_Z11Cascade_runv+0x288>)
 8004546:	edc3 7a00 	vstr	s15, [r3]
 800454a:	e010      	b.n	800456e <_Z11Cascade_runv+0x23e>
			else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_SET){
 800454c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004550:	481b      	ldr	r0, [pc, #108]	; (80045c0 <_Z11Cascade_runv+0x290>)
 8004552:	f002 fdb9 	bl	80070c8 <HAL_GPIO_ReadPin>
 8004556:	4603      	mov	r3, r0
 8004558:	2b01      	cmp	r3, #1
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <_Z11Cascade_runv+0x23e>
				sp[0] = 0;
 8004566:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <_Z11Cascade_runv+0x288>)
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET &&
 800456e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004572:	4813      	ldr	r0, [pc, #76]	; (80045c0 <_Z11Cascade_runv+0x290>)
 8004574:	f002 fda8 	bl	80070c8 <HAL_GPIO_ReadPin>
 8004578:	4603      	mov	r3, r0
 800457a:	2b01      	cmp	r3, #1
 800457c:	d109      	bne.n	8004592 <_Z11Cascade_runv+0x262>
					HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_SET){
 800457e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004582:	480f      	ldr	r0, [pc, #60]	; (80045c0 <_Z11Cascade_runv+0x290>)
 8004584:	f002 fda0 	bl	80070c8 <HAL_GPIO_ReadPin>
 8004588:	4603      	mov	r3, r0
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET &&
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <_Z11Cascade_runv+0x262>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <_Z11Cascade_runv+0x264>
 8004592:	2300      	movs	r3, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <_Z11Cascade_runv+0x270>
				cascade_state = 0;
 8004598:	4b08      	ldr	r3, [pc, #32]	; (80045bc <_Z11Cascade_runv+0x28c>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
}
 800459e:	e7ff      	b.n	80045a0 <_Z11Cascade_runv+0x270>
 80045a0:	bf00      	nop
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000048 	.word	0x20000048
 80045a8:	2000004c 	.word	0x2000004c
 80045ac:	200000f0 	.word	0x200000f0
 80045b0:	20000044 	.word	0x20000044
 80045b4:	20000038 	.word	0x20000038
 80045b8:	200006cc 	.word	0x200006cc
 80045bc:	200006e4 	.word	0x200006e4
 80045c0:	40020800 	.word	0x40020800

080045c4 <_Z14updateLocationt>:

//put in EXTI
void updateLocation(uint16_t GPIO_Pin){//get ball location = 0,put ball location = 1
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	80fb      	strh	r3, [r7, #6]
	  switch (GPIO_Pin) {
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d4:	d02a      	beq.n	800462c <_Z14updateLocationt+0x68>
 80045d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045da:	d14f      	bne.n	800467c <_Z14updateLocationt+0xb8>
	  case GPIO_PIN_9://right
		  a[0]++;
 80045dc:	4b2c      	ldr	r3, [pc, #176]	; (8004690 <_Z14updateLocationt+0xcc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <_Z14updateLocationt+0xcc>)
 80045e4:	6013      	str	r3, [r2, #0]
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_SET){
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	4619      	mov	r1, r3
 80045ea:	482a      	ldr	r0, [pc, #168]	; (8004694 <_Z14updateLocationt+0xd0>)
 80045ec:	f002 fd6c 	bl	80070c8 <HAL_GPIO_ReadPin>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	bf0c      	ite	eq
 80045f6:	2301      	moveq	r3, #1
 80045f8:	2300      	movne	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d03f      	beq.n	8004680 <_Z14updateLocationt+0xbc>
		  DC_Motors[0].currentHeight = 0;
 8004600:	4b25      	ldr	r3, [pc, #148]	; (8004698 <_Z14updateLocationt+0xd4>)
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	60da      	str	r2, [r3, #12]
		  if(GO_BACK == true){
 8004608:	4b24      	ldr	r3, [pc, #144]	; (800469c <_Z14updateLocationt+0xd8>)
 800460a:	edd3 7a00 	vldr	s15, [r3]
 800460e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004612:	eef4 7a47 	vcmp.f32	s15, s14
 8004616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461a:	d131      	bne.n	8004680 <_Z14updateLocationt+0xbc>
		  cascade_arrive_down[0] = true;
 800461c:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <_Z14updateLocationt+0xdc>)
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
		  sp[0] = 0;
 8004622:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <_Z14updateLocationt+0xe0>)
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
		  }
		  }
		  ;
		  break;
 800462a:	e029      	b.n	8004680 <_Z14updateLocationt+0xbc>
	  case GPIO_PIN_8://left
		  a[1]++;
 800462c:	4b18      	ldr	r3, [pc, #96]	; (8004690 <_Z14updateLocationt+0xcc>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	3301      	adds	r3, #1
 8004632:	4a17      	ldr	r2, [pc, #92]	; (8004690 <_Z14updateLocationt+0xcc>)
 8004634:	6053      	str	r3, [r2, #4]
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_SET){
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	4619      	mov	r1, r3
 800463a:	4816      	ldr	r0, [pc, #88]	; (8004694 <_Z14updateLocationt+0xd0>)
 800463c:	f002 fd44 	bl	80070c8 <HAL_GPIO_ReadPin>
 8004640:	4603      	mov	r3, r0
 8004642:	2b01      	cmp	r3, #1
 8004644:	bf0c      	ite	eq
 8004646:	2301      	moveq	r3, #1
 8004648:	2300      	movne	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d019      	beq.n	8004684 <_Z14updateLocationt+0xc0>
	      DC_Motors[1].currentHeight = 0;
 8004650:	4b11      	ldr	r3, [pc, #68]	; (8004698 <_Z14updateLocationt+0xd4>)
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	625a      	str	r2, [r3, #36]	; 0x24
	      if(GO_BACK == true){
 8004658:	4b10      	ldr	r3, [pc, #64]	; (800469c <_Z14updateLocationt+0xd8>)
 800465a:	edd3 7a00 	vldr	s15, [r3]
 800465e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004662:	eef4 7a47 	vcmp.f32	s15, s14
 8004666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466a:	d10b      	bne.n	8004684 <_Z14updateLocationt+0xc0>
	      cascade_arrive_down[1] = true;
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <_Z14updateLocationt+0xdc>)
 800466e:	2201      	movs	r2, #1
 8004670:	705a      	strb	r2, [r3, #1]
	      sp[1] = 0;
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <_Z14updateLocationt+0xe0>)
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	605a      	str	r2, [r3, #4]
	      }
		  }
	  	  break;
 800467a:	e003      	b.n	8004684 <_Z14updateLocationt+0xc0>
	  default:
		  break;
 800467c:	bf00      	nop
 800467e:	e002      	b.n	8004686 <_Z14updateLocationt+0xc2>
		  break;
 8004680:	bf00      	nop
 8004682:	e000      	b.n	8004686 <_Z14updateLocationt+0xc2>
	  	  break;
 8004684:	bf00      	nop
	  }
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	200006dc 	.word	0x200006dc
 8004694:	40020800 	.word	0x40020800
 8004698:	200000f0 	.word	0x200000f0
 800469c:	20000048 	.word	0x20000048
 80046a0:	2000004c 	.word	0x2000004c
 80046a4:	200006cc 	.word	0x200006cc

080046a8 <_Z11DCmotor_runv>:
void DCmotor_run(){
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
	//get speed from encoder, and calculate height
	getState(&DC_Motors[0],1,1);//
 80046ac:	2201      	movs	r2, #1
 80046ae:	2101      	movs	r1, #1
 80046b0:	481c      	ldr	r0, [pc, #112]	; (8004724 <_Z11DCmotor_runv+0x7c>)
 80046b2:	f7ff fded 	bl	8004290 <_Z8getStateP8DC_motorii>
	getState(&DC_Motors[1],-1,-1);//
 80046b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046be:	481a      	ldr	r0, [pc, #104]	; (8004728 <_Z11DCmotor_runv+0x80>)
 80046c0:	f7ff fde6 	bl	8004290 <_Z8getStateP8DC_motorii>
	getState(&DC_Motors[2],1,1);//R_wheel
 80046c4:	2201      	movs	r2, #1
 80046c6:	2101      	movs	r1, #1
 80046c8:	4818      	ldr	r0, [pc, #96]	; (800472c <_Z11DCmotor_runv+0x84>)
 80046ca:	f7ff fde1 	bl	8004290 <_Z8getStateP8DC_motorii>
	getState(&DC_Motors[3],-1,-1);//L_wheel
 80046ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046d6:	4816      	ldr	r0, [pc, #88]	; (8004730 <_Z11DCmotor_runv+0x88>)
 80046d8:	f7ff fdda 	bl	8004290 <_Z8getStateP8DC_motorii>
	//set goal height of cascade
//	set_goalHeight(&DC_Motors[0],goalHeight[0],&sp[0],cascade_speed);
//	set_goalHeight(&DC_Motors[1],goalHeight[1],&sp[1],cascade_speed);
    // PI control DCmotor with velocity set point
	PI_control_run(&DC_Motors[0],sp[0]);
 80046dc:	4b15      	ldr	r3, [pc, #84]	; (8004734 <_Z11DCmotor_runv+0x8c>)
 80046de:	edd3 7a00 	vldr	s15, [r3]
 80046e2:	eeb0 0a67 	vmov.f32	s0, s15
 80046e6:	480f      	ldr	r0, [pc, #60]	; (8004724 <_Z11DCmotor_runv+0x7c>)
 80046e8:	f7ff fcd0 	bl	800408c <_Z14PI_control_runP8DC_motorf>
	PI_control_run(&DC_Motors[1],-sp[1]);
 80046ec:	4b11      	ldr	r3, [pc, #68]	; (8004734 <_Z11DCmotor_runv+0x8c>)
 80046ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80046f2:	eef1 7a67 	vneg.f32	s15, s15
 80046f6:	eeb0 0a67 	vmov.f32	s0, s15
 80046fa:	480b      	ldr	r0, [pc, #44]	; (8004728 <_Z11DCmotor_runv+0x80>)
 80046fc:	f7ff fcc6 	bl	800408c <_Z14PI_control_runP8DC_motorf>
	PI_control_run(&DC_Motors[2],sp[2]);//sp[2]
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <_Z11DCmotor_runv+0x8c>)
 8004702:	edd3 7a02 	vldr	s15, [r3, #8]
 8004706:	eeb0 0a67 	vmov.f32	s0, s15
 800470a:	4808      	ldr	r0, [pc, #32]	; (800472c <_Z11DCmotor_runv+0x84>)
 800470c:	f7ff fcbe 	bl	800408c <_Z14PI_control_runP8DC_motorf>
	PI_control_run(&DC_Motors[3],sp[3]);//sp[3]
 8004710:	4b08      	ldr	r3, [pc, #32]	; (8004734 <_Z11DCmotor_runv+0x8c>)
 8004712:	edd3 7a03 	vldr	s15, [r3, #12]
 8004716:	eeb0 0a67 	vmov.f32	s0, s15
 800471a:	4805      	ldr	r0, [pc, #20]	; (8004730 <_Z11DCmotor_runv+0x88>)
 800471c:	f7ff fcb6 	bl	800408c <_Z14PI_control_runP8DC_motorf>

	//motor_run++;
	}
 8004720:	bf00      	nop
 8004722:	bd80      	pop	{r7, pc}
 8004724:	200000f0 	.word	0x200000f0
 8004728:	20000108 	.word	0x20000108
 800472c:	20000120 	.word	0x20000120
 8004730:	20000138 	.word	0x20000138
 8004734:	200006cc 	.word	0x200006cc

08004738 <_Z9encoderspPf>:

//read encoder
void encodersp(float *encsp){
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

	encsp[1] = -1 * DC_Motors[3].speed;
 8004740:	4b09      	ldr	r3, [pc, #36]	; (8004768 <_Z9encoderspPf+0x30>)
 8004742:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3304      	adds	r3, #4
 800474a:	eef1 7a67 	vneg.f32	s15, s15
 800474e:	edc3 7a00 	vstr	s15, [r3]
	encsp[0] = DC_Motors[2].speed;
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <_Z9encoderspPf+0x30>)
 8004754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	601a      	str	r2, [r3, #0]
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	200000f0 	.word	0x200000f0

0800476c <_Z11speedOutputi>:

//adjust speed, 0 path, 1 integral, 2 stop
void speedOutput(int m){
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]

	speed_change(m);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7fd fec3 	bl	8002500 <_Z12speed_changei>
	location_data(m);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fc feb4 	bl	80014e8 <_Z13location_datai>
	weight();
 8004780:	f000 f8fa 	bl	8004978 <_Z6weightv>

	sp[2] = chassis_right_wheel_angspeed;//給正速度往前
 8004784:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <_Z11speedOutputi+0x38>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a07      	ldr	r2, [pc, #28]	; (80047a8 <_Z11speedOutputi+0x3c>)
 800478a:	6093      	str	r3, [r2, #8]
	sp[3] = -1 * chassis_left_wheel_angspeed;//給負速度往前
 800478c:	4b07      	ldr	r3, [pc, #28]	; (80047ac <_Z11speedOutputi+0x40>)
 800478e:	edd3 7a00 	vldr	s15, [r3]
 8004792:	eef1 7a67 	vneg.f32	s15, s15
 8004796:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <_Z11speedOutputi+0x3c>)
 8004798:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800479c:	bf00      	nop
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	2000024c 	.word	0x2000024c
 80047a8:	200006cc 	.word	0x200006cc
 80047ac:	20000250 	.word	0x20000250

080047b0 <_Z17reach_destinationv>:
bool reach_destination(){
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
	if (GO_BACK  == 1 && cascade_state == 0){
 80047b4:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <_Z17reach_destinationv+0x78>)
 80047b6:	edd3 7a00 	vldr	s15, [r3]
 80047ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047be:	eef4 7a47 	vcmp.f32	s15, s14
 80047c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c6:	d105      	bne.n	80047d4 <_Z17reach_destinationv+0x24>
 80047c8:	4b18      	ldr	r3, [pc, #96]	; (800482c <_Z17reach_destinationv+0x7c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <_Z17reach_destinationv+0x24>
		return 1;}
 80047d0:	2301      	movs	r3, #1
 80047d2:	e023      	b.n	800481c <_Z17reach_destinationv+0x6c>
	else if (GO_BACK  == 2 && cascade_state == 0){
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <_Z17reach_destinationv+0x78>)
 80047d6:	edd3 7a00 	vldr	s15, [r3]
 80047da:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80047de:	eef4 7a47 	vcmp.f32	s15, s14
 80047e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e6:	d10a      	bne.n	80047fe <_Z17reach_destinationv+0x4e>
 80047e8:	4b10      	ldr	r3, [pc, #64]	; (800482c <_Z17reach_destinationv+0x7c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <_Z17reach_destinationv+0x4e>
		k++;
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <_Z17reach_destinationv+0x80>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	4a0e      	ldr	r2, [pc, #56]	; (8004830 <_Z17reach_destinationv+0x80>)
 80047f8:	6013      	str	r3, [r2, #0]
		return 1;}
 80047fa:	2301      	movs	r3, #1
 80047fc:	e00e      	b.n	800481c <_Z17reach_destinationv+0x6c>
	else if (GO_BACK  == false && cascade_state == 2)
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <_Z17reach_destinationv+0x78>)
 8004800:	edd3 7a00 	vldr	s15, [r3]
 8004804:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480c:	d105      	bne.n	800481a <_Z17reach_destinationv+0x6a>
 800480e:	4b07      	ldr	r3, [pc, #28]	; (800482c <_Z17reach_destinationv+0x7c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d101      	bne.n	800481a <_Z17reach_destinationv+0x6a>
		return 1;
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <_Z17reach_destinationv+0x6c>
	else{
		return 0;
 800481a:	2300      	movs	r3, #0
	}
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20000048 	.word	0x20000048
 800482c:	200006e4 	.word	0x200006e4
 8004830:	200006e8 	.word	0x200006e8

08004834 <_Z19update_cascadeStatef>:
void update_cascadeState(float goback){//goback = true 時下降，false上升
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	ed87 0a01 	vstr	s0, [r7, #4]
	GO_BACK = goback;
 800483e:	4a08      	ldr	r2, [pc, #32]	; (8004860 <_Z19update_cascadeStatef+0x2c>)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6013      	str	r3, [r2, #0]
	while(!reach_destination()){
 8004844:	f7ff ffb4 	bl	80047b0 <_Z17reach_destinationv>
 8004848:	4603      	mov	r3, r0
 800484a:	f083 0301 	eor.w	r3, r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d000      	beq.n	8004856 <_Z19update_cascadeStatef+0x22>
 8004854:	e7f6      	b.n	8004844 <_Z19update_cascadeStatef+0x10>
	}
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000048 	.word	0x20000048

08004864 <_Z41__static_initialization_and_destruction_0ii>:
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d146      	bne.n	8004902 <_Z41__static_initialization_and_destruction_0ii+0x9e>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800487a:	4293      	cmp	r3, r2
 800487c:	d141      	bne.n	8004902 <_Z41__static_initialization_and_destruction_0ii+0x9e>
};
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a24      	ldr	r2, [pc, #144]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	4b24      	ldr	r3, [pc, #144]	; (8004918 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a22      	ldr	r2, [pc, #136]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800488c:	6053      	str	r3, [r2, #4]
 800488e:	4b23      	ldr	r3, [pc, #140]	; (800491c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a20      	ldr	r2, [pc, #128]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004894:	60d3      	str	r3, [r2, #12]
 8004896:	4b22      	ldr	r3, [pc, #136]	; (8004920 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1e      	ldr	r2, [pc, #120]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800489c:	6153      	str	r3, [r2, #20]
 800489e:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80048a4:	6293      	str	r3, [r2, #40]	; 0x28
 80048a6:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80048ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048ae:	4b1b      	ldr	r3, [pc, #108]	; (800491c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a18      	ldr	r2, [pc, #96]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80048b4:	6353      	str	r3, [r2, #52]	; 0x34
 80048b6:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a16      	ldr	r2, [pc, #88]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80048bc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80048be:	4b19      	ldr	r3, [pc, #100]	; (8004924 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a14      	ldr	r2, [pc, #80]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80048c4:	6513      	str	r3, [r2, #80]	; 0x50
 80048c6:	4b18      	ldr	r3, [pc, #96]	; (8004928 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a12      	ldr	r2, [pc, #72]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80048cc:	6553      	str	r3, [r2, #84]	; 0x54
 80048ce:	4b13      	ldr	r3, [pc, #76]	; (800491c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a10      	ldr	r2, [pc, #64]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80048d4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80048d6:	4b12      	ldr	r3, [pc, #72]	; (8004920 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a0e      	ldr	r2, [pc, #56]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80048dc:	6653      	str	r3, [r2, #100]	; 0x64
 80048de:	4b11      	ldr	r3, [pc, #68]	; (8004924 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a0c      	ldr	r2, [pc, #48]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80048e4:	6793      	str	r3, [r2, #120]	; 0x78
 80048e6:	4b10      	ldr	r3, [pc, #64]	; (8004928 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80048ec:	67d3      	str	r3, [r2, #124]	; 0x7c
 80048ee:	4b0b      	ldr	r3, [pc, #44]	; (800491c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a08      	ldr	r2, [pc, #32]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80048f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a05      	ldr	r2, [pc, #20]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80048fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000034 	.word	0x20000034
 8004914:	20000050 	.word	0x20000050
 8004918:	20000030 	.word	0x20000030
 800491c:	20000040 	.word	0x20000040
 8004920:	2000003c 	.word	0x2000003c
 8004924:	2000002c 	.word	0x2000002c
 8004928:	20000028 	.word	0x20000028

0800492c <_GLOBAL__sub_I_enc_a>:
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
 8004930:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004934:	2001      	movs	r0, #1
 8004936:	f7ff ff95 	bl	8004864 <_Z41__static_initialization_and_destruction_0ii>
 800493a:	bd80      	pop	{r7, pc}

0800493c <_Z10path_setupv>:
adcRead[3]  adc1-1   PA1    V
adcRead[4]  adc1-0   PA0  left
adcRead[5]  adc1-8   PB0  middle right
adcRead[6]  adc1-9   PB1  middle left
*/
void path_setup(){
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
	if(HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adcRead,7) != HAL_OK)
 8004940:	2207      	movs	r2, #7
 8004942:	4909      	ldr	r1, [pc, #36]	; (8004968 <_Z10path_setupv+0x2c>)
 8004944:	4809      	ldr	r0, [pc, #36]	; (800496c <_Z10path_setupv+0x30>)
 8004946:	f001 f939 	bl	8005bbc <HAL_ADC_Start_DMA>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf14      	ite	ne
 8004950:	2301      	movne	r3, #1
 8004952:	2300      	moveq	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d004      	beq.n	8004964 <_Z10path_setupv+0x28>
		check++;
 800495a:	4b05      	ldr	r3, [pc, #20]	; (8004970 <_Z10path_setupv+0x34>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	4a03      	ldr	r2, [pc, #12]	; (8004970 <_Z10path_setupv+0x34>)
 8004962:	6013      	str	r3, [r2, #0]
}
 8004964:	bf00      	nop
 8004966:	bd80      	pop	{r7, pc}
 8004968:	200006ec 	.word	0x200006ec
 800496c:	200002d0 	.word	0x200002d0
 8004970:	200006fc 	.word	0x200006fc
 8004974:	00000000 	.word	0x00000000

08004978 <_Z6weightv>:
void weight(){
 8004978:	b5b0      	push	{r4, r5, r7, lr}
 800497a:	af00      	add	r7, sp, #0

	//P's err
	weight_err = (float)(-3*adcRead[0]-adcRead[1]+adcRead[3]+3*adcRead[4])/
 800497c:	4b52      	ldr	r3, [pc, #328]	; (8004ac8 <_Z6weightv+0x150>)
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	4a50      	ldr	r2, [pc, #320]	; (8004ac8 <_Z6weightv+0x150>)
 8004988:	8852      	ldrh	r2, [r2, #2]
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	4a4e      	ldr	r2, [pc, #312]	; (8004ac8 <_Z6weightv+0x150>)
 800498e:	88d2      	ldrh	r2, [r2, #6]
 8004990:	441a      	add	r2, r3
 8004992:	4b4d      	ldr	r3, [pc, #308]	; (8004ac8 <_Z6weightv+0x150>)
 8004994:	891b      	ldrh	r3, [r3, #8]
 8004996:	4619      	mov	r1, r3
 8004998:	460b      	mov	r3, r1
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	440b      	add	r3, r1
 800499e:	4413      	add	r3, r2
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
						(adcRead[0]+adcRead[1]+adcRead[2]+adcRead[3]+adcRead[4]);
 80049a8:	4b47      	ldr	r3, [pc, #284]	; (8004ac8 <_Z6weightv+0x150>)
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	4b46      	ldr	r3, [pc, #280]	; (8004ac8 <_Z6weightv+0x150>)
 80049b0:	885b      	ldrh	r3, [r3, #2]
 80049b2:	4413      	add	r3, r2
 80049b4:	4a44      	ldr	r2, [pc, #272]	; (8004ac8 <_Z6weightv+0x150>)
 80049b6:	8892      	ldrh	r2, [r2, #4]
 80049b8:	4413      	add	r3, r2
 80049ba:	4a43      	ldr	r2, [pc, #268]	; (8004ac8 <_Z6weightv+0x150>)
 80049bc:	88d2      	ldrh	r2, [r2, #6]
 80049be:	4413      	add	r3, r2
 80049c0:	4a41      	ldr	r2, [pc, #260]	; (8004ac8 <_Z6weightv+0x150>)
 80049c2:	8912      	ldrh	r2, [r2, #8]
 80049c4:	4413      	add	r3, r2
	weight_err = (float)(-3*adcRead[0]-adcRead[1]+adcRead[3]+3*adcRead[4])/
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d2:	4b3e      	ldr	r3, [pc, #248]	; (8004acc <_Z6weightv+0x154>)
 80049d4:	edc3 7a00 	vstr	s15, [r3]

	//D's err
	weight_change = weight_err - weight_lasttime;
 80049d8:	4b3c      	ldr	r3, [pc, #240]	; (8004acc <_Z6weightv+0x154>)
 80049da:	ed93 7a00 	vldr	s14, [r3]
 80049de:	4b3c      	ldr	r3, [pc, #240]	; (8004ad0 <_Z6weightv+0x158>)
 80049e0:	edd3 7a00 	vldr	s15, [r3]
 80049e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049e8:	4b3a      	ldr	r3, [pc, #232]	; (8004ad4 <_Z6weightv+0x15c>)
 80049ea:	edc3 7a00 	vstr	s15, [r3]

	weight_lasttime = weight_err;
 80049ee:	4b37      	ldr	r3, [pc, #220]	; (8004acc <_Z6weightv+0x154>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a37      	ldr	r2, [pc, #220]	; (8004ad0 <_Z6weightv+0x158>)
 80049f4:	6013      	str	r3, [r2, #0]

	//right
	tempSpeed[0] = normal_Speed + weight_err * w_kp + weight_change * w_kd;
 80049f6:	4b35      	ldr	r3, [pc, #212]	; (8004acc <_Z6weightv+0x154>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fb fd68 	bl	80004d0 <__aeabi_f2d>
 8004a00:	a32f      	add	r3, pc, #188	; (adr r3, 8004ac0 <_Z6weightv+0x148>)
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f7fb fdbb 	bl	8000580 <__aeabi_dmul>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <_Z6weightv+0x160>)
 8004a18:	f7fb fbfc 	bl	8000214 <__adddf3>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4614      	mov	r4, r2
 8004a22:	461d      	mov	r5, r3
 8004a24:	4b2b      	ldr	r3, [pc, #172]	; (8004ad4 <_Z6weightv+0x15c>)
 8004a26:	edd3 7a00 	vldr	s15, [r3]
 8004a2a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004adc <_Z6weightv+0x164>
 8004a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a32:	ee17 0a90 	vmov	r0, s15
 8004a36:	f7fb fd4b 	bl	80004d0 <__aeabi_f2d>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4629      	mov	r1, r5
 8004a42:	f7fb fbe7 	bl	8000214 <__adddf3>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f7fc f847 	bl	8000ae0 <__aeabi_d2f>
 8004a52:	4603      	mov	r3, r0
 8004a54:	4a22      	ldr	r2, [pc, #136]	; (8004ae0 <_Z6weightv+0x168>)
 8004a56:	6013      	str	r3, [r2, #0]
	//left
	tempSpeed[1] = normal_Speed - weight_err * w_kp - weight_change * w_kd;
 8004a58:	4b1c      	ldr	r3, [pc, #112]	; (8004acc <_Z6weightv+0x154>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fb fd37 	bl	80004d0 <__aeabi_f2d>
 8004a62:	a317      	add	r3, pc, #92	; (adr r3, 8004ac0 <_Z6weightv+0x148>)
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f7fb fd8a 	bl	8000580 <__aeabi_dmul>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	f04f 0000 	mov.w	r0, #0
 8004a74:	4918      	ldr	r1, [pc, #96]	; (8004ad8 <_Z6weightv+0x160>)
 8004a76:	f7fb fbcb 	bl	8000210 <__aeabi_dsub>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4614      	mov	r4, r2
 8004a80:	461d      	mov	r5, r3
 8004a82:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <_Z6weightv+0x15c>)
 8004a84:	edd3 7a00 	vldr	s15, [r3]
 8004a88:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004adc <_Z6weightv+0x164>
 8004a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a90:	ee17 0a90 	vmov	r0, s15
 8004a94:	f7fb fd1c 	bl	80004d0 <__aeabi_f2d>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	f7fb fbb6 	bl	8000210 <__aeabi_dsub>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4619      	mov	r1, r3
 8004aac:	f7fc f818 	bl	8000ae0 <__aeabi_d2f>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <_Z6weightv+0x168>)
 8004ab4:	6053      	str	r3, [r2, #4]
}
 8004ab6:	bf00      	nop
 8004ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8004aba:	bf00      	nop
 8004abc:	f3af 8000 	nop.w
 8004ac0:	ae147ae1 	.word	0xae147ae1
 8004ac4:	3fcae147 	.word	0x3fcae147
 8004ac8:	200006ec 	.word	0x200006ec
 8004acc:	20000700 	.word	0x20000700
 8004ad0:	20000704 	.word	0x20000704
 8004ad4:	20000708 	.word	0x20000708
 8004ad8:	3ff80000 	.word	0x3ff80000
 8004adc:	00000000 	.word	0x00000000
 8004ae0:	2000070c 	.word	0x2000070c
 8004ae4:	00000000 	.word	0x00000000

08004ae8 <_Z4pathb>:
//motor_speed[0]:right motor speed, motor_speed[1]:left motor speed
void path(bool m){
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	71fb      	strb	r3, [r7, #7]

	if(m){
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80db 	beq.w	8004cb0 <_Z4pathb+0x1c8>
		//turn right
		if(adcRead[5] >= boundry && adcRead[6] < boundry && adcRead[0] < boundry && adcRead[1] < boundry
 8004afa:	4ba1      	ldr	r3, [pc, #644]	; (8004d80 <_Z4pathb+0x298>)
 8004afc:	895b      	ldrh	r3, [r3, #10]
 8004afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b02:	d337      	bcc.n	8004b74 <_Z4pathb+0x8c>
 8004b04:	4b9e      	ldr	r3, [pc, #632]	; (8004d80 <_Z4pathb+0x298>)
 8004b06:	899b      	ldrh	r3, [r3, #12]
 8004b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b0c:	d232      	bcs.n	8004b74 <_Z4pathb+0x8c>
 8004b0e:	4b9c      	ldr	r3, [pc, #624]	; (8004d80 <_Z4pathb+0x298>)
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b16:	d22d      	bcs.n	8004b74 <_Z4pathb+0x8c>
 8004b18:	4b99      	ldr	r3, [pc, #612]	; (8004d80 <_Z4pathb+0x298>)
 8004b1a:	885b      	ldrh	r3, [r3, #2]
 8004b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b20:	d228      	bcs.n	8004b74 <_Z4pathb+0x8c>
				&& adcRead[2] < boundry && adcRead[3] < boundry && adcRead[4] < boundry){
 8004b22:	4b97      	ldr	r3, [pc, #604]	; (8004d80 <_Z4pathb+0x298>)
 8004b24:	889b      	ldrh	r3, [r3, #4]
 8004b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b2a:	d223      	bcs.n	8004b74 <_Z4pathb+0x8c>
 8004b2c:	4b94      	ldr	r3, [pc, #592]	; (8004d80 <_Z4pathb+0x298>)
 8004b2e:	88db      	ldrh	r3, [r3, #6]
 8004b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b34:	d21e      	bcs.n	8004b74 <_Z4pathb+0x8c>
 8004b36:	4b92      	ldr	r3, [pc, #584]	; (8004d80 <_Z4pathb+0x298>)
 8004b38:	891b      	ldrh	r3, [r3, #8]
 8004b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b3e:	d219      	bcs.n	8004b74 <_Z4pathb+0x8c>

			path_motor_speed[0] = spin_sp * -1;
 8004b40:	4b90      	ldr	r3, [pc, #576]	; (8004d84 <_Z4pathb+0x29c>)
 8004b42:	4a91      	ldr	r2, [pc, #580]	; (8004d88 <_Z4pathb+0x2a0>)
 8004b44:	601a      	str	r2, [r3, #0]
			path_motor_speed[1] = spin_sp;
 8004b46:	4b8f      	ldr	r3, [pc, #572]	; (8004d84 <_Z4pathb+0x29c>)
 8004b48:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004b4c:	605a      	str	r2, [r3, #4]

			while(adcRead[2] < 3 * boundry){}
 8004b4e:	4b8c      	ldr	r3, [pc, #560]	; (8004d80 <_Z4pathb+0x298>)
 8004b50:	889b      	ldrh	r3, [r3, #4]
 8004b52:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d800      	bhi.n	8004b5c <_Z4pathb+0x74>
 8004b5a:	e7f8      	b.n	8004b4e <_Z4pathb+0x66>

			ach(1);
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f7fd fcbd 	bl	80024dc <_Z3achb>

			path_motor_speed[0] = 0;
 8004b62:	4b88      	ldr	r3, [pc, #544]	; (8004d84 <_Z4pathb+0x29c>)
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
			path_motor_speed[1] = 0;
 8004b6a:	4b86      	ldr	r3, [pc, #536]	; (8004d84 <_Z4pathb+0x29c>)
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	605a      	str	r2, [r3, #4]
 8004b72:	e0fd      	b.n	8004d70 <_Z4pathb+0x288>
		}
		//turn left
		else if(adcRead[5] < boundry && adcRead[6] >= 2 * boundry && adcRead[0] < boundry && adcRead[1] < boundry
 8004b74:	4b82      	ldr	r3, [pc, #520]	; (8004d80 <_Z4pathb+0x298>)
 8004b76:	895b      	ldrh	r3, [r3, #10]
 8004b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b7c:	d237      	bcs.n	8004bee <_Z4pathb+0x106>
 8004b7e:	4b80      	ldr	r3, [pc, #512]	; (8004d80 <_Z4pathb+0x298>)
 8004b80:	899b      	ldrh	r3, [r3, #12]
 8004b82:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b86:	d332      	bcc.n	8004bee <_Z4pathb+0x106>
 8004b88:	4b7d      	ldr	r3, [pc, #500]	; (8004d80 <_Z4pathb+0x298>)
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b90:	d22d      	bcs.n	8004bee <_Z4pathb+0x106>
 8004b92:	4b7b      	ldr	r3, [pc, #492]	; (8004d80 <_Z4pathb+0x298>)
 8004b94:	885b      	ldrh	r3, [r3, #2]
 8004b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b9a:	d228      	bcs.n	8004bee <_Z4pathb+0x106>
				&& adcRead[2] < boundry && adcRead[3] < boundry && adcRead[4] < boundry){
 8004b9c:	4b78      	ldr	r3, [pc, #480]	; (8004d80 <_Z4pathb+0x298>)
 8004b9e:	889b      	ldrh	r3, [r3, #4]
 8004ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ba4:	d223      	bcs.n	8004bee <_Z4pathb+0x106>
 8004ba6:	4b76      	ldr	r3, [pc, #472]	; (8004d80 <_Z4pathb+0x298>)
 8004ba8:	88db      	ldrh	r3, [r3, #6]
 8004baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bae:	d21e      	bcs.n	8004bee <_Z4pathb+0x106>
 8004bb0:	4b73      	ldr	r3, [pc, #460]	; (8004d80 <_Z4pathb+0x298>)
 8004bb2:	891b      	ldrh	r3, [r3, #8]
 8004bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bb8:	d219      	bcs.n	8004bee <_Z4pathb+0x106>

			path_motor_speed[0] = spin_sp;
 8004bba:	4b72      	ldr	r3, [pc, #456]	; (8004d84 <_Z4pathb+0x29c>)
 8004bbc:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004bc0:	601a      	str	r2, [r3, #0]
			path_motor_speed[1] = spin_sp * -1;
 8004bc2:	4b70      	ldr	r3, [pc, #448]	; (8004d84 <_Z4pathb+0x29c>)
 8004bc4:	4a70      	ldr	r2, [pc, #448]	; (8004d88 <_Z4pathb+0x2a0>)
 8004bc6:	605a      	str	r2, [r3, #4]

			while(adcRead[2] < 3 * boundry){}
 8004bc8:	4b6d      	ldr	r3, [pc, #436]	; (8004d80 <_Z4pathb+0x298>)
 8004bca:	889b      	ldrh	r3, [r3, #4]
 8004bcc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d800      	bhi.n	8004bd6 <_Z4pathb+0xee>
 8004bd4:	e7f8      	b.n	8004bc8 <_Z4pathb+0xe0>

			ach(1);
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	f7fd fc80 	bl	80024dc <_Z3achb>

			path_motor_speed[0] = 0;
 8004bdc:	4b69      	ldr	r3, [pc, #420]	; (8004d84 <_Z4pathb+0x29c>)
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
			path_motor_speed[1] = 0;
 8004be4:	4b67      	ldr	r3, [pc, #412]	; (8004d84 <_Z4pathb+0x29c>)
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	605a      	str	r2, [r3, #4]
 8004bec:	e0c0      	b.n	8004d70 <_Z4pathb+0x288>
		}
		//forward
		else{
			for(int j = 0; j < 2; j++){
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	f300 80bb 	bgt.w	8004d70 <_Z4pathb+0x288>
				for(float i = 2; i >= 0; i -= 0.01){
 8004bfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0c:	db4c      	blt.n	8004ca8 <_Z4pathb+0x1c0>

					if(tempSpeed[j] >= i){
 8004c0e:	4a5f      	ldr	r2, [pc, #380]	; (8004d8c <_Z4pathb+0x2a4>)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	edd3 7a00 	vldr	s15, [r3]
 8004c1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c26:	d806      	bhi.n	8004c36 <_Z4pathb+0x14e>
						path_motor_speed[j] = i;
 8004c28:	4a56      	ldr	r2, [pc, #344]	; (8004d84 <_Z4pathb+0x29c>)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	601a      	str	r2, [r3, #0]
						break;
 8004c34:	e038      	b.n	8004ca8 <_Z4pathb+0x1c0>
					}
					else if(tempSpeed[j] > 2){
 8004c36:	4a55      	ldr	r2, [pc, #340]	; (8004d8c <_Z4pathb+0x2a4>)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	edd3 7a00 	vldr	s15, [r3]
 8004c42:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4e:	dd07      	ble.n	8004c60 <_Z4pathb+0x178>
						path_motor_speed[j] = 2;
 8004c50:	4a4c      	ldr	r2, [pc, #304]	; (8004d84 <_Z4pathb+0x29c>)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c5c:	601a      	str	r2, [r3, #0]
						break;
 8004c5e:	e023      	b.n	8004ca8 <_Z4pathb+0x1c0>
					}
					else if(tempSpeed[j] < 0){
 8004c60:	4a4a      	ldr	r2, [pc, #296]	; (8004d8c <_Z4pathb+0x2a4>)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	edd3 7a00 	vldr	s15, [r3]
 8004c6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c74:	d507      	bpl.n	8004c86 <_Z4pathb+0x19e>
						path_motor_speed[j] = 0;
 8004c76:	4a43      	ldr	r2, [pc, #268]	; (8004d84 <_Z4pathb+0x29c>)
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
						break;
 8004c84:	e010      	b.n	8004ca8 <_Z4pathb+0x1c0>
				for(float i = 2; i >= 0; i -= 0.01){
 8004c86:	6938      	ldr	r0, [r7, #16]
 8004c88:	f7fb fc22 	bl	80004d0 <__aeabi_f2d>
 8004c8c:	a33a      	add	r3, pc, #232	; (adr r3, 8004d78 <_Z4pathb+0x290>)
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f7fb fabd 	bl	8000210 <__aeabi_dsub>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f7fb ff1f 	bl	8000ae0 <__aeabi_d2f>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	e7ab      	b.n	8004c00 <_Z4pathb+0x118>
			for(int j = 0; j < 2; j++){
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	3301      	adds	r3, #1
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	e7a0      	b.n	8004bf2 <_Z4pathb+0x10a>
			}
		}
	}
	else{
		//forward
		for(int j = 0; j < 2; j++){
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	dc5a      	bgt.n	8004d70 <_Z4pathb+0x288>
			for(float i = 2; i >= 0; i -= 0.01){
 8004cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ccc:	db4c      	blt.n	8004d68 <_Z4pathb+0x280>

				if(tempSpeed[j] >= i){
 8004cce:	4a2f      	ldr	r2, [pc, #188]	; (8004d8c <_Z4pathb+0x2a4>)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	edd3 7a00 	vldr	s15, [r3]
 8004cda:	ed97 7a02 	vldr	s14, [r7, #8]
 8004cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce6:	d806      	bhi.n	8004cf6 <_Z4pathb+0x20e>
					path_motor_speed[j] = i;
 8004ce8:	4a26      	ldr	r2, [pc, #152]	; (8004d84 <_Z4pathb+0x29c>)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	601a      	str	r2, [r3, #0]
					break;
 8004cf4:	e038      	b.n	8004d68 <_Z4pathb+0x280>
				}
				else if(tempSpeed[j] > 2){
 8004cf6:	4a25      	ldr	r2, [pc, #148]	; (8004d8c <_Z4pathb+0x2a4>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	edd3 7a00 	vldr	s15, [r3]
 8004d02:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0e:	dd07      	ble.n	8004d20 <_Z4pathb+0x238>
					path_motor_speed[j] = 2;
 8004d10:	4a1c      	ldr	r2, [pc, #112]	; (8004d84 <_Z4pathb+0x29c>)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d1c:	601a      	str	r2, [r3, #0]
					break;
 8004d1e:	e023      	b.n	8004d68 <_Z4pathb+0x280>
				}
				else if(tempSpeed[j] < 0){
 8004d20:	4a1a      	ldr	r2, [pc, #104]	; (8004d8c <_Z4pathb+0x2a4>)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	edd3 7a00 	vldr	s15, [r3]
 8004d2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d34:	d507      	bpl.n	8004d46 <_Z4pathb+0x25e>
					path_motor_speed[j] = 0;
 8004d36:	4a13      	ldr	r2, [pc, #76]	; (8004d84 <_Z4pathb+0x29c>)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
					break;
 8004d44:	e010      	b.n	8004d68 <_Z4pathb+0x280>
			for(float i = 2; i >= 0; i -= 0.01){
 8004d46:	68b8      	ldr	r0, [r7, #8]
 8004d48:	f7fb fbc2 	bl	80004d0 <__aeabi_f2d>
 8004d4c:	a30a      	add	r3, pc, #40	; (adr r3, 8004d78 <_Z4pathb+0x290>)
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f7fb fa5d 	bl	8000210 <__aeabi_dsub>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	f7fb febf 	bl	8000ae0 <__aeabi_d2f>
 8004d62:	4603      	mov	r3, r0
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	e7ab      	b.n	8004cc0 <_Z4pathb+0x1d8>
		for(int j = 0; j < 2; j++){
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e7a1      	b.n	8004cb4 <_Z4pathb+0x1cc>
				}
			}
		}
	}
}
 8004d70:	bf00      	nop
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	47ae147b 	.word	0x47ae147b
 8004d7c:	3f847ae1 	.word	0x3f847ae1
 8004d80:	200006ec 	.word	0x200006ec
 8004d84:	20000714 	.word	0x20000714
 8004d88:	bfc00000 	.word	0xbfc00000
 8004d8c:	2000070c 	.word	0x2000070c

08004d90 <_Z11path_movetof>:

//go to (x,y)
void path_moveto(float path_d){
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	ed87 0a01 	vstr	s0, [r7, #4]

	location_reset(0, 0, 90);
 8004d9a:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8004dd4 <_Z11path_movetof+0x44>
 8004d9e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8004dd8 <_Z11path_movetof+0x48>
 8004da2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004dd8 <_Z11path_movetof+0x48>
 8004da6:	f7fc fadb 	bl	8001360 <_Z14location_resetfff>

	location_data(0);
 8004daa:	2000      	movs	r0, #0
 8004dac:	f7fc fb9c 	bl	80014e8 <_Z13location_datai>

	path_dis = path_d;
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <_Z11path_movetof+0x4c>)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6013      	str	r3, [r2, #0]

	ach(0);
 8004db6:	2000      	movs	r0, #0
 8004db8:	f7fd fb90 	bl	80024dc <_Z3achb>

	while(!arrive)
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <_Z11path_movetof+0x50>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d103      	bne.n	8004dcc <_Z11path_movetof+0x3c>
		path(1);
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	f7ff fe8f 	bl	8004ae8 <_Z4pathb>
	while(!arrive)
 8004dca:	e7f7      	b.n	8004dbc <_Z11path_movetof+0x2c>
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	42b40000 	.word	0x42b40000
 8004dd8:	00000000 	.word	0x00000000
 8004ddc:	2000071c 	.word	0x2000071c
 8004de0:	200002cd 	.word	0x200002cd

08004de4 <_Z10line_checki>:
bool line_check(int type){
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]

	int b = 3000;
 8004dec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004df0:	617b      	str	r3, [r7, #20]
	int r_max = 2500, r_min = 500;
 8004df2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004dfc:	60fb      	str	r3, [r7, #12]

	switch(type){
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	2b07      	cmp	r3, #7
 8004e04:	f200 80a6 	bhi.w	8004f54 <_Z10line_checki+0x170>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <_Z10line_checki+0x2c>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e31 	.word	0x08004e31
 8004e14:	08004e51 	.word	0x08004e51
 8004e18:	08004e71 	.word	0x08004e71
 8004e1c:	08004e9d 	.word	0x08004e9d
 8004e20:	08004ee1 	.word	0x08004ee1
 8004e24:	08004ef5 	.word	0x08004ef5
 8004e28:	08004f09 	.word	0x08004f09
 8004e2c:	08004f1d 	.word	0x08004f1d

	//front line
	case 1:

		if(adcRead[0] >= b && adcRead[4] >= b)
 8004e30:	4b4b      	ldr	r3, [pc, #300]	; (8004f60 <_Z10line_checki+0x17c>)
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	dc07      	bgt.n	8004e4c <_Z10line_checki+0x68>
 8004e3c:	4b48      	ldr	r3, [pc, #288]	; (8004f60 <_Z10line_checki+0x17c>)
 8004e3e:	891b      	ldrh	r3, [r3, #8]
 8004e40:	461a      	mov	r2, r3
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4293      	cmp	r3, r2
 8004e46:	dc01      	bgt.n	8004e4c <_Z10line_checki+0x68>
			return 1;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e083      	b.n	8004f54 <_Z10line_checki+0x170>
		else
			return 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e081      	b.n	8004f54 <_Z10line_checki+0x170>
		break;
	//middle line
	case 2:

		if(adcRead[5] >= b && adcRead[6] >= b)
 8004e50:	4b43      	ldr	r3, [pc, #268]	; (8004f60 <_Z10line_checki+0x17c>)
 8004e52:	895b      	ldrh	r3, [r3, #10]
 8004e54:	461a      	mov	r2, r3
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	dc07      	bgt.n	8004e6c <_Z10line_checki+0x88>
 8004e5c:	4b40      	ldr	r3, [pc, #256]	; (8004f60 <_Z10line_checki+0x17c>)
 8004e5e:	899b      	ldrh	r3, [r3, #12]
 8004e60:	461a      	mov	r2, r3
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	dc01      	bgt.n	8004e6c <_Z10line_checki+0x88>
			return 1;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e073      	b.n	8004f54 <_Z10line_checki+0x170>
		else
			return 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e071      	b.n	8004f54 <_Z10line_checki+0x170>
		break;
	//cross road
	case 3:

		if(adcRead[2] >= b && adcRead[5] >= b && adcRead[6] >= b)
 8004e70:	4b3b      	ldr	r3, [pc, #236]	; (8004f60 <_Z10line_checki+0x17c>)
 8004e72:	889b      	ldrh	r3, [r3, #4]
 8004e74:	461a      	mov	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	dc0d      	bgt.n	8004e98 <_Z10line_checki+0xb4>
 8004e7c:	4b38      	ldr	r3, [pc, #224]	; (8004f60 <_Z10line_checki+0x17c>)
 8004e7e:	895b      	ldrh	r3, [r3, #10]
 8004e80:	461a      	mov	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	4293      	cmp	r3, r2
 8004e86:	dc07      	bgt.n	8004e98 <_Z10line_checki+0xb4>
 8004e88:	4b35      	ldr	r3, [pc, #212]	; (8004f60 <_Z10line_checki+0x17c>)
 8004e8a:	899b      	ldrh	r3, [r3, #12]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	4293      	cmp	r3, r2
 8004e92:	dc01      	bgt.n	8004e98 <_Z10line_checki+0xb4>
			return 1;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e05d      	b.n	8004f54 <_Z10line_checki+0x170>
		else
			return 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e05b      	b.n	8004f54 <_Z10line_checki+0x170>
		break;
	//front find line
	case 4:

		if(adcRead[0] >= b || adcRead[1] >= b || adcRead[2] >= b || adcRead[3] >= b || adcRead[4] >= b)
 8004e9c:	4b30      	ldr	r3, [pc, #192]	; (8004f60 <_Z10line_checki+0x17c>)
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	dd17      	ble.n	8004ed8 <_Z10line_checki+0xf4>
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <_Z10line_checki+0x17c>)
 8004eaa:	885b      	ldrh	r3, [r3, #2]
 8004eac:	461a      	mov	r2, r3
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	dd11      	ble.n	8004ed8 <_Z10line_checki+0xf4>
 8004eb4:	4b2a      	ldr	r3, [pc, #168]	; (8004f60 <_Z10line_checki+0x17c>)
 8004eb6:	889b      	ldrh	r3, [r3, #4]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	dd0b      	ble.n	8004ed8 <_Z10line_checki+0xf4>
 8004ec0:	4b27      	ldr	r3, [pc, #156]	; (8004f60 <_Z10line_checki+0x17c>)
 8004ec2:	88db      	ldrh	r3, [r3, #6]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	dd05      	ble.n	8004ed8 <_Z10line_checki+0xf4>
 8004ecc:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <_Z10line_checki+0x17c>)
 8004ece:	891b      	ldrh	r3, [r3, #8]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	dc01      	bgt.n	8004edc <_Z10line_checki+0xf8>
			return 1;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e03b      	b.n	8004f54 <_Z10line_checki+0x170>
		else
			return 0;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e039      	b.n	8004f54 <_Z10line_checki+0x170>
		break;

	//right find line
	case 5:

		if(adcRead[5] >= b)
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <_Z10line_checki+0x17c>)
 8004ee2:	895b      	ldrh	r3, [r3, #10]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	dc01      	bgt.n	8004ef0 <_Z10line_checki+0x10c>
			return 1;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e031      	b.n	8004f54 <_Z10line_checki+0x170>
		else
			return 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e02f      	b.n	8004f54 <_Z10line_checki+0x170>
		break;
	//left find line
	case 6:

		if(adcRead[6] >= b)
 8004ef4:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <_Z10line_checki+0x17c>)
 8004ef6:	899b      	ldrh	r3, [r3, #12]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	4293      	cmp	r3, r2
 8004efe:	dc01      	bgt.n	8004f04 <_Z10line_checki+0x120>
			return 1;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e027      	b.n	8004f54 <_Z10line_checki+0x170>
		else
			return 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	e025      	b.n	8004f54 <_Z10line_checki+0x170>
		break;
	//spin find line(f)
	case 7:
		if(adcRead[2] >= b)
 8004f08:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <_Z10line_checki+0x17c>)
 8004f0a:	889b      	ldrh	r3, [r3, #4]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	dc01      	bgt.n	8004f18 <_Z10line_checki+0x134>
			return 1;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e01d      	b.n	8004f54 <_Z10line_checki+0x170>
		else
			return 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e01b      	b.n	8004f54 <_Z10line_checki+0x170>
		break;
	//middle find red
	case 8:
		if(adcRead[5] >= r_min && adcRead[5] <= r_min && adcRead[6] >= r_min && adcRead[6] <= r_min)
 8004f1c:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <_Z10line_checki+0x17c>)
 8004f1e:	895b      	ldrh	r3, [r3, #10]
 8004f20:	461a      	mov	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4293      	cmp	r3, r2
 8004f26:	dc13      	bgt.n	8004f50 <_Z10line_checki+0x16c>
 8004f28:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <_Z10line_checki+0x17c>)
 8004f2a:	895b      	ldrh	r3, [r3, #10]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4293      	cmp	r3, r2
 8004f32:	db0d      	blt.n	8004f50 <_Z10line_checki+0x16c>
 8004f34:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <_Z10line_checki+0x17c>)
 8004f36:	899b      	ldrh	r3, [r3, #12]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	dc07      	bgt.n	8004f50 <_Z10line_checki+0x16c>
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <_Z10line_checki+0x17c>)
 8004f42:	899b      	ldrh	r3, [r3, #12]
 8004f44:	461a      	mov	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	db01      	blt.n	8004f50 <_Z10line_checki+0x16c>
			return 1;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e001      	b.n	8004f54 <_Z10line_checki+0x170>
		else
			return 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	e7ff      	b.n	8004f54 <_Z10line_checki+0x170>
		break;
	}
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	200006ec 	.word	0x200006ec

08004f64 <_Z11servo_setupv>:
//F front, B back, R right, M middle, L left
servo servoFL = {0, 0, 0, 1000, true, false, &htim12, TIM_CHANNEL_2};
servo servoBL = {0, 0, 0, 1000, true, false, &htim12, TIM_CHANNEL_1};

//servo servo[0]{0,0,0,2000,true, &htim3, TIM_CHANNEL_1 };
void servo_setup(){
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(servoFL.htim, servoFL.TIM_CHANNEL);
 8004f68:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <_Z11servo_setupv+0x28>)
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	4a07      	ldr	r2, [pc, #28]	; (8004f8c <_Z11servo_setupv+0x28>)
 8004f6e:	6992      	ldr	r2, [r2, #24]
 8004f70:	4611      	mov	r1, r2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f003 f818 	bl	8007fa8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(servoBL.htim, servoBL.TIM_CHANNEL);
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <_Z11servo_setupv+0x2c>)
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	4a04      	ldr	r2, [pc, #16]	; (8004f90 <_Z11servo_setupv+0x2c>)
 8004f7e:	6992      	ldr	r2, [r2, #24]
 8004f80:	4611      	mov	r1, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f003 f810 	bl	8007fa8 <HAL_TIM_PWM_Start>
}
 8004f88:	bf00      	nop
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	2000015c 	.word	0x2000015c
 8004f90:	20000178 	.word	0x20000178

08004f94 <_Z10servo_moveP5servofi>:
void servo_move(servo*servo,float goalAngle,int responseTime){
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004fa0:	6079      	str	r1, [r7, #4]
	servo -> goalAngle = goalAngle;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	605a      	str	r2, [r3, #4]
	servo -> responseTime = responseTime;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	60da      	str	r2, [r3, #12]
	servo -> move = true;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	741a      	strb	r2, [r3, #16]
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <_Z9servo_runP5servoi>:
void servo_run(servo*servo ,int updateFreq){//updateFreq = timer interrupt frequency Hz
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	if (servo -> move == true){
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	7c1b      	ldrb	r3, [r3, #16]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	f040 8090 	bne.w	80050f4 <_Z9servo_runP5servoi+0x134>
		if ((int)servo -> pos == (int)servo -> goalAngle){
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	edd3 7a00 	vldr	s15, [r3]
 8004fda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fde:	ee17 2a90 	vmov	r2, s15
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fec:	ee17 3a90 	vmov	r3, s15
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d107      	bne.n	8005004 <_Z9servo_runP5servoi+0x44>
    	servo -> move = false;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	741a      	strb	r2, [r3, #16]
    	servo -> lastAngle = servo -> goalAngle;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	609a      	str	r2, [r3, #8]
         servo -> pos += distance/(servo -> responseTime * updateFreq / 1000);
         __HAL_TIM_SET_COMPARE(servo -> htim, servo -> TIM_CHANNEL,600+10*(int)servo -> pos);
         //t++;
        }
	}
}
 8005002:	e077      	b.n	80050f4 <_Z9servo_runP5servoi+0x134>
         float distance = servo -> goalAngle - servo -> lastAngle;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	ed93 7a01 	vldr	s14, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005014:	edc7 7a03 	vstr	s15, [r7, #12]
         servo -> pos += distance/(servo -> responseTime * updateFreq / 1000);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	ed93 7a00 	vldr	s14, [r3]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	fb02 f303 	mul.w	r3, r2, r3
 8005028:	4a35      	ldr	r2, [pc, #212]	; (8005100 <_Z9servo_runP5servoi+0x140>)
 800502a:	fb82 1203 	smull	r1, r2, r2, r3
 800502e:	1192      	asrs	r2, r2, #6
 8005030:	17db      	asrs	r3, r3, #31
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	ee07 3a90 	vmov	s15, r3
 8005038:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800503c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005040:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	edc3 7a00 	vstr	s15, [r3]
         __HAL_TIM_SET_COMPARE(servo -> htim, servo -> TIM_CHANNEL,600+10*(int)servo -> pos);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d111      	bne.n	800507a <_Z9servo_runP5servoi+0xba>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	edd3 7a00 	vldr	s15, [r3]
 800505c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005060:	ee17 2a90 	vmov	r2, s15
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	f503 7216 	add.w	r2, r3, #600	; 0x258
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005078:	e03c      	b.n	80050f4 <_Z9servo_runP5servoi+0x134>
         __HAL_TIM_SET_COMPARE(servo -> htim, servo -> TIM_CHANNEL,600+10*(int)servo -> pos);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b04      	cmp	r3, #4
 8005080:	d111      	bne.n	80050a6 <_Z9servo_runP5servoi+0xe6>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	edd3 7a00 	vldr	s15, [r3]
 8005088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800508c:	ee17 2a90 	vmov	r2, s15
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	f503 7216 	add.w	r2, r3, #600	; 0x258
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80050a4:	e026      	b.n	80050f4 <_Z9servo_runP5servoi+0x134>
         __HAL_TIM_SET_COMPARE(servo -> htim, servo -> TIM_CHANNEL,600+10*(int)servo -> pos);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d111      	bne.n	80050d2 <_Z9servo_runP5servoi+0x112>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	edd3 7a00 	vldr	s15, [r3]
 80050b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050b8:	ee17 2a90 	vmov	r2, s15
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	f503 7216 	add.w	r2, r3, #600	; 0x258
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80050d0:	e010      	b.n	80050f4 <_Z9servo_runP5servoi+0x134>
         __HAL_TIM_SET_COMPARE(servo -> htim, servo -> TIM_CHANNEL,600+10*(int)servo -> pos);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	edd3 7a00 	vldr	s15, [r3]
 80050d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050dc:	ee17 2a90 	vmov	r2, s15
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	f503 7216 	add.w	r2, r3, #600	; 0x258
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	10624dd3 	.word	0x10624dd3

08005104 <_Z10blockStatev>:
//for script

void blockState(){//控制servo開關，true open ,false close
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
	//寫劇本改bloack_state_FL和bloack_state_BL兩個變數就好
	servo_run(&servoFL, 1000);
 8005108:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800510c:	4823      	ldr	r0, [pc, #140]	; (800519c <_Z10blockStatev+0x98>)
 800510e:	f7ff ff57 	bl	8004fc0 <_Z9servo_runP5servoi>
	servo_run(&servoBL, 1000);
 8005112:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005116:	4822      	ldr	r0, [pc, #136]	; (80051a0 <_Z10blockStatev+0x9c>)
 8005118:	f7ff ff52 	bl	8004fc0 <_Z9servo_runP5servoi>
	//
	if (servoFL.block_state == true){//左前servo
 800511c:	4b1f      	ldr	r3, [pc, #124]	; (800519c <_Z10blockStatev+0x98>)
 800511e:	7c5b      	ldrb	r3, [r3, #17]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d10d      	bne.n	8005140 <_Z10blockStatev+0x3c>
		servo_move(&servoFL, servoAngle[0],1000);
 8005124:	4b1f      	ldr	r3, [pc, #124]	; (80051a4 <_Z10blockStatev+0xa0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	ee07 3a90 	vmov	s15, r3
 800512c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005130:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005134:	eeb0 0a67 	vmov.f32	s0, s15
 8005138:	4818      	ldr	r0, [pc, #96]	; (800519c <_Z10blockStatev+0x98>)
 800513a:	f7ff ff2b 	bl	8004f94 <_Z10servo_moveP5servofi>
 800513e:	e00c      	b.n	800515a <_Z10blockStatev+0x56>
	}else{
		servo_move(&servoFL, servoAngle[1],1000);
 8005140:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <_Z10blockStatev+0xa0>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	ee07 3a90 	vmov	s15, r3
 8005148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800514c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005150:	eeb0 0a67 	vmov.f32	s0, s15
 8005154:	4811      	ldr	r0, [pc, #68]	; (800519c <_Z10blockStatev+0x98>)
 8005156:	f7ff ff1d 	bl	8004f94 <_Z10servo_moveP5servofi>
	}
	if (servoBL.block_state == true){//左後servo
 800515a:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <_Z10blockStatev+0x9c>)
 800515c:	7c5b      	ldrb	r3, [r3, #17]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d10d      	bne.n	800517e <_Z10blockStatev+0x7a>
		servo_move(&servoBL, servoAngle[1],1000);
 8005162:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <_Z10blockStatev+0xa0>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800516e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005172:	eeb0 0a67 	vmov.f32	s0, s15
 8005176:	480a      	ldr	r0, [pc, #40]	; (80051a0 <_Z10blockStatev+0x9c>)
 8005178:	f7ff ff0c 	bl	8004f94 <_Z10servo_moveP5servofi>
	}else{
		servo_move(&servoBL, servoAngle[0],1000);
		}
}
 800517c:	e00c      	b.n	8005198 <_Z10blockStatev+0x94>
		servo_move(&servoBL, servoAngle[0],1000);
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <_Z10blockStatev+0xa0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800518a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800518e:	eeb0 0a67 	vmov.f32	s0, s15
 8005192:	4803      	ldr	r0, [pc, #12]	; (80051a0 <_Z10blockStatev+0x9c>)
 8005194:	f7ff fefe 	bl	8004f94 <_Z10servo_moveP5servofi>
}
 8005198:	bf00      	nop
 800519a:	bd80      	pop	{r7, pc}
 800519c:	2000015c 	.word	0x2000015c
 80051a0:	20000178 	.word	0x20000178
 80051a4:	20000154 	.word	0x20000154

080051a8 <_Z17update_blockstateb>:
void update_blockstate(bool block_state){
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	71fb      	strb	r3, [r7, #7]
	//block_state為true時擋板打開,false擋板關閉
	servoFL.block_state = block_state;
 80051b2:	4a08      	ldr	r2, [pc, #32]	; (80051d4 <_Z17update_blockstateb+0x2c>)
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	7453      	strb	r3, [r2, #17]
	servoBL.block_state = block_state;
 80051b8:	4a07      	ldr	r2, [pc, #28]	; (80051d8 <_Z17update_blockstateb+0x30>)
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	7453      	strb	r3, [r2, #17]
	wait(responseTime + 500);
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <_Z17update_blockstateb+0x34>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fda8 	bl	8003d1c <wait>

}
 80051cc:	bf00      	nop
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	2000015c 	.word	0x2000015c
 80051d8:	20000178 	.word	0x20000178
 80051dc:	20000150 	.word	0x20000150

080051e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	4b22      	ldr	r3, [pc, #136]	; (8005274 <HAL_MspInit+0x94>)
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	4a21      	ldr	r2, [pc, #132]	; (8005274 <HAL_MspInit+0x94>)
 80051f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051f4:	6453      	str	r3, [r2, #68]	; 0x44
 80051f6:	4b1f      	ldr	r3, [pc, #124]	; (8005274 <HAL_MspInit+0x94>)
 80051f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	603b      	str	r3, [r7, #0]
 8005206:	4b1b      	ldr	r3, [pc, #108]	; (8005274 <HAL_MspInit+0x94>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <HAL_MspInit+0x94>)
 800520c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005210:	6413      	str	r3, [r2, #64]	; 0x40
 8005212:	4b18      	ldr	r3, [pc, #96]	; (8005274 <HAL_MspInit+0x94>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800521e:	2007      	movs	r0, #7
 8005220:	f001 f97a 	bl	8006518 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 1);
 8005224:	2201      	movs	r2, #1
 8005226:	2100      	movs	r1, #0
 8005228:	f06f 000b 	mvn.w	r0, #11
 800522c:	f001 f97f 	bl	800652e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 1);
 8005230:	2201      	movs	r2, #1
 8005232:	2100      	movs	r1, #0
 8005234:	f06f 000a 	mvn.w	r0, #10
 8005238:	f001 f979 	bl	800652e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 1);
 800523c:	2201      	movs	r2, #1
 800523e:	2100      	movs	r1, #0
 8005240:	f06f 0009 	mvn.w	r0, #9
 8005244:	f001 f973 	bl	800652e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 1);
 8005248:	2201      	movs	r2, #1
 800524a:	2100      	movs	r1, #0
 800524c:	f06f 0004 	mvn.w	r0, #4
 8005250:	f001 f96d 	bl	800652e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 1);
 8005254:	2201      	movs	r2, #1
 8005256:	2100      	movs	r1, #0
 8005258:	f06f 0003 	mvn.w	r0, #3
 800525c:	f001 f967 	bl	800652e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 1);
 8005260:	2201      	movs	r2, #1
 8005262:	2100      	movs	r1, #0
 8005264:	f06f 0001 	mvn.w	r0, #1
 8005268:	f001 f961 	bl	800652e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800526c:	bf00      	nop
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40023800 	.word	0x40023800

08005278 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	; 0x28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005280:	f107 0314 	add.w	r3, r7, #20
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	605a      	str	r2, [r3, #4]
 800528a:	609a      	str	r2, [r3, #8]
 800528c:	60da      	str	r2, [r3, #12]
 800528e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a3c      	ldr	r2, [pc, #240]	; (8005388 <HAL_ADC_MspInit+0x110>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d171      	bne.n	800537e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	4b3b      	ldr	r3, [pc, #236]	; (800538c <HAL_ADC_MspInit+0x114>)
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	4a3a      	ldr	r2, [pc, #232]	; (800538c <HAL_ADC_MspInit+0x114>)
 80052a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a8:	6453      	str	r3, [r2, #68]	; 0x44
 80052aa:	4b38      	ldr	r3, [pc, #224]	; (800538c <HAL_ADC_MspInit+0x114>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	4b34      	ldr	r3, [pc, #208]	; (800538c <HAL_ADC_MspInit+0x114>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	4a33      	ldr	r2, [pc, #204]	; (800538c <HAL_ADC_MspInit+0x114>)
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	6313      	str	r3, [r2, #48]	; 0x30
 80052c6:	4b31      	ldr	r3, [pc, #196]	; (800538c <HAL_ADC_MspInit+0x114>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	4b2d      	ldr	r3, [pc, #180]	; (800538c <HAL_ADC_MspInit+0x114>)
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	4a2c      	ldr	r2, [pc, #176]	; (800538c <HAL_ADC_MspInit+0x114>)
 80052dc:	f043 0302 	orr.w	r3, r3, #2
 80052e0:	6313      	str	r3, [r2, #48]	; 0x30
 80052e2:	4b2a      	ldr	r3, [pc, #168]	; (800538c <HAL_ADC_MspInit+0x114>)
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	60bb      	str	r3, [r7, #8]
 80052ec:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80052ee:	23d3      	movs	r3, #211	; 0xd3
 80052f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052f2:	2303      	movs	r3, #3
 80052f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052fa:	f107 0314 	add.w	r3, r7, #20
 80052fe:	4619      	mov	r1, r3
 8005300:	4823      	ldr	r0, [pc, #140]	; (8005390 <HAL_ADC_MspInit+0x118>)
 8005302:	f001 fd4d 	bl	8006da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005306:	2303      	movs	r3, #3
 8005308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800530a:	2303      	movs	r3, #3
 800530c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005312:	f107 0314 	add.w	r3, r7, #20
 8005316:	4619      	mov	r1, r3
 8005318:	481e      	ldr	r0, [pc, #120]	; (8005394 <HAL_ADC_MspInit+0x11c>)
 800531a:	f001 fd41 	bl	8006da0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800531e:	4b1e      	ldr	r3, [pc, #120]	; (8005398 <HAL_ADC_MspInit+0x120>)
 8005320:	4a1e      	ldr	r2, [pc, #120]	; (800539c <HAL_ADC_MspInit+0x124>)
 8005322:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005324:	4b1c      	ldr	r3, [pc, #112]	; (8005398 <HAL_ADC_MspInit+0x120>)
 8005326:	2200      	movs	r2, #0
 8005328:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800532a:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <HAL_ADC_MspInit+0x120>)
 800532c:	2200      	movs	r2, #0
 800532e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005330:	4b19      	ldr	r3, [pc, #100]	; (8005398 <HAL_ADC_MspInit+0x120>)
 8005332:	2200      	movs	r2, #0
 8005334:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005336:	4b18      	ldr	r3, [pc, #96]	; (8005398 <HAL_ADC_MspInit+0x120>)
 8005338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800533c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800533e:	4b16      	ldr	r3, [pc, #88]	; (8005398 <HAL_ADC_MspInit+0x120>)
 8005340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005344:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <HAL_ADC_MspInit+0x120>)
 8005348:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800534c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800534e:	4b12      	ldr	r3, [pc, #72]	; (8005398 <HAL_ADC_MspInit+0x120>)
 8005350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005354:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005356:	4b10      	ldr	r3, [pc, #64]	; (8005398 <HAL_ADC_MspInit+0x120>)
 8005358:	2200      	movs	r2, #0
 800535a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <HAL_ADC_MspInit+0x120>)
 800535e:	2200      	movs	r2, #0
 8005360:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005362:	480d      	ldr	r0, [pc, #52]	; (8005398 <HAL_ADC_MspInit+0x120>)
 8005364:	f001 f91a 	bl	800659c <HAL_DMA_Init>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800536e:	f7fe fc9d 	bl	8003cac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a08      	ldr	r2, [pc, #32]	; (8005398 <HAL_ADC_MspInit+0x120>)
 8005376:	639a      	str	r2, [r3, #56]	; 0x38
 8005378:	4a07      	ldr	r2, [pc, #28]	; (8005398 <HAL_ADC_MspInit+0x120>)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800537e:	bf00      	nop
 8005380:	3728      	adds	r7, #40	; 0x28
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40012000 	.word	0x40012000
 800538c:	40023800 	.word	0x40023800
 8005390:	40020000 	.word	0x40020000
 8005394:	40020400 	.word	0x40020400
 8005398:	20000318 	.word	0x20000318
 800539c:	40026410 	.word	0x40026410

080053a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a15      	ldr	r2, [pc, #84]	; (8005404 <HAL_TIM_PWM_MspInit+0x64>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d10e      	bne.n	80053d0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	4b14      	ldr	r3, [pc, #80]	; (8005408 <HAL_TIM_PWM_MspInit+0x68>)
 80053b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ba:	4a13      	ldr	r2, [pc, #76]	; (8005408 <HAL_TIM_PWM_MspInit+0x68>)
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	6453      	str	r3, [r2, #68]	; 0x44
 80053c2:	4b11      	ldr	r3, [pc, #68]	; (8005408 <HAL_TIM_PWM_MspInit+0x68>)
 80053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80053ce:	e012      	b.n	80053f6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a0d      	ldr	r2, [pc, #52]	; (800540c <HAL_TIM_PWM_MspInit+0x6c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10d      	bne.n	80053f6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <HAL_TIM_PWM_MspInit+0x68>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	4a09      	ldr	r2, [pc, #36]	; (8005408 <HAL_TIM_PWM_MspInit+0x68>)
 80053e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053e8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ea:	4b07      	ldr	r3, [pc, #28]	; (8005408 <HAL_TIM_PWM_MspInit+0x68>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40010000 	.word	0x40010000
 8005408:	40023800 	.word	0x40023800
 800540c:	40001800 	.word	0x40001800

08005410 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b090      	sub	sp, #64	; 0x40
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005430:	d14c      	bne.n	80054cc <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005432:	2300      	movs	r3, #0
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
 8005436:	4b76      	ldr	r3, [pc, #472]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	4a75      	ldr	r2, [pc, #468]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	6413      	str	r3, [r2, #64]	; 0x40
 8005442:	4b73      	ldr	r3, [pc, #460]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800544e:	2300      	movs	r3, #0
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	4b6f      	ldr	r3, [pc, #444]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	4a6e      	ldr	r2, [pc, #440]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	6313      	str	r3, [r2, #48]	; 0x30
 800545e:	4b6c      	ldr	r3, [pc, #432]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	623b      	str	r3, [r7, #32]
 800546e:	4b68      	ldr	r3, [pc, #416]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	4a67      	ldr	r2, [pc, #412]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 8005474:	f043 0302 	orr.w	r3, r3, #2
 8005478:	6313      	str	r3, [r2, #48]	; 0x30
 800547a:	4b65      	ldr	r3, [pc, #404]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	623b      	str	r3, [r7, #32]
 8005484:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800548c:	2302      	movs	r3, #2
 800548e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005490:	2300      	movs	r3, #0
 8005492:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005494:	2300      	movs	r3, #0
 8005496:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005498:	2301      	movs	r3, #1
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800549c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054a0:	4619      	mov	r1, r3
 80054a2:	485c      	ldr	r0, [pc, #368]	; (8005614 <HAL_TIM_Encoder_MspInit+0x204>)
 80054a4:	f001 fc7c 	bl	8006da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80054a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ae:	2302      	movs	r3, #2
 80054b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b6:	2300      	movs	r3, #0
 80054b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80054ba:	2301      	movs	r3, #1
 80054bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054c2:	4619      	mov	r1, r3
 80054c4:	4854      	ldr	r0, [pc, #336]	; (8005618 <HAL_TIM_Encoder_MspInit+0x208>)
 80054c6:	f001 fc6b 	bl	8006da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80054ca:	e09c      	b.n	8005606 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a52      	ldr	r2, [pc, #328]	; (800561c <HAL_TIM_Encoder_MspInit+0x20c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d12c      	bne.n	8005530 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
 80054da:	4b4d      	ldr	r3, [pc, #308]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	4a4c      	ldr	r2, [pc, #304]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	6413      	str	r3, [r2, #64]	; 0x40
 80054e6:	4b4a      	ldr	r3, [pc, #296]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	4b46      	ldr	r3, [pc, #280]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	4a45      	ldr	r2, [pc, #276]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 80054fc:	f043 0302 	orr.w	r3, r3, #2
 8005500:	6313      	str	r3, [r2, #48]	; 0x30
 8005502:	4b43      	ldr	r3, [pc, #268]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800550e:	2330      	movs	r3, #48	; 0x30
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005512:	2302      	movs	r3, #2
 8005514:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005516:	2300      	movs	r3, #0
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551a:	2300      	movs	r3, #0
 800551c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800551e:	2302      	movs	r3, #2
 8005520:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005526:	4619      	mov	r1, r3
 8005528:	483b      	ldr	r0, [pc, #236]	; (8005618 <HAL_TIM_Encoder_MspInit+0x208>)
 800552a:	f001 fc39 	bl	8006da0 <HAL_GPIO_Init>
}
 800552e:	e06a      	b.n	8005606 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM4)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a3a      	ldr	r2, [pc, #232]	; (8005620 <HAL_TIM_Encoder_MspInit+0x210>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d12c      	bne.n	8005594 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	4b34      	ldr	r3, [pc, #208]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	4a33      	ldr	r2, [pc, #204]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 8005544:	f043 0304 	orr.w	r3, r3, #4
 8005548:	6413      	str	r3, [r2, #64]	; 0x40
 800554a:	4b31      	ldr	r3, [pc, #196]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005556:	2300      	movs	r3, #0
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 8005560:	f043 0302 	orr.w	r3, r3, #2
 8005564:	6313      	str	r3, [r2, #48]	; 0x30
 8005566:	4b2a      	ldr	r3, [pc, #168]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005572:	23c0      	movs	r3, #192	; 0xc0
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005576:	2302      	movs	r3, #2
 8005578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557a:	2300      	movs	r3, #0
 800557c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800557e:	2300      	movs	r3, #0
 8005580:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005582:	2302      	movs	r3, #2
 8005584:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800558a:	4619      	mov	r1, r3
 800558c:	4822      	ldr	r0, [pc, #136]	; (8005618 <HAL_TIM_Encoder_MspInit+0x208>)
 800558e:	f001 fc07 	bl	8006da0 <HAL_GPIO_Init>
}
 8005592:	e038      	b.n	8005606 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a22      	ldr	r2, [pc, #136]	; (8005624 <HAL_TIM_Encoder_MspInit+0x214>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d133      	bne.n	8005606 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	4a1a      	ldr	r2, [pc, #104]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 80055a8:	f043 0302 	orr.w	r3, r3, #2
 80055ac:	6453      	str	r3, [r2, #68]	; 0x44
 80055ae:	4b18      	ldr	r3, [pc, #96]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 80055b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	4b14      	ldr	r3, [pc, #80]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	4a13      	ldr	r2, [pc, #76]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 80055c4:	f043 0304 	orr.w	r3, r3, #4
 80055c8:	6313      	str	r3, [r2, #48]	; 0x30
 80055ca:	4b11      	ldr	r3, [pc, #68]	; (8005610 <HAL_TIM_Encoder_MspInit+0x200>)
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	60bb      	str	r3, [r7, #8]
 80055d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055d6:	23c0      	movs	r3, #192	; 0xc0
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055da:	2302      	movs	r3, #2
 80055dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055e2:	2300      	movs	r3, #0
 80055e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80055e6:	2303      	movs	r3, #3
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055ee:	4619      	mov	r1, r3
 80055f0:	480d      	ldr	r0, [pc, #52]	; (8005628 <HAL_TIM_Encoder_MspInit+0x218>)
 80055f2:	f001 fbd5 	bl	8006da0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 1);
 80055f6:	2201      	movs	r2, #1
 80055f8:	2100      	movs	r1, #0
 80055fa:	202c      	movs	r0, #44	; 0x2c
 80055fc:	f000 ff97 	bl	800652e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005600:	202c      	movs	r0, #44	; 0x2c
 8005602:	f000 ffb0 	bl	8006566 <HAL_NVIC_EnableIRQ>
}
 8005606:	bf00      	nop
 8005608:	3740      	adds	r7, #64	; 0x40
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40023800 	.word	0x40023800
 8005614:	40020000 	.word	0x40020000
 8005618:	40020400 	.word	0x40020400
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800
 8005624:	40010400 	.word	0x40010400
 8005628:	40020800 	.word	0x40020800

0800562c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1c      	ldr	r2, [pc, #112]	; (80056ac <HAL_TIM_Base_MspInit+0x80>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d116      	bne.n	800566c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <HAL_TIM_Base_MspInit+0x84>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	4a1a      	ldr	r2, [pc, #104]	; (80056b0 <HAL_TIM_Base_MspInit+0x84>)
 8005648:	f043 0320 	orr.w	r3, r3, #32
 800564c:	6413      	str	r3, [r2, #64]	; 0x40
 800564e:	4b18      	ldr	r3, [pc, #96]	; (80056b0 <HAL_TIM_Base_MspInit+0x84>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 1);
 800565a:	2201      	movs	r2, #1
 800565c:	2100      	movs	r1, #0
 800565e:	2037      	movs	r0, #55	; 0x37
 8005660:	f000 ff65 	bl	800652e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005664:	2037      	movs	r0, #55	; 0x37
 8005666:	f000 ff7e 	bl	8006566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800566a:	e01a      	b.n	80056a2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM13)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a10      	ldr	r2, [pc, #64]	; (80056b4 <HAL_TIM_Base_MspInit+0x88>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d115      	bne.n	80056a2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <HAL_TIM_Base_MspInit+0x84>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	4a0c      	ldr	r2, [pc, #48]	; (80056b0 <HAL_TIM_Base_MspInit+0x84>)
 8005680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005684:	6413      	str	r3, [r2, #64]	; 0x40
 8005686:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <HAL_TIM_Base_MspInit+0x84>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568e:	60bb      	str	r3, [r7, #8]
 8005690:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 1);
 8005692:	2201      	movs	r2, #1
 8005694:	2100      	movs	r1, #0
 8005696:	202c      	movs	r0, #44	; 0x2c
 8005698:	f000 ff49 	bl	800652e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800569c:	202c      	movs	r0, #44	; 0x2c
 800569e:	f000 ff62 	bl	8006566 <HAL_NVIC_EnableIRQ>
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40001400 	.word	0x40001400
 80056b0:	40023800 	.word	0x40023800
 80056b4:	40001c00 	.word	0x40001c00

080056b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08a      	sub	sp, #40	; 0x28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c0:	f107 0314 	add.w	r3, r7, #20
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	605a      	str	r2, [r3, #4]
 80056ca:	609a      	str	r2, [r3, #8]
 80056cc:	60da      	str	r2, [r3, #12]
 80056ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a25      	ldr	r2, [pc, #148]	; (800576c <HAL_TIM_MspPostInit+0xb4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d11f      	bne.n	800571a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056da:	2300      	movs	r3, #0
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	4b24      	ldr	r3, [pc, #144]	; (8005770 <HAL_TIM_MspPostInit+0xb8>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	4a23      	ldr	r2, [pc, #140]	; (8005770 <HAL_TIM_MspPostInit+0xb8>)
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	6313      	str	r3, [r2, #48]	; 0x30
 80056ea:	4b21      	ldr	r3, [pc, #132]	; (8005770 <HAL_TIM_MspPostInit+0xb8>)
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80056f6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80056fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056fc:	2302      	movs	r3, #2
 80056fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005704:	2300      	movs	r3, #0
 8005706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005708:	2301      	movs	r3, #1
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800570c:	f107 0314 	add.w	r3, r7, #20
 8005710:	4619      	mov	r1, r3
 8005712:	4818      	ldr	r0, [pc, #96]	; (8005774 <HAL_TIM_MspPostInit+0xbc>)
 8005714:	f001 fb44 	bl	8006da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8005718:	e023      	b.n	8005762 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a16      	ldr	r2, [pc, #88]	; (8005778 <HAL_TIM_MspPostInit+0xc0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d11e      	bne.n	8005762 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	4b11      	ldr	r3, [pc, #68]	; (8005770 <HAL_TIM_MspPostInit+0xb8>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	4a10      	ldr	r2, [pc, #64]	; (8005770 <HAL_TIM_MspPostInit+0xb8>)
 800572e:	f043 0302 	orr.w	r3, r3, #2
 8005732:	6313      	str	r3, [r2, #48]	; 0x30
 8005734:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <HAL_TIM_MspPostInit+0xb8>)
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005740:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005746:	2302      	movs	r3, #2
 8005748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800574e:	2300      	movs	r3, #0
 8005750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8005752:	2309      	movs	r3, #9
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005756:	f107 0314 	add.w	r3, r7, #20
 800575a:	4619      	mov	r1, r3
 800575c:	4807      	ldr	r0, [pc, #28]	; (800577c <HAL_TIM_MspPostInit+0xc4>)
 800575e:	f001 fb1f 	bl	8006da0 <HAL_GPIO_Init>
}
 8005762:	bf00      	nop
 8005764:	3728      	adds	r7, #40	; 0x28
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40010000 	.word	0x40010000
 8005770:	40023800 	.word	0x40023800
 8005774:	40020000 	.word	0x40020000
 8005778:	40001800 	.word	0x40001800
 800577c:	40020400 	.word	0x40020400

08005780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	; 0x28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005788:	f107 0314 	add.w	r3, r7, #20
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a4c      	ldr	r2, [pc, #304]	; (80058d0 <HAL_UART_MspInit+0x150>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	f040 8091 	bne.w	80058c6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80057a4:	2300      	movs	r3, #0
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	4b4a      	ldr	r3, [pc, #296]	; (80058d4 <HAL_UART_MspInit+0x154>)
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	4a49      	ldr	r2, [pc, #292]	; (80058d4 <HAL_UART_MspInit+0x154>)
 80057ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057b2:	6413      	str	r3, [r2, #64]	; 0x40
 80057b4:	4b47      	ldr	r3, [pc, #284]	; (80058d4 <HAL_UART_MspInit+0x154>)
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	4b43      	ldr	r3, [pc, #268]	; (80058d4 <HAL_UART_MspInit+0x154>)
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	4a42      	ldr	r2, [pc, #264]	; (80058d4 <HAL_UART_MspInit+0x154>)
 80057ca:	f043 0304 	orr.w	r3, r3, #4
 80057ce:	6313      	str	r3, [r2, #48]	; 0x30
 80057d0:	4b40      	ldr	r3, [pc, #256]	; (80058d4 <HAL_UART_MspInit+0x154>)
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80057dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80057e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e2:	2302      	movs	r3, #2
 80057e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057ea:	2303      	movs	r3, #3
 80057ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80057ee:	2308      	movs	r3, #8
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057f2:	f107 0314 	add.w	r3, r7, #20
 80057f6:	4619      	mov	r1, r3
 80057f8:	4837      	ldr	r0, [pc, #220]	; (80058d8 <HAL_UART_MspInit+0x158>)
 80057fa:	f001 fad1 	bl	8006da0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80057fe:	4b37      	ldr	r3, [pc, #220]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005800:	4a37      	ldr	r2, [pc, #220]	; (80058e0 <HAL_UART_MspInit+0x160>)
 8005802:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8005804:	4b35      	ldr	r3, [pc, #212]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800580a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800580c:	4b33      	ldr	r3, [pc, #204]	; (80058dc <HAL_UART_MspInit+0x15c>)
 800580e:	2200      	movs	r2, #0
 8005810:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005812:	4b32      	ldr	r3, [pc, #200]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005814:	2200      	movs	r2, #0
 8005816:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005818:	4b30      	ldr	r3, [pc, #192]	; (80058dc <HAL_UART_MspInit+0x15c>)
 800581a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800581e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005820:	4b2e      	ldr	r3, [pc, #184]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005822:	2200      	movs	r2, #0
 8005824:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005826:	4b2d      	ldr	r3, [pc, #180]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005828:	2200      	movs	r2, #0
 800582a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800582c:	4b2b      	ldr	r3, [pc, #172]	; (80058dc <HAL_UART_MspInit+0x15c>)
 800582e:	2200      	movs	r2, #0
 8005830:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005832:	4b2a      	ldr	r3, [pc, #168]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005834:	2200      	movs	r2, #0
 8005836:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005838:	4b28      	ldr	r3, [pc, #160]	; (80058dc <HAL_UART_MspInit+0x15c>)
 800583a:	2200      	movs	r2, #0
 800583c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800583e:	4827      	ldr	r0, [pc, #156]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005840:	f000 feac 	bl	800659c <HAL_DMA_Init>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800584a:	f7fe fa2f 	bl	8003cac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a22      	ldr	r2, [pc, #136]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005852:	639a      	str	r2, [r3, #56]	; 0x38
 8005854:	4a21      	ldr	r2, [pc, #132]	; (80058dc <HAL_UART_MspInit+0x15c>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800585a:	4b22      	ldr	r3, [pc, #136]	; (80058e4 <HAL_UART_MspInit+0x164>)
 800585c:	4a22      	ldr	r2, [pc, #136]	; (80058e8 <HAL_UART_MspInit+0x168>)
 800585e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8005860:	4b20      	ldr	r3, [pc, #128]	; (80058e4 <HAL_UART_MspInit+0x164>)
 8005862:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005866:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005868:	4b1e      	ldr	r3, [pc, #120]	; (80058e4 <HAL_UART_MspInit+0x164>)
 800586a:	2240      	movs	r2, #64	; 0x40
 800586c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800586e:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <HAL_UART_MspInit+0x164>)
 8005870:	2200      	movs	r2, #0
 8005872:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005874:	4b1b      	ldr	r3, [pc, #108]	; (80058e4 <HAL_UART_MspInit+0x164>)
 8005876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800587a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800587c:	4b19      	ldr	r3, [pc, #100]	; (80058e4 <HAL_UART_MspInit+0x164>)
 800587e:	2200      	movs	r2, #0
 8005880:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005882:	4b18      	ldr	r3, [pc, #96]	; (80058e4 <HAL_UART_MspInit+0x164>)
 8005884:	2200      	movs	r2, #0
 8005886:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005888:	4b16      	ldr	r3, [pc, #88]	; (80058e4 <HAL_UART_MspInit+0x164>)
 800588a:	2200      	movs	r2, #0
 800588c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800588e:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <HAL_UART_MspInit+0x164>)
 8005890:	2200      	movs	r2, #0
 8005892:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005894:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <HAL_UART_MspInit+0x164>)
 8005896:	2200      	movs	r2, #0
 8005898:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800589a:	4812      	ldr	r0, [pc, #72]	; (80058e4 <HAL_UART_MspInit+0x164>)
 800589c:	f000 fe7e 	bl	800659c <HAL_DMA_Init>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80058a6:	f7fe fa01 	bl	8003cac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a0d      	ldr	r2, [pc, #52]	; (80058e4 <HAL_UART_MspInit+0x164>)
 80058ae:	635a      	str	r2, [r3, #52]	; 0x34
 80058b0:	4a0c      	ldr	r2, [pc, #48]	; (80058e4 <HAL_UART_MspInit+0x164>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80058b6:	2200      	movs	r2, #0
 80058b8:	2100      	movs	r1, #0
 80058ba:	2034      	movs	r0, #52	; 0x34
 80058bc:	f000 fe37 	bl	800652e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80058c0:	2034      	movs	r0, #52	; 0x34
 80058c2:	f000 fe50 	bl	8006566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80058c6:	bf00      	nop
 80058c8:	3728      	adds	r7, #40	; 0x28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40004c00 	.word	0x40004c00
 80058d4:	40023800 	.word	0x40023800
 80058d8:	40020800 	.word	0x40020800
 80058dc:	200005fc 	.word	0x200005fc
 80058e0:	40026040 	.word	0x40026040
 80058e4:	2000065c 	.word	0x2000065c
 80058e8:	40026070 	.word	0x40026070

080058ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058f0:	e7fe      	b.n	80058f0 <NMI_Handler+0x4>

080058f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058f2:	b480      	push	{r7}
 80058f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058f6:	e7fe      	b.n	80058f6 <HardFault_Handler+0x4>

080058f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058fc:	e7fe      	b.n	80058fc <MemManage_Handler+0x4>

080058fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058fe:	b480      	push	{r7}
 8005900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005902:	e7fe      	b.n	8005902 <BusFault_Handler+0x4>

08005904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005908:	e7fe      	b.n	8005908 <UsageFault_Handler+0x4>

0800590a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800590a:	b480      	push	{r7}
 800590c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800590e:	bf00      	nop
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800591c:	bf00      	nop
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005926:	b480      	push	{r7}
 8005928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800592a:	bf00      	nop
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005938:	f000 f8dc 	bl	8005af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800593c:	bf00      	nop
 800593e:	bd80      	pop	{r7, pc}

08005940 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005944:	4802      	ldr	r0, [pc, #8]	; (8005950 <DMA1_Stream2_IRQHandler+0x10>)
 8005946:	f000 ffc1 	bl	80068cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800594a:	bf00      	nop
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	200005fc 	.word	0x200005fc

08005954 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005958:	4802      	ldr	r0, [pc, #8]	; (8005964 <DMA1_Stream4_IRQHandler+0x10>)
 800595a:	f000 ffb7 	bl	80068cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800595e:	bf00      	nop
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	2000065c 	.word	0x2000065c

08005968 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800596c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005970:	f001 fbdc 	bl	800712c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005974:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005978:	f001 fbd8 	bl	800712c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800597c:	bf00      	nop
 800597e:	bd80      	pop	{r7, pc}

08005980 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005984:	4803      	ldr	r0, [pc, #12]	; (8005994 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8005986:	f002 fd0b 	bl	80083a0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800598a:	4803      	ldr	r0, [pc, #12]	; (8005998 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800598c:	f002 fd08 	bl	80083a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005990:	bf00      	nop
 8005992:	bd80      	pop	{r7, pc}
 8005994:	200004e0 	.word	0x200004e0
 8005998:	20000570 	.word	0x20000570

0800599c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80059a0:	4802      	ldr	r0, [pc, #8]	; (80059ac <UART4_IRQHandler+0x10>)
 80059a2:	f003 fb43 	bl	800902c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80059a6:	bf00      	nop
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	200005b8 	.word	0x200005b8

080059b0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80059b4:	4802      	ldr	r0, [pc, #8]	; (80059c0 <TIM7_IRQHandler+0x10>)
 80059b6:	f002 fcf3 	bl	80083a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80059ba:	bf00      	nop
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000498 	.word	0x20000498

080059c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80059c8:	4802      	ldr	r0, [pc, #8]	; (80059d4 <DMA2_Stream0_IRQHandler+0x10>)
 80059ca:	f000 ff7f 	bl	80068cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80059ce:	bf00      	nop
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000318 	.word	0x20000318

080059d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <SystemInit+0x20>)
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e2:	4a05      	ldr	r2, [pc, #20]	; (80059f8 <SystemInit+0x20>)
 80059e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059ec:	bf00      	nop
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	e000ed00 	.word	0xe000ed00

080059fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80059fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a00:	480d      	ldr	r0, [pc, #52]	; (8005a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005a02:	490e      	ldr	r1, [pc, #56]	; (8005a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005a04:	4a0e      	ldr	r2, [pc, #56]	; (8005a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a08:	e002      	b.n	8005a10 <LoopCopyDataInit>

08005a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a0e:	3304      	adds	r3, #4

08005a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a14:	d3f9      	bcc.n	8005a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a16:	4a0b      	ldr	r2, [pc, #44]	; (8005a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005a18:	4c0b      	ldr	r4, [pc, #44]	; (8005a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a1c:	e001      	b.n	8005a22 <LoopFillZerobss>

08005a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a20:	3204      	adds	r2, #4

08005a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a24:	d3fb      	bcc.n	8005a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a26:	f7ff ffd7 	bl	80059d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a2a:	f006 fcbd 	bl	800c3a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a2e:	f7fd fc63 	bl	80032f8 <main>
  bx  lr    
 8005a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a3c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8005a40:	0800c8f8 	.word	0x0800c8f8
  ldr r2, =_sbss
 8005a44:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8005a48:	20000724 	.word	0x20000724

08005a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a4c:	e7fe      	b.n	8005a4c <ADC_IRQHandler>
	...

08005a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a54:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <HAL_Init+0x40>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a0d      	ldr	r2, [pc, #52]	; (8005a90 <HAL_Init+0x40>)
 8005a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <HAL_Init+0x40>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <HAL_Init+0x40>)
 8005a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a6c:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <HAL_Init+0x40>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a07      	ldr	r2, [pc, #28]	; (8005a90 <HAL_Init+0x40>)
 8005a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a78:	2003      	movs	r0, #3
 8005a7a:	f000 fd4d 	bl	8006518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f000 f808 	bl	8005a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a84:	f7ff fbac 	bl	80051e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40023c00 	.word	0x40023c00

08005a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a9c:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <HAL_InitTick+0x54>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	4b12      	ldr	r3, [pc, #72]	; (8005aec <HAL_InitTick+0x58>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fd65 	bl	8006582 <HAL_SYSTICK_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e00e      	b.n	8005ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b0f      	cmp	r3, #15
 8005ac6:	d80a      	bhi.n	8005ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ac8:	2200      	movs	r2, #0
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ad0:	f000 fd2d 	bl	800652e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ad4:	4a06      	ldr	r2, [pc, #24]	; (8005af0 <HAL_InitTick+0x5c>)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e000      	b.n	8005ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000194 	.word	0x20000194
 8005aec:	2000019c 	.word	0x2000019c
 8005af0:	20000198 	.word	0x20000198

08005af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <HAL_IncTick+0x20>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <HAL_IncTick+0x24>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4413      	add	r3, r2
 8005b04:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <HAL_IncTick+0x24>)
 8005b06:	6013      	str	r3, [r2, #0]
}
 8005b08:	bf00      	nop
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	2000019c 	.word	0x2000019c
 8005b18:	20000720 	.word	0x20000720

08005b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b20:	4b03      	ldr	r3, [pc, #12]	; (8005b30 <HAL_GetTick+0x14>)
 8005b22:	681b      	ldr	r3, [r3, #0]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20000720 	.word	0x20000720

08005b34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e033      	b.n	8005bb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff fb90 	bl	8005278 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	f003 0310 	and.w	r3, r3, #16
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d118      	bne.n	8005ba4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005b7a:	f023 0302 	bic.w	r3, r3, #2
 8005b7e:	f043 0202 	orr.w	r2, r3, #2
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa78 	bl	800607c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f023 0303 	bic.w	r3, r3, #3
 8005b9a:	f043 0201 	orr.w	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
 8005ba2:	e001      	b.n	8005ba8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_ADC_Start_DMA+0x1e>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e0e9      	b.n	8005dae <HAL_ADC_Start_DMA+0x1f2>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d018      	beq.n	8005c22 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005c00:	4b6d      	ldr	r3, [pc, #436]	; (8005db8 <HAL_ADC_Start_DMA+0x1fc>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a6d      	ldr	r2, [pc, #436]	; (8005dbc <HAL_ADC_Start_DMA+0x200>)
 8005c06:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0a:	0c9a      	lsrs	r2, r3, #18
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4413      	add	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005c14:	e002      	b.n	8005c1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f9      	bne.n	8005c16 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c30:	d107      	bne.n	8005c42 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c40:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	f040 80a1 	bne.w	8005d94 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005c5a:	f023 0301 	bic.w	r3, r3, #1
 8005c5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005c7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c90:	d106      	bne.n	8005ca0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c96:	f023 0206 	bic.w	r2, r3, #6
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	645a      	str	r2, [r3, #68]	; 0x44
 8005c9e:	e002      	b.n	8005ca6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cae:	4b44      	ldr	r3, [pc, #272]	; (8005dc0 <HAL_ADC_Start_DMA+0x204>)
 8005cb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	4a43      	ldr	r2, [pc, #268]	; (8005dc4 <HAL_ADC_Start_DMA+0x208>)
 8005cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	4a42      	ldr	r2, [pc, #264]	; (8005dc8 <HAL_ADC_Start_DMA+0x20c>)
 8005cc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	4a41      	ldr	r2, [pc, #260]	; (8005dcc <HAL_ADC_Start_DMA+0x210>)
 8005cc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005cd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005ce2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	334c      	adds	r3, #76	; 0x4c
 8005cfe:	4619      	mov	r1, r3
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f000 fcf8 	bl	80066f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d12a      	bne.n	8005d6a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2d      	ldr	r2, [pc, #180]	; (8005dd0 <HAL_ADC_Start_DMA+0x214>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d015      	beq.n	8005d4a <HAL_ADC_Start_DMA+0x18e>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2c      	ldr	r2, [pc, #176]	; (8005dd4 <HAL_ADC_Start_DMA+0x218>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d105      	bne.n	8005d34 <HAL_ADC_Start_DMA+0x178>
 8005d28:	4b25      	ldr	r3, [pc, #148]	; (8005dc0 <HAL_ADC_Start_DMA+0x204>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 031f 	and.w	r3, r3, #31
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a27      	ldr	r2, [pc, #156]	; (8005dd8 <HAL_ADC_Start_DMA+0x21c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d136      	bne.n	8005dac <HAL_ADC_Start_DMA+0x1f0>
 8005d3e:	4b20      	ldr	r3, [pc, #128]	; (8005dc0 <HAL_ADC_Start_DMA+0x204>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d130      	bne.n	8005dac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d129      	bne.n	8005dac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d66:	609a      	str	r2, [r3, #8]
 8005d68:	e020      	b.n	8005dac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a18      	ldr	r2, [pc, #96]	; (8005dd0 <HAL_ADC_Start_DMA+0x214>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d11b      	bne.n	8005dac <HAL_ADC_Start_DMA+0x1f0>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d114      	bne.n	8005dac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d90:	609a      	str	r2, [r3, #8]
 8005d92:	e00b      	b.n	8005dac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	f043 0210 	orr.w	r2, r3, #16
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da4:	f043 0201 	orr.w	r2, r3, #1
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20000194 	.word	0x20000194
 8005dbc:	431bde83 	.word	0x431bde83
 8005dc0:	40012300 	.word	0x40012300
 8005dc4:	08006275 	.word	0x08006275
 8005dc8:	0800632f 	.word	0x0800632f
 8005dcc:	0800634b 	.word	0x0800634b
 8005dd0:	40012000 	.word	0x40012000
 8005dd4:	40012100 	.word	0x40012100
 8005dd8:	40012200 	.word	0x40012200

08005ddc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_ADC_ConfigChannel+0x1c>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e113      	b.n	800605c <HAL_ADC_ConfigChannel+0x244>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	d925      	bls.n	8005e90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68d9      	ldr	r1, [r3, #12]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	4613      	mov	r3, r2
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	4413      	add	r3, r2
 8005e58:	3b1e      	subs	r3, #30
 8005e5a:	2207      	movs	r2, #7
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	43da      	mvns	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	400a      	ands	r2, r1
 8005e68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68d9      	ldr	r1, [r3, #12]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	4403      	add	r3, r0
 8005e82:	3b1e      	subs	r3, #30
 8005e84:	409a      	lsls	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	60da      	str	r2, [r3, #12]
 8005e8e:	e022      	b.n	8005ed6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6919      	ldr	r1, [r3, #16]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	4413      	add	r3, r2
 8005ea4:	2207      	movs	r2, #7
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	43da      	mvns	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	400a      	ands	r2, r1
 8005eb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6919      	ldr	r1, [r3, #16]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	4403      	add	r3, r0
 8005ecc:	409a      	lsls	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b06      	cmp	r3, #6
 8005edc:	d824      	bhi.n	8005f28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	3b05      	subs	r3, #5
 8005ef0:	221f      	movs	r2, #31
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	43da      	mvns	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	400a      	ands	r2, r1
 8005efe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	3b05      	subs	r3, #5
 8005f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	635a      	str	r2, [r3, #52]	; 0x34
 8005f26:	e04c      	b.n	8005fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b0c      	cmp	r3, #12
 8005f2e:	d824      	bhi.n	8005f7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	3b23      	subs	r3, #35	; 0x23
 8005f42:	221f      	movs	r2, #31
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	43da      	mvns	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	400a      	ands	r2, r1
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	4618      	mov	r0, r3
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	3b23      	subs	r3, #35	; 0x23
 8005f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
 8005f78:	e023      	b.n	8005fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	3b41      	subs	r3, #65	; 0x41
 8005f8c:	221f      	movs	r2, #31
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	43da      	mvns	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	400a      	ands	r2, r1
 8005f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	4618      	mov	r0, r3
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	3b41      	subs	r3, #65	; 0x41
 8005fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005fc2:	4b29      	ldr	r3, [pc, #164]	; (8006068 <HAL_ADC_ConfigChannel+0x250>)
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a28      	ldr	r2, [pc, #160]	; (800606c <HAL_ADC_ConfigChannel+0x254>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d10f      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x1d8>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b12      	cmp	r3, #18
 8005fd6:	d10b      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1d      	ldr	r2, [pc, #116]	; (800606c <HAL_ADC_ConfigChannel+0x254>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d12b      	bne.n	8006052 <HAL_ADC_ConfigChannel+0x23a>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <HAL_ADC_ConfigChannel+0x258>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d003      	beq.n	800600c <HAL_ADC_ConfigChannel+0x1f4>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b11      	cmp	r3, #17
 800600a:	d122      	bne.n	8006052 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a11      	ldr	r2, [pc, #68]	; (8006070 <HAL_ADC_ConfigChannel+0x258>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d111      	bne.n	8006052 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800602e:	4b11      	ldr	r3, [pc, #68]	; (8006074 <HAL_ADC_ConfigChannel+0x25c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a11      	ldr	r2, [pc, #68]	; (8006078 <HAL_ADC_ConfigChannel+0x260>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	0c9a      	lsrs	r2, r3, #18
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006044:	e002      	b.n	800604c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	3b01      	subs	r3, #1
 800604a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f9      	bne.n	8006046 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	40012300 	.word	0x40012300
 800606c:	40012000 	.word	0x40012000
 8006070:	10000012 	.word	0x10000012
 8006074:	20000194 	.word	0x20000194
 8006078:	431bde83 	.word	0x431bde83

0800607c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006084:	4b79      	ldr	r3, [pc, #484]	; (800626c <ADC_Init+0x1f0>)
 8006086:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	431a      	orrs	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6859      	ldr	r1, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	021a      	lsls	r2, r3, #8
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80060d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6859      	ldr	r1, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6899      	ldr	r1, [r3, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	4a58      	ldr	r2, [pc, #352]	; (8006270 <ADC_Init+0x1f4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d022      	beq.n	800615a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006122:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6899      	ldr	r1, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006144:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6899      	ldr	r1, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	609a      	str	r2, [r3, #8]
 8006158:	e00f      	b.n	800617a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006178:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0202 	bic.w	r2, r2, #2
 8006188:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6899      	ldr	r1, [r3, #8]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	7e1b      	ldrb	r3, [r3, #24]
 8006194:	005a      	lsls	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01b      	beq.n	80061e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80061c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6859      	ldr	r1, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	3b01      	subs	r3, #1
 80061d4:	035a      	lsls	r2, r3, #13
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
 80061de:	e007      	b.n	80061f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	3b01      	subs	r3, #1
 800620c:	051a      	lsls	r2, r3, #20
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006224:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6899      	ldr	r1, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006232:	025a      	lsls	r2, r3, #9
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800624a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6899      	ldr	r1, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	029a      	lsls	r2, r3, #10
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	609a      	str	r2, [r3, #8]
}
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	40012300 	.word	0x40012300
 8006270:	0f000001 	.word	0x0f000001

08006274 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800628a:	2b00      	cmp	r3, #0
 800628c:	d13c      	bne.n	8006308 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d12b      	bne.n	8006300 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d127      	bne.n	8006300 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d006      	beq.n	80062cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d119      	bne.n	8006300 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0220 	bic.w	r2, r2, #32
 80062da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d105      	bne.n	8006300 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	f043 0201 	orr.w	r2, r3, #1
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff fd6b 	bl	8005ddc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006306:	e00e      	b.n	8006326 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f7ff fd75 	bl	8005e04 <HAL_ADC_ErrorCallback>
}
 800631a:	e004      	b.n	8006326 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4798      	blx	r3
}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7ff fd57 	bl	8005df0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006342:	bf00      	nop
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2240      	movs	r2, #64	; 0x40
 800635c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006362:	f043 0204 	orr.w	r2, r3, #4
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7ff fd4a 	bl	8005e04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006370:	bf00      	nop
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006388:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <__NVIC_SetPriorityGrouping+0x44>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006394:	4013      	ands	r3, r2
 8006396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80063a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063aa:	4a04      	ldr	r2, [pc, #16]	; (80063bc <__NVIC_SetPriorityGrouping+0x44>)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	60d3      	str	r3, [r2, #12]
}
 80063b0:	bf00      	nop
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	e000ed00 	.word	0xe000ed00

080063c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063c4:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <__NVIC_GetPriorityGrouping+0x18>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	0a1b      	lsrs	r3, r3, #8
 80063ca:	f003 0307 	and.w	r3, r3, #7
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	e000ed00 	.word	0xe000ed00

080063dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	db0b      	blt.n	8006406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063ee:	79fb      	ldrb	r3, [r7, #7]
 80063f0:	f003 021f 	and.w	r2, r3, #31
 80063f4:	4907      	ldr	r1, [pc, #28]	; (8006414 <__NVIC_EnableIRQ+0x38>)
 80063f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	2001      	movs	r0, #1
 80063fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	e000e100 	.word	0xe000e100

08006418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	6039      	str	r1, [r7, #0]
 8006422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006428:	2b00      	cmp	r3, #0
 800642a:	db0a      	blt.n	8006442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	b2da      	uxtb	r2, r3
 8006430:	490c      	ldr	r1, [pc, #48]	; (8006464 <__NVIC_SetPriority+0x4c>)
 8006432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006436:	0112      	lsls	r2, r2, #4
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	440b      	add	r3, r1
 800643c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006440:	e00a      	b.n	8006458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	b2da      	uxtb	r2, r3
 8006446:	4908      	ldr	r1, [pc, #32]	; (8006468 <__NVIC_SetPriority+0x50>)
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	3b04      	subs	r3, #4
 8006450:	0112      	lsls	r2, r2, #4
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	440b      	add	r3, r1
 8006456:	761a      	strb	r2, [r3, #24]
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	e000e100 	.word	0xe000e100
 8006468:	e000ed00 	.word	0xe000ed00

0800646c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800646c:	b480      	push	{r7}
 800646e:	b089      	sub	sp, #36	; 0x24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	f1c3 0307 	rsb	r3, r3, #7
 8006486:	2b04      	cmp	r3, #4
 8006488:	bf28      	it	cs
 800648a:	2304      	movcs	r3, #4
 800648c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	3304      	adds	r3, #4
 8006492:	2b06      	cmp	r3, #6
 8006494:	d902      	bls.n	800649c <NVIC_EncodePriority+0x30>
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	3b03      	subs	r3, #3
 800649a:	e000      	b.n	800649e <NVIC_EncodePriority+0x32>
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	43da      	mvns	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	401a      	ands	r2, r3
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	fa01 f303 	lsl.w	r3, r1, r3
 80064be:	43d9      	mvns	r1, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064c4:	4313      	orrs	r3, r2
         );
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3724      	adds	r7, #36	; 0x24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
	...

080064d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3b01      	subs	r3, #1
 80064e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064e4:	d301      	bcc.n	80064ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064e6:	2301      	movs	r3, #1
 80064e8:	e00f      	b.n	800650a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064ea:	4a0a      	ldr	r2, [pc, #40]	; (8006514 <SysTick_Config+0x40>)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064f2:	210f      	movs	r1, #15
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064f8:	f7ff ff8e 	bl	8006418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064fc:	4b05      	ldr	r3, [pc, #20]	; (8006514 <SysTick_Config+0x40>)
 80064fe:	2200      	movs	r2, #0
 8006500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006502:	4b04      	ldr	r3, [pc, #16]	; (8006514 <SysTick_Config+0x40>)
 8006504:	2207      	movs	r2, #7
 8006506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	e000e010 	.word	0xe000e010

08006518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7ff ff29 	bl	8006378 <__NVIC_SetPriorityGrouping>
}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800652e:	b580      	push	{r7, lr}
 8006530:	b086      	sub	sp, #24
 8006532:	af00      	add	r7, sp, #0
 8006534:	4603      	mov	r3, r0
 8006536:	60b9      	str	r1, [r7, #8]
 8006538:	607a      	str	r2, [r7, #4]
 800653a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006540:	f7ff ff3e 	bl	80063c0 <__NVIC_GetPriorityGrouping>
 8006544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	6978      	ldr	r0, [r7, #20]
 800654c:	f7ff ff8e 	bl	800646c <NVIC_EncodePriority>
 8006550:	4602      	mov	r2, r0
 8006552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006556:	4611      	mov	r1, r2
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff ff5d 	bl	8006418 <__NVIC_SetPriority>
}
 800655e:	bf00      	nop
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b082      	sub	sp, #8
 800656a:	af00      	add	r7, sp, #0
 800656c:	4603      	mov	r3, r0
 800656e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff ff31 	bl	80063dc <__NVIC_EnableIRQ>
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7ff ffa2 	bl	80064d4 <SysTick_Config>
 8006590:	4603      	mov	r3, r0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80065a8:	f7ff fab8 	bl	8005b1c <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e099      	b.n	80066ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065d8:	e00f      	b.n	80065fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065da:	f7ff fa9f 	bl	8005b1c <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b05      	cmp	r3, #5
 80065e6:	d908      	bls.n	80065fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2203      	movs	r2, #3
 80065f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e078      	b.n	80066ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e8      	bne.n	80065da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4b38      	ldr	r3, [pc, #224]	; (80066f4 <HAL_DMA_Init+0x158>)
 8006614:	4013      	ands	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006626:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006632:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800663e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	2b04      	cmp	r3, #4
 8006652:	d107      	bne.n	8006664 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665c:	4313      	orrs	r3, r2
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 0307 	bic.w	r3, r3, #7
 800667a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	2b04      	cmp	r3, #4
 800668c:	d117      	bne.n	80066be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00e      	beq.n	80066be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fb01 	bl	8006ca8 <DMA_CheckFifoParam>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2240      	movs	r2, #64	; 0x40
 80066b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80066ba:	2301      	movs	r3, #1
 80066bc:	e016      	b.n	80066ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fab8 	bl	8006c3c <DMA_CalcBaseAndBitshift>
 80066cc:	4603      	mov	r3, r0
 80066ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d4:	223f      	movs	r2, #63	; 0x3f
 80066d6:	409a      	lsls	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	f010803f 	.word	0xf010803f

080066f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_DMA_Start_IT+0x26>
 800671a:	2302      	movs	r3, #2
 800671c:	e040      	b.n	80067a0 <HAL_DMA_Start_IT+0xa8>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b01      	cmp	r3, #1
 8006730:	d12f      	bne.n	8006792 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2202      	movs	r2, #2
 8006736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 fa4a 	bl	8006be0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006750:	223f      	movs	r2, #63	; 0x3f
 8006752:	409a      	lsls	r2, r3
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0216 	orr.w	r2, r2, #22
 8006766:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	d007      	beq.n	8006780 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0208 	orr.w	r2, r2, #8
 800677e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0201 	orr.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	e005      	b.n	800679e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800679a:	2302      	movs	r3, #2
 800679c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800679e:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80067b6:	f7ff f9b1 	bl	8005b1c <HAL_GetTick>
 80067ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d008      	beq.n	80067da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2280      	movs	r2, #128	; 0x80
 80067cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e052      	b.n	8006880 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0216 	bic.w	r2, r2, #22
 80067e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695a      	ldr	r2, [r3, #20]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d103      	bne.n	800680a <HAL_DMA_Abort+0x62>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006806:	2b00      	cmp	r3, #0
 8006808:	d007      	beq.n	800681a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0208 	bic.w	r2, r2, #8
 8006818:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0201 	bic.w	r2, r2, #1
 8006828:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800682a:	e013      	b.n	8006854 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800682c:	f7ff f976 	bl	8005b1c <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b05      	cmp	r3, #5
 8006838:	d90c      	bls.n	8006854 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2203      	movs	r2, #3
 8006844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e015      	b.n	8006880 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e4      	bne.n	800682c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006866:	223f      	movs	r2, #63	; 0x3f
 8006868:	409a      	lsls	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d004      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2280      	movs	r2, #128	; 0x80
 80068a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e00c      	b.n	80068c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2205      	movs	r2, #5
 80068aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0201 	bic.w	r2, r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80068d8:	4b8e      	ldr	r3, [pc, #568]	; (8006b14 <HAL_DMA_IRQHandler+0x248>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a8e      	ldr	r2, [pc, #568]	; (8006b18 <HAL_DMA_IRQHandler+0x24c>)
 80068de:	fba2 2303 	umull	r2, r3, r2, r3
 80068e2:	0a9b      	lsrs	r3, r3, #10
 80068e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f6:	2208      	movs	r2, #8
 80068f8:	409a      	lsls	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4013      	ands	r3, r2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01a      	beq.n	8006938 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d013      	beq.n	8006938 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0204 	bic.w	r2, r2, #4
 800691e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	2208      	movs	r2, #8
 8006926:	409a      	lsls	r2, r3
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006930:	f043 0201 	orr.w	r2, r3, #1
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693c:	2201      	movs	r2, #1
 800693e:	409a      	lsls	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4013      	ands	r3, r2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d012      	beq.n	800696e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695a:	2201      	movs	r2, #1
 800695c:	409a      	lsls	r2, r3
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006966:	f043 0202 	orr.w	r2, r3, #2
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006972:	2204      	movs	r2, #4
 8006974:	409a      	lsls	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4013      	ands	r3, r2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d012      	beq.n	80069a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006990:	2204      	movs	r2, #4
 8006992:	409a      	lsls	r2, r3
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699c:	f043 0204 	orr.w	r2, r3, #4
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a8:	2210      	movs	r2, #16
 80069aa:	409a      	lsls	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4013      	ands	r3, r2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d043      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d03c      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c6:	2210      	movs	r2, #16
 80069c8:	409a      	lsls	r2, r3
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d018      	beq.n	8006a0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d108      	bne.n	80069fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d024      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	4798      	blx	r3
 80069fa:	e01f      	b.n	8006a3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01b      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
 8006a0c:	e016      	b.n	8006a3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d107      	bne.n	8006a2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0208 	bic.w	r2, r2, #8
 8006a2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a40:	2220      	movs	r2, #32
 8006a42:	409a      	lsls	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4013      	ands	r3, r2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 808f 	beq.w	8006b6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0310 	and.w	r3, r3, #16
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8087 	beq.w	8006b6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a62:	2220      	movs	r2, #32
 8006a64:	409a      	lsls	r2, r3
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b05      	cmp	r3, #5
 8006a74:	d136      	bne.n	8006ae4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0216 	bic.w	r2, r2, #22
 8006a84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695a      	ldr	r2, [r3, #20]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d103      	bne.n	8006aa6 <HAL_DMA_IRQHandler+0x1da>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0208 	bic.w	r2, r2, #8
 8006ab4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aba:	223f      	movs	r2, #63	; 0x3f
 8006abc:	409a      	lsls	r2, r3
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d07e      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
        }
        return;
 8006ae2:	e079      	b.n	8006bd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d01d      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10d      	bne.n	8006b1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d031      	beq.n	8006b6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4798      	blx	r3
 8006b10:	e02c      	b.n	8006b6c <HAL_DMA_IRQHandler+0x2a0>
 8006b12:	bf00      	nop
 8006b14:	20000194 	.word	0x20000194
 8006b18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d023      	beq.n	8006b6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
 8006b2c:	e01e      	b.n	8006b6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10f      	bne.n	8006b5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0210 	bic.w	r2, r2, #16
 8006b4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d032      	beq.n	8006bda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d022      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2205      	movs	r2, #5
 8006b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0201 	bic.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	60bb      	str	r3, [r7, #8]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d307      	bcc.n	8006bb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f2      	bne.n	8006b98 <HAL_DMA_IRQHandler+0x2cc>
 8006bb2:	e000      	b.n	8006bb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006bb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d005      	beq.n	8006bda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
 8006bd6:	e000      	b.n	8006bda <HAL_DMA_IRQHandler+0x30e>
        return;
 8006bd8:	bf00      	nop
    }
  }
}
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b40      	cmp	r3, #64	; 0x40
 8006c0c:	d108      	bne.n	8006c20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c1e:	e007      	b.n	8006c30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	60da      	str	r2, [r3, #12]
}
 8006c30:	bf00      	nop
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	3b10      	subs	r3, #16
 8006c4c:	4a14      	ldr	r2, [pc, #80]	; (8006ca0 <DMA_CalcBaseAndBitshift+0x64>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	091b      	lsrs	r3, r3, #4
 8006c54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c56:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d909      	bls.n	8006c7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	1d1a      	adds	r2, r3, #4
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	659a      	str	r2, [r3, #88]	; 0x58
 8006c7c:	e007      	b.n	8006c8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	aaaaaaab 	.word	0xaaaaaaab
 8006ca4:	0800c430 	.word	0x0800c430

08006ca8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d11f      	bne.n	8006d02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d856      	bhi.n	8006d76 <DMA_CheckFifoParam+0xce>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <DMA_CheckFifoParam+0x28>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006ce1 	.word	0x08006ce1
 8006cd4:	08006cf3 	.word	0x08006cf3
 8006cd8:	08006ce1 	.word	0x08006ce1
 8006cdc:	08006d77 	.word	0x08006d77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d046      	beq.n	8006d7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cf0:	e043      	b.n	8006d7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cfa:	d140      	bne.n	8006d7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d00:	e03d      	b.n	8006d7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0a:	d121      	bne.n	8006d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d837      	bhi.n	8006d82 <DMA_CheckFifoParam+0xda>
 8006d12:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <DMA_CheckFifoParam+0x70>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d29 	.word	0x08006d29
 8006d1c:	08006d2f 	.word	0x08006d2f
 8006d20:	08006d29 	.word	0x08006d29
 8006d24:	08006d41 	.word	0x08006d41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d2c:	e030      	b.n	8006d90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d025      	beq.n	8006d86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d3e:	e022      	b.n	8006d86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d48:	d11f      	bne.n	8006d8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d4e:	e01c      	b.n	8006d8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d903      	bls.n	8006d5e <DMA_CheckFifoParam+0xb6>
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d003      	beq.n	8006d64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d5c:	e018      	b.n	8006d90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	73fb      	strb	r3, [r7, #15]
      break;
 8006d62:	e015      	b.n	8006d90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00e      	beq.n	8006d8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	73fb      	strb	r3, [r7, #15]
      break;
 8006d74:	e00b      	b.n	8006d8e <DMA_CheckFifoParam+0xe6>
      break;
 8006d76:	bf00      	nop
 8006d78:	e00a      	b.n	8006d90 <DMA_CheckFifoParam+0xe8>
      break;
 8006d7a:	bf00      	nop
 8006d7c:	e008      	b.n	8006d90 <DMA_CheckFifoParam+0xe8>
      break;
 8006d7e:	bf00      	nop
 8006d80:	e006      	b.n	8006d90 <DMA_CheckFifoParam+0xe8>
      break;
 8006d82:	bf00      	nop
 8006d84:	e004      	b.n	8006d90 <DMA_CheckFifoParam+0xe8>
      break;
 8006d86:	bf00      	nop
 8006d88:	e002      	b.n	8006d90 <DMA_CheckFifoParam+0xe8>
      break;   
 8006d8a:	bf00      	nop
 8006d8c:	e000      	b.n	8006d90 <DMA_CheckFifoParam+0xe8>
      break;
 8006d8e:	bf00      	nop
    }
  } 
  
  return status; 
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop

08006da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b089      	sub	sp, #36	; 0x24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006db6:	2300      	movs	r3, #0
 8006db8:	61fb      	str	r3, [r7, #28]
 8006dba:	e165      	b.n	8007088 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	f040 8154 	bne.w	8007082 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d005      	beq.n	8006df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d130      	bne.n	8006e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	43db      	mvns	r3, r3
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	4013      	ands	r3, r2
 8006e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e28:	2201      	movs	r2, #1
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e30:	43db      	mvns	r3, r3
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	4013      	ands	r3, r2
 8006e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	091b      	lsrs	r3, r3, #4
 8006e3e:	f003 0201 	and.w	r2, r3, #1
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f003 0303 	and.w	r3, r3, #3
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d017      	beq.n	8006e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e70:	43db      	mvns	r3, r3
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	4013      	ands	r3, r2
 8006e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	fa02 f303 	lsl.w	r3, r2, r3
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d123      	bne.n	8006ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	08da      	lsrs	r2, r3, #3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3208      	adds	r2, #8
 8006ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	220f      	movs	r2, #15
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	08da      	lsrs	r2, r3, #3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3208      	adds	r2, #8
 8006ede:	69b9      	ldr	r1, [r7, #24]
 8006ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	2203      	movs	r2, #3
 8006ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f003 0203 	and.w	r2, r3, #3
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 80ae 	beq.w	8007082 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	4b5d      	ldr	r3, [pc, #372]	; (80070a0 <HAL_GPIO_Init+0x300>)
 8006f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2e:	4a5c      	ldr	r2, [pc, #368]	; (80070a0 <HAL_GPIO_Init+0x300>)
 8006f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f34:	6453      	str	r3, [r2, #68]	; 0x44
 8006f36:	4b5a      	ldr	r3, [pc, #360]	; (80070a0 <HAL_GPIO_Init+0x300>)
 8006f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f42:	4a58      	ldr	r2, [pc, #352]	; (80070a4 <HAL_GPIO_Init+0x304>)
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	089b      	lsrs	r3, r3, #2
 8006f48:	3302      	adds	r3, #2
 8006f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	220f      	movs	r2, #15
 8006f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5e:	43db      	mvns	r3, r3
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	4013      	ands	r3, r2
 8006f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a4f      	ldr	r2, [pc, #316]	; (80070a8 <HAL_GPIO_Init+0x308>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d025      	beq.n	8006fba <HAL_GPIO_Init+0x21a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a4e      	ldr	r2, [pc, #312]	; (80070ac <HAL_GPIO_Init+0x30c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d01f      	beq.n	8006fb6 <HAL_GPIO_Init+0x216>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a4d      	ldr	r2, [pc, #308]	; (80070b0 <HAL_GPIO_Init+0x310>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d019      	beq.n	8006fb2 <HAL_GPIO_Init+0x212>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a4c      	ldr	r2, [pc, #304]	; (80070b4 <HAL_GPIO_Init+0x314>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d013      	beq.n	8006fae <HAL_GPIO_Init+0x20e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a4b      	ldr	r2, [pc, #300]	; (80070b8 <HAL_GPIO_Init+0x318>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00d      	beq.n	8006faa <HAL_GPIO_Init+0x20a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a4a      	ldr	r2, [pc, #296]	; (80070bc <HAL_GPIO_Init+0x31c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d007      	beq.n	8006fa6 <HAL_GPIO_Init+0x206>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a49      	ldr	r2, [pc, #292]	; (80070c0 <HAL_GPIO_Init+0x320>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d101      	bne.n	8006fa2 <HAL_GPIO_Init+0x202>
 8006f9e:	2306      	movs	r3, #6
 8006fa0:	e00c      	b.n	8006fbc <HAL_GPIO_Init+0x21c>
 8006fa2:	2307      	movs	r3, #7
 8006fa4:	e00a      	b.n	8006fbc <HAL_GPIO_Init+0x21c>
 8006fa6:	2305      	movs	r3, #5
 8006fa8:	e008      	b.n	8006fbc <HAL_GPIO_Init+0x21c>
 8006faa:	2304      	movs	r3, #4
 8006fac:	e006      	b.n	8006fbc <HAL_GPIO_Init+0x21c>
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e004      	b.n	8006fbc <HAL_GPIO_Init+0x21c>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e002      	b.n	8006fbc <HAL_GPIO_Init+0x21c>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e000      	b.n	8006fbc <HAL_GPIO_Init+0x21c>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	f002 0203 	and.w	r2, r2, #3
 8006fc2:	0092      	lsls	r2, r2, #2
 8006fc4:	4093      	lsls	r3, r2
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fcc:	4935      	ldr	r1, [pc, #212]	; (80070a4 <HAL_GPIO_Init+0x304>)
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	089b      	lsrs	r3, r3, #2
 8006fd2:	3302      	adds	r3, #2
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006fda:	4b3a      	ldr	r3, [pc, #232]	; (80070c4 <HAL_GPIO_Init+0x324>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	43db      	mvns	r3, r3
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ffe:	4a31      	ldr	r2, [pc, #196]	; (80070c4 <HAL_GPIO_Init+0x324>)
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007004:	4b2f      	ldr	r3, [pc, #188]	; (80070c4 <HAL_GPIO_Init+0x324>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	43db      	mvns	r3, r3
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	4013      	ands	r3, r2
 8007012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007028:	4a26      	ldr	r2, [pc, #152]	; (80070c4 <HAL_GPIO_Init+0x324>)
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800702e:	4b25      	ldr	r3, [pc, #148]	; (80070c4 <HAL_GPIO_Init+0x324>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	43db      	mvns	r3, r3
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	4013      	ands	r3, r2
 800703c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007052:	4a1c      	ldr	r2, [pc, #112]	; (80070c4 <HAL_GPIO_Init+0x324>)
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007058:	4b1a      	ldr	r3, [pc, #104]	; (80070c4 <HAL_GPIO_Init+0x324>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	43db      	mvns	r3, r3
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	4013      	ands	r3, r2
 8007066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	4313      	orrs	r3, r2
 800707a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800707c:	4a11      	ldr	r2, [pc, #68]	; (80070c4 <HAL_GPIO_Init+0x324>)
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	3301      	adds	r3, #1
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	2b0f      	cmp	r3, #15
 800708c:	f67f ae96 	bls.w	8006dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	3724      	adds	r7, #36	; 0x24
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	40023800 	.word	0x40023800
 80070a4:	40013800 	.word	0x40013800
 80070a8:	40020000 	.word	0x40020000
 80070ac:	40020400 	.word	0x40020400
 80070b0:	40020800 	.word	0x40020800
 80070b4:	40020c00 	.word	0x40020c00
 80070b8:	40021000 	.word	0x40021000
 80070bc:	40021400 	.word	0x40021400
 80070c0:	40021800 	.word	0x40021800
 80070c4:	40013c00 	.word	0x40013c00

080070c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	887b      	ldrh	r3, [r7, #2]
 80070da:	4013      	ands	r3, r2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80070e0:	2301      	movs	r3, #1
 80070e2:	73fb      	strb	r3, [r7, #15]
 80070e4:	e001      	b.n	80070ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80070e6:	2300      	movs	r3, #0
 80070e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	807b      	strh	r3, [r7, #2]
 8007104:	4613      	mov	r3, r2
 8007106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007108:	787b      	ldrb	r3, [r7, #1]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800710e:	887a      	ldrh	r2, [r7, #2]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007114:	e003      	b.n	800711e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007116:	887b      	ldrh	r3, [r7, #2]
 8007118:	041a      	lsls	r2, r3, #16
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	619a      	str	r2, [r3, #24]
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
	...

0800712c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007136:	4b08      	ldr	r3, [pc, #32]	; (8007158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007138:	695a      	ldr	r2, [r3, #20]
 800713a:	88fb      	ldrh	r3, [r7, #6]
 800713c:	4013      	ands	r3, r2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d006      	beq.n	8007150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007142:	4a05      	ldr	r2, [pc, #20]	; (8007158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007148:	88fb      	ldrh	r3, [r7, #6]
 800714a:	4618      	mov	r0, r3
 800714c:	f7fc ff52 	bl	8003ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	40013c00 	.word	0x40013c00

0800715c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0cc      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007170:	4b68      	ldr	r3, [pc, #416]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d90c      	bls.n	8007198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800717e:	4b65      	ldr	r3, [pc, #404]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007186:	4b63      	ldr	r3, [pc, #396]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d001      	beq.n	8007198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e0b8      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d020      	beq.n	80071e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071b0:	4b59      	ldr	r3, [pc, #356]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	4a58      	ldr	r2, [pc, #352]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80071ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071c8:	4b53      	ldr	r3, [pc, #332]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	4a52      	ldr	r2, [pc, #328]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80071d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071d4:	4b50      	ldr	r3, [pc, #320]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	494d      	ldr	r1, [pc, #308]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d044      	beq.n	800727c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d107      	bne.n	800720a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071fa:	4b47      	ldr	r3, [pc, #284]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d119      	bne.n	800723a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e07f      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d003      	beq.n	800721a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007216:	2b03      	cmp	r3, #3
 8007218:	d107      	bne.n	800722a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800721a:	4b3f      	ldr	r3, [pc, #252]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d109      	bne.n	800723a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e06f      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800722a:	4b3b      	ldr	r3, [pc, #236]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e067      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800723a:	4b37      	ldr	r3, [pc, #220]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f023 0203 	bic.w	r2, r3, #3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	4934      	ldr	r1, [pc, #208]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 8007248:	4313      	orrs	r3, r2
 800724a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800724c:	f7fe fc66 	bl	8005b1c <HAL_GetTick>
 8007250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007252:	e00a      	b.n	800726a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007254:	f7fe fc62 	bl	8005b1c <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007262:	4293      	cmp	r3, r2
 8007264:	d901      	bls.n	800726a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e04f      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800726a:	4b2b      	ldr	r3, [pc, #172]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 020c 	and.w	r2, r3, #12
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	429a      	cmp	r2, r3
 800727a:	d1eb      	bne.n	8007254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800727c:	4b25      	ldr	r3, [pc, #148]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 030f 	and.w	r3, r3, #15
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	429a      	cmp	r2, r3
 8007288:	d20c      	bcs.n	80072a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800728a:	4b22      	ldr	r3, [pc, #136]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007292:	4b20      	ldr	r3, [pc, #128]	; (8007314 <HAL_RCC_ClockConfig+0x1b8>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 030f 	and.w	r3, r3, #15
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d001      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e032      	b.n	800730a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d008      	beq.n	80072c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072b0:	4b19      	ldr	r3, [pc, #100]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	4916      	ldr	r1, [pc, #88]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072ce:	4b12      	ldr	r3, [pc, #72]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	490e      	ldr	r1, [pc, #56]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072e2:	f000 f855 	bl	8007390 <HAL_RCC_GetSysClockFreq>
 80072e6:	4602      	mov	r2, r0
 80072e8:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <HAL_RCC_ClockConfig+0x1bc>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	091b      	lsrs	r3, r3, #4
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	490a      	ldr	r1, [pc, #40]	; (800731c <HAL_RCC_ClockConfig+0x1c0>)
 80072f4:	5ccb      	ldrb	r3, [r1, r3]
 80072f6:	fa22 f303 	lsr.w	r3, r2, r3
 80072fa:	4a09      	ldr	r2, [pc, #36]	; (8007320 <HAL_RCC_ClockConfig+0x1c4>)
 80072fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <HAL_RCC_ClockConfig+0x1c8>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe fbc6 	bl	8005a94 <HAL_InitTick>

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	40023c00 	.word	0x40023c00
 8007318:	40023800 	.word	0x40023800
 800731c:	0800c418 	.word	0x0800c418
 8007320:	20000194 	.word	0x20000194
 8007324:	20000198 	.word	0x20000198

08007328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007328:	b480      	push	{r7}
 800732a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800732c:	4b03      	ldr	r3, [pc, #12]	; (800733c <HAL_RCC_GetHCLKFreq+0x14>)
 800732e:	681b      	ldr	r3, [r3, #0]
}
 8007330:	4618      	mov	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	20000194 	.word	0x20000194

08007340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007344:	f7ff fff0 	bl	8007328 <HAL_RCC_GetHCLKFreq>
 8007348:	4602      	mov	r2, r0
 800734a:	4b05      	ldr	r3, [pc, #20]	; (8007360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	0a9b      	lsrs	r3, r3, #10
 8007350:	f003 0307 	and.w	r3, r3, #7
 8007354:	4903      	ldr	r1, [pc, #12]	; (8007364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007356:	5ccb      	ldrb	r3, [r1, r3]
 8007358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800735c:	4618      	mov	r0, r3
 800735e:	bd80      	pop	{r7, pc}
 8007360:	40023800 	.word	0x40023800
 8007364:	0800c428 	.word	0x0800c428

08007368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800736c:	f7ff ffdc 	bl	8007328 <HAL_RCC_GetHCLKFreq>
 8007370:	4602      	mov	r2, r0
 8007372:	4b05      	ldr	r3, [pc, #20]	; (8007388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	0b5b      	lsrs	r3, r3, #13
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	4903      	ldr	r1, [pc, #12]	; (800738c <HAL_RCC_GetPCLK2Freq+0x24>)
 800737e:	5ccb      	ldrb	r3, [r1, r3]
 8007380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007384:	4618      	mov	r0, r3
 8007386:	bd80      	pop	{r7, pc}
 8007388:	40023800 	.word	0x40023800
 800738c:	0800c428 	.word	0x0800c428

08007390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007394:	b0ae      	sub	sp, #184	; 0xb8
 8007396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073b6:	4bcb      	ldr	r3, [pc, #812]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 030c 	and.w	r3, r3, #12
 80073be:	2b0c      	cmp	r3, #12
 80073c0:	f200 8206 	bhi.w	80077d0 <HAL_RCC_GetSysClockFreq+0x440>
 80073c4:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	08007401 	.word	0x08007401
 80073d0:	080077d1 	.word	0x080077d1
 80073d4:	080077d1 	.word	0x080077d1
 80073d8:	080077d1 	.word	0x080077d1
 80073dc:	08007409 	.word	0x08007409
 80073e0:	080077d1 	.word	0x080077d1
 80073e4:	080077d1 	.word	0x080077d1
 80073e8:	080077d1 	.word	0x080077d1
 80073ec:	08007411 	.word	0x08007411
 80073f0:	080077d1 	.word	0x080077d1
 80073f4:	080077d1 	.word	0x080077d1
 80073f8:	080077d1 	.word	0x080077d1
 80073fc:	08007601 	.word	0x08007601
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007400:	4bb9      	ldr	r3, [pc, #740]	; (80076e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007406:	e1e7      	b.n	80077d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007408:	4bb8      	ldr	r3, [pc, #736]	; (80076ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800740a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800740e:	e1e3      	b.n	80077d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007410:	4bb4      	ldr	r3, [pc, #720]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800741c:	4bb1      	ldr	r3, [pc, #708]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d071      	beq.n	800750c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007428:	4bae      	ldr	r3, [pc, #696]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	099b      	lsrs	r3, r3, #6
 800742e:	2200      	movs	r2, #0
 8007430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007434:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800743c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007444:	2300      	movs	r3, #0
 8007446:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800744a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800744e:	4622      	mov	r2, r4
 8007450:	462b      	mov	r3, r5
 8007452:	f04f 0000 	mov.w	r0, #0
 8007456:	f04f 0100 	mov.w	r1, #0
 800745a:	0159      	lsls	r1, r3, #5
 800745c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007460:	0150      	lsls	r0, r2, #5
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4621      	mov	r1, r4
 8007468:	1a51      	subs	r1, r2, r1
 800746a:	6439      	str	r1, [r7, #64]	; 0x40
 800746c:	4629      	mov	r1, r5
 800746e:	eb63 0301 	sbc.w	r3, r3, r1
 8007472:	647b      	str	r3, [r7, #68]	; 0x44
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007480:	4649      	mov	r1, r9
 8007482:	018b      	lsls	r3, r1, #6
 8007484:	4641      	mov	r1, r8
 8007486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800748a:	4641      	mov	r1, r8
 800748c:	018a      	lsls	r2, r1, #6
 800748e:	4641      	mov	r1, r8
 8007490:	1a51      	subs	r1, r2, r1
 8007492:	63b9      	str	r1, [r7, #56]	; 0x38
 8007494:	4649      	mov	r1, r9
 8007496:	eb63 0301 	sbc.w	r3, r3, r1
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800749c:	f04f 0200 	mov.w	r2, #0
 80074a0:	f04f 0300 	mov.w	r3, #0
 80074a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80074a8:	4649      	mov	r1, r9
 80074aa:	00cb      	lsls	r3, r1, #3
 80074ac:	4641      	mov	r1, r8
 80074ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074b2:	4641      	mov	r1, r8
 80074b4:	00ca      	lsls	r2, r1, #3
 80074b6:	4610      	mov	r0, r2
 80074b8:	4619      	mov	r1, r3
 80074ba:	4603      	mov	r3, r0
 80074bc:	4622      	mov	r2, r4
 80074be:	189b      	adds	r3, r3, r2
 80074c0:	633b      	str	r3, [r7, #48]	; 0x30
 80074c2:	462b      	mov	r3, r5
 80074c4:	460a      	mov	r2, r1
 80074c6:	eb42 0303 	adc.w	r3, r2, r3
 80074ca:	637b      	str	r3, [r7, #52]	; 0x34
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80074d8:	4629      	mov	r1, r5
 80074da:	024b      	lsls	r3, r1, #9
 80074dc:	4621      	mov	r1, r4
 80074de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074e2:	4621      	mov	r1, r4
 80074e4:	024a      	lsls	r2, r1, #9
 80074e6:	4610      	mov	r0, r2
 80074e8:	4619      	mov	r1, r3
 80074ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80074fc:	f7f9 fb40 	bl	8000b80 <__aeabi_uldivmod>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4613      	mov	r3, r2
 8007506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800750a:	e067      	b.n	80075dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800750c:	4b75      	ldr	r3, [pc, #468]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	099b      	lsrs	r3, r3, #6
 8007512:	2200      	movs	r2, #0
 8007514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007518:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800751c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007524:	67bb      	str	r3, [r7, #120]	; 0x78
 8007526:	2300      	movs	r3, #0
 8007528:	67fb      	str	r3, [r7, #124]	; 0x7c
 800752a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800752e:	4622      	mov	r2, r4
 8007530:	462b      	mov	r3, r5
 8007532:	f04f 0000 	mov.w	r0, #0
 8007536:	f04f 0100 	mov.w	r1, #0
 800753a:	0159      	lsls	r1, r3, #5
 800753c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007540:	0150      	lsls	r0, r2, #5
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4621      	mov	r1, r4
 8007548:	1a51      	subs	r1, r2, r1
 800754a:	62b9      	str	r1, [r7, #40]	; 0x28
 800754c:	4629      	mov	r1, r5
 800754e:	eb63 0301 	sbc.w	r3, r3, r1
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007554:	f04f 0200 	mov.w	r2, #0
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007560:	4649      	mov	r1, r9
 8007562:	018b      	lsls	r3, r1, #6
 8007564:	4641      	mov	r1, r8
 8007566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800756a:	4641      	mov	r1, r8
 800756c:	018a      	lsls	r2, r1, #6
 800756e:	4641      	mov	r1, r8
 8007570:	ebb2 0a01 	subs.w	sl, r2, r1
 8007574:	4649      	mov	r1, r9
 8007576:	eb63 0b01 	sbc.w	fp, r3, r1
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	f04f 0300 	mov.w	r3, #0
 8007582:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007586:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800758a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800758e:	4692      	mov	sl, r2
 8007590:	469b      	mov	fp, r3
 8007592:	4623      	mov	r3, r4
 8007594:	eb1a 0303 	adds.w	r3, sl, r3
 8007598:	623b      	str	r3, [r7, #32]
 800759a:	462b      	mov	r3, r5
 800759c:	eb4b 0303 	adc.w	r3, fp, r3
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80075ae:	4629      	mov	r1, r5
 80075b0:	028b      	lsls	r3, r1, #10
 80075b2:	4621      	mov	r1, r4
 80075b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075b8:	4621      	mov	r1, r4
 80075ba:	028a      	lsls	r2, r1, #10
 80075bc:	4610      	mov	r0, r2
 80075be:	4619      	mov	r1, r3
 80075c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075c4:	2200      	movs	r2, #0
 80075c6:	673b      	str	r3, [r7, #112]	; 0x70
 80075c8:	677a      	str	r2, [r7, #116]	; 0x74
 80075ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80075ce:	f7f9 fad7 	bl	8000b80 <__aeabi_uldivmod>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4613      	mov	r3, r2
 80075d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075dc:	4b41      	ldr	r3, [pc, #260]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	0c1b      	lsrs	r3, r3, #16
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	3301      	adds	r3, #1
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80075ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80075fe:	e0eb      	b.n	80077d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007600:	4b38      	ldr	r3, [pc, #224]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800760c:	4b35      	ldr	r3, [pc, #212]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d06b      	beq.n	80076f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007618:	4b32      	ldr	r3, [pc, #200]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	099b      	lsrs	r3, r3, #6
 800761e:	2200      	movs	r2, #0
 8007620:	66bb      	str	r3, [r7, #104]	; 0x68
 8007622:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762a:	663b      	str	r3, [r7, #96]	; 0x60
 800762c:	2300      	movs	r3, #0
 800762e:	667b      	str	r3, [r7, #100]	; 0x64
 8007630:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007634:	4622      	mov	r2, r4
 8007636:	462b      	mov	r3, r5
 8007638:	f04f 0000 	mov.w	r0, #0
 800763c:	f04f 0100 	mov.w	r1, #0
 8007640:	0159      	lsls	r1, r3, #5
 8007642:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007646:	0150      	lsls	r0, r2, #5
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4621      	mov	r1, r4
 800764e:	1a51      	subs	r1, r2, r1
 8007650:	61b9      	str	r1, [r7, #24]
 8007652:	4629      	mov	r1, r5
 8007654:	eb63 0301 	sbc.w	r3, r3, r1
 8007658:	61fb      	str	r3, [r7, #28]
 800765a:	f04f 0200 	mov.w	r2, #0
 800765e:	f04f 0300 	mov.w	r3, #0
 8007662:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007666:	4659      	mov	r1, fp
 8007668:	018b      	lsls	r3, r1, #6
 800766a:	4651      	mov	r1, sl
 800766c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007670:	4651      	mov	r1, sl
 8007672:	018a      	lsls	r2, r1, #6
 8007674:	4651      	mov	r1, sl
 8007676:	ebb2 0801 	subs.w	r8, r2, r1
 800767a:	4659      	mov	r1, fp
 800767c:	eb63 0901 	sbc.w	r9, r3, r1
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800768c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007690:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007694:	4690      	mov	r8, r2
 8007696:	4699      	mov	r9, r3
 8007698:	4623      	mov	r3, r4
 800769a:	eb18 0303 	adds.w	r3, r8, r3
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	462b      	mov	r3, r5
 80076a2:	eb49 0303 	adc.w	r3, r9, r3
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	f04f 0200 	mov.w	r2, #0
 80076ac:	f04f 0300 	mov.w	r3, #0
 80076b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80076b4:	4629      	mov	r1, r5
 80076b6:	024b      	lsls	r3, r1, #9
 80076b8:	4621      	mov	r1, r4
 80076ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80076be:	4621      	mov	r1, r4
 80076c0:	024a      	lsls	r2, r1, #9
 80076c2:	4610      	mov	r0, r2
 80076c4:	4619      	mov	r1, r3
 80076c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076ca:	2200      	movs	r2, #0
 80076cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80076ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80076d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076d4:	f7f9 fa54 	bl	8000b80 <__aeabi_uldivmod>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4613      	mov	r3, r2
 80076de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076e2:	e065      	b.n	80077b0 <HAL_RCC_GetSysClockFreq+0x420>
 80076e4:	40023800 	.word	0x40023800
 80076e8:	00f42400 	.word	0x00f42400
 80076ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076f0:	4b3d      	ldr	r3, [pc, #244]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	099b      	lsrs	r3, r3, #6
 80076f6:	2200      	movs	r2, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	4611      	mov	r1, r2
 80076fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007700:	653b      	str	r3, [r7, #80]	; 0x50
 8007702:	2300      	movs	r3, #0
 8007704:	657b      	str	r3, [r7, #84]	; 0x54
 8007706:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800770a:	4642      	mov	r2, r8
 800770c:	464b      	mov	r3, r9
 800770e:	f04f 0000 	mov.w	r0, #0
 8007712:	f04f 0100 	mov.w	r1, #0
 8007716:	0159      	lsls	r1, r3, #5
 8007718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800771c:	0150      	lsls	r0, r2, #5
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	4641      	mov	r1, r8
 8007724:	1a51      	subs	r1, r2, r1
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	4649      	mov	r1, r9
 800772a:	eb63 0301 	sbc.w	r3, r3, r1
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	f04f 0200 	mov.w	r2, #0
 8007734:	f04f 0300 	mov.w	r3, #0
 8007738:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800773c:	4659      	mov	r1, fp
 800773e:	018b      	lsls	r3, r1, #6
 8007740:	4651      	mov	r1, sl
 8007742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007746:	4651      	mov	r1, sl
 8007748:	018a      	lsls	r2, r1, #6
 800774a:	4651      	mov	r1, sl
 800774c:	1a54      	subs	r4, r2, r1
 800774e:	4659      	mov	r1, fp
 8007750:	eb63 0501 	sbc.w	r5, r3, r1
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	00eb      	lsls	r3, r5, #3
 800775e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007762:	00e2      	lsls	r2, r4, #3
 8007764:	4614      	mov	r4, r2
 8007766:	461d      	mov	r5, r3
 8007768:	4643      	mov	r3, r8
 800776a:	18e3      	adds	r3, r4, r3
 800776c:	603b      	str	r3, [r7, #0]
 800776e:	464b      	mov	r3, r9
 8007770:	eb45 0303 	adc.w	r3, r5, r3
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	f04f 0200 	mov.w	r2, #0
 800777a:	f04f 0300 	mov.w	r3, #0
 800777e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007782:	4629      	mov	r1, r5
 8007784:	028b      	lsls	r3, r1, #10
 8007786:	4621      	mov	r1, r4
 8007788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800778c:	4621      	mov	r1, r4
 800778e:	028a      	lsls	r2, r1, #10
 8007790:	4610      	mov	r0, r2
 8007792:	4619      	mov	r1, r3
 8007794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007798:	2200      	movs	r2, #0
 800779a:	64bb      	str	r3, [r7, #72]	; 0x48
 800779c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800779e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077a2:	f7f9 f9ed 	bl	8000b80 <__aeabi_uldivmod>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4613      	mov	r3, r2
 80077ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80077b0:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	0f1b      	lsrs	r3, r3, #28
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80077be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80077ce:	e003      	b.n	80077d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80077d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80077d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	37b8      	adds	r7, #184	; 0xb8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077e6:	bf00      	nop
 80077e8:	40023800 	.word	0x40023800
 80077ec:	00f42400 	.word	0x00f42400

080077f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e28d      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8083 	beq.w	8007916 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007810:	4b94      	ldr	r3, [pc, #592]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f003 030c 	and.w	r3, r3, #12
 8007818:	2b04      	cmp	r3, #4
 800781a:	d019      	beq.n	8007850 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800781c:	4b91      	ldr	r3, [pc, #580]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007824:	2b08      	cmp	r3, #8
 8007826:	d106      	bne.n	8007836 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007828:	4b8e      	ldr	r3, [pc, #568]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007834:	d00c      	beq.n	8007850 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007836:	4b8b      	ldr	r3, [pc, #556]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800783e:	2b0c      	cmp	r3, #12
 8007840:	d112      	bne.n	8007868 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007842:	4b88      	ldr	r3, [pc, #544]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800784a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800784e:	d10b      	bne.n	8007868 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007850:	4b84      	ldr	r3, [pc, #528]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d05b      	beq.n	8007914 <HAL_RCC_OscConfig+0x124>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d157      	bne.n	8007914 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e25a      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007870:	d106      	bne.n	8007880 <HAL_RCC_OscConfig+0x90>
 8007872:	4b7c      	ldr	r3, [pc, #496]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a7b      	ldr	r2, [pc, #492]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	e01d      	b.n	80078bc <HAL_RCC_OscConfig+0xcc>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007888:	d10c      	bne.n	80078a4 <HAL_RCC_OscConfig+0xb4>
 800788a:	4b76      	ldr	r3, [pc, #472]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a75      	ldr	r2, [pc, #468]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	4b73      	ldr	r3, [pc, #460]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a72      	ldr	r2, [pc, #456]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 800789c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	e00b      	b.n	80078bc <HAL_RCC_OscConfig+0xcc>
 80078a4:	4b6f      	ldr	r3, [pc, #444]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a6e      	ldr	r2, [pc, #440]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 80078aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	4b6c      	ldr	r3, [pc, #432]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a6b      	ldr	r2, [pc, #428]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 80078b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d013      	beq.n	80078ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c4:	f7fe f92a 	bl	8005b1c <HAL_GetTick>
 80078c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ca:	e008      	b.n	80078de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078cc:	f7fe f926 	bl	8005b1c <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b64      	cmp	r3, #100	; 0x64
 80078d8:	d901      	bls.n	80078de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e21f      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078de:	4b61      	ldr	r3, [pc, #388]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d0f0      	beq.n	80078cc <HAL_RCC_OscConfig+0xdc>
 80078ea:	e014      	b.n	8007916 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ec:	f7fe f916 	bl	8005b1c <HAL_GetTick>
 80078f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078f2:	e008      	b.n	8007906 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078f4:	f7fe f912 	bl	8005b1c <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b64      	cmp	r3, #100	; 0x64
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e20b      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007906:	4b57      	ldr	r3, [pc, #348]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1f0      	bne.n	80078f4 <HAL_RCC_OscConfig+0x104>
 8007912:	e000      	b.n	8007916 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d06f      	beq.n	8007a02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007922:	4b50      	ldr	r3, [pc, #320]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 030c 	and.w	r3, r3, #12
 800792a:	2b00      	cmp	r3, #0
 800792c:	d017      	beq.n	800795e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800792e:	4b4d      	ldr	r3, [pc, #308]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007936:	2b08      	cmp	r3, #8
 8007938:	d105      	bne.n	8007946 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800793a:	4b4a      	ldr	r3, [pc, #296]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00b      	beq.n	800795e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007946:	4b47      	ldr	r3, [pc, #284]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800794e:	2b0c      	cmp	r3, #12
 8007950:	d11c      	bne.n	800798c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007952:	4b44      	ldr	r3, [pc, #272]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d116      	bne.n	800798c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800795e:	4b41      	ldr	r3, [pc, #260]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <HAL_RCC_OscConfig+0x186>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d001      	beq.n	8007976 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e1d3      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007976:	4b3b      	ldr	r3, [pc, #236]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	4937      	ldr	r1, [pc, #220]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007986:	4313      	orrs	r3, r2
 8007988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800798a:	e03a      	b.n	8007a02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d020      	beq.n	80079d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007994:	4b34      	ldr	r3, [pc, #208]	; (8007a68 <HAL_RCC_OscConfig+0x278>)
 8007996:	2201      	movs	r2, #1
 8007998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799a:	f7fe f8bf 	bl	8005b1c <HAL_GetTick>
 800799e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079a0:	e008      	b.n	80079b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079a2:	f7fe f8bb 	bl	8005b1c <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e1b4      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079b4:	4b2b      	ldr	r3, [pc, #172]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d0f0      	beq.n	80079a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079c0:	4b28      	ldr	r3, [pc, #160]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	4925      	ldr	r1, [pc, #148]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	600b      	str	r3, [r1, #0]
 80079d4:	e015      	b.n	8007a02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079d6:	4b24      	ldr	r3, [pc, #144]	; (8007a68 <HAL_RCC_OscConfig+0x278>)
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079dc:	f7fe f89e 	bl	8005b1c <HAL_GetTick>
 80079e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079e2:	e008      	b.n	80079f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079e4:	f7fe f89a 	bl	8005b1c <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d901      	bls.n	80079f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e193      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079f6:	4b1b      	ldr	r3, [pc, #108]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f0      	bne.n	80079e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0308 	and.w	r3, r3, #8
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d036      	beq.n	8007a7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d016      	beq.n	8007a44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a16:	4b15      	ldr	r3, [pc, #84]	; (8007a6c <HAL_RCC_OscConfig+0x27c>)
 8007a18:	2201      	movs	r2, #1
 8007a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a1c:	f7fe f87e 	bl	8005b1c <HAL_GetTick>
 8007a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a22:	e008      	b.n	8007a36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a24:	f7fe f87a 	bl	8005b1c <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e173      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a36:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0f0      	beq.n	8007a24 <HAL_RCC_OscConfig+0x234>
 8007a42:	e01b      	b.n	8007a7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a44:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <HAL_RCC_OscConfig+0x27c>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a4a:	f7fe f867 	bl	8005b1c <HAL_GetTick>
 8007a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a50:	e00e      	b.n	8007a70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a52:	f7fe f863 	bl	8005b1c <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d907      	bls.n	8007a70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e15c      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
 8007a64:	40023800 	.word	0x40023800
 8007a68:	42470000 	.word	0x42470000
 8007a6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a70:	4b8a      	ldr	r3, [pc, #552]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1ea      	bne.n	8007a52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8097 	beq.w	8007bb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a8e:	4b83      	ldr	r3, [pc, #524]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10f      	bne.n	8007aba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	4b7f      	ldr	r3, [pc, #508]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	4a7e      	ldr	r2, [pc, #504]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8007aaa:	4b7c      	ldr	r3, [pc, #496]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ab2:	60bb      	str	r3, [r7, #8]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aba:	4b79      	ldr	r3, [pc, #484]	; (8007ca0 <HAL_RCC_OscConfig+0x4b0>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d118      	bne.n	8007af8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ac6:	4b76      	ldr	r3, [pc, #472]	; (8007ca0 <HAL_RCC_OscConfig+0x4b0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a75      	ldr	r2, [pc, #468]	; (8007ca0 <HAL_RCC_OscConfig+0x4b0>)
 8007acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ad2:	f7fe f823 	bl	8005b1c <HAL_GetTick>
 8007ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ad8:	e008      	b.n	8007aec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ada:	f7fe f81f 	bl	8005b1c <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d901      	bls.n	8007aec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e118      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aec:	4b6c      	ldr	r3, [pc, #432]	; (8007ca0 <HAL_RCC_OscConfig+0x4b0>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0f0      	beq.n	8007ada <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d106      	bne.n	8007b0e <HAL_RCC_OscConfig+0x31e>
 8007b00:	4b66      	ldr	r3, [pc, #408]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b04:	4a65      	ldr	r2, [pc, #404]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007b06:	f043 0301 	orr.w	r3, r3, #1
 8007b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b0c:	e01c      	b.n	8007b48 <HAL_RCC_OscConfig+0x358>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	2b05      	cmp	r3, #5
 8007b14:	d10c      	bne.n	8007b30 <HAL_RCC_OscConfig+0x340>
 8007b16:	4b61      	ldr	r3, [pc, #388]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1a:	4a60      	ldr	r2, [pc, #384]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007b1c:	f043 0304 	orr.w	r3, r3, #4
 8007b20:	6713      	str	r3, [r2, #112]	; 0x70
 8007b22:	4b5e      	ldr	r3, [pc, #376]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b26:	4a5d      	ldr	r2, [pc, #372]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007b28:	f043 0301 	orr.w	r3, r3, #1
 8007b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b2e:	e00b      	b.n	8007b48 <HAL_RCC_OscConfig+0x358>
 8007b30:	4b5a      	ldr	r3, [pc, #360]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b34:	4a59      	ldr	r2, [pc, #356]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007b36:	f023 0301 	bic.w	r3, r3, #1
 8007b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b3c:	4b57      	ldr	r3, [pc, #348]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b40:	4a56      	ldr	r2, [pc, #344]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007b42:	f023 0304 	bic.w	r3, r3, #4
 8007b46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d015      	beq.n	8007b7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b50:	f7fd ffe4 	bl	8005b1c <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b56:	e00a      	b.n	8007b6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b58:	f7fd ffe0 	bl	8005b1c <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e0d7      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b6e:	4b4b      	ldr	r3, [pc, #300]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0ee      	beq.n	8007b58 <HAL_RCC_OscConfig+0x368>
 8007b7a:	e014      	b.n	8007ba6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7c:	f7fd ffce 	bl	8005b1c <HAL_GetTick>
 8007b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b82:	e00a      	b.n	8007b9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b84:	f7fd ffca 	bl	8005b1c <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e0c1      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b9a:	4b40      	ldr	r3, [pc, #256]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1ee      	bne.n	8007b84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d105      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bac:	4b3b      	ldr	r3, [pc, #236]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	4a3a      	ldr	r2, [pc, #232]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 80ad 	beq.w	8007d1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bc2:	4b36      	ldr	r3, [pc, #216]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 030c 	and.w	r3, r3, #12
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d060      	beq.n	8007c90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d145      	bne.n	8007c62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bd6:	4b33      	ldr	r3, [pc, #204]	; (8007ca4 <HAL_RCC_OscConfig+0x4b4>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bdc:	f7fd ff9e 	bl	8005b1c <HAL_GetTick>
 8007be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007be2:	e008      	b.n	8007bf6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007be4:	f7fd ff9a 	bl	8005b1c <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e093      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf6:	4b29      	ldr	r3, [pc, #164]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1f0      	bne.n	8007be4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69da      	ldr	r2, [r3, #28]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	019b      	lsls	r3, r3, #6
 8007c12:	431a      	orrs	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c18:	085b      	lsrs	r3, r3, #1
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	041b      	lsls	r3, r3, #16
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c24:	061b      	lsls	r3, r3, #24
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2c:	071b      	lsls	r3, r3, #28
 8007c2e:	491b      	ldr	r1, [pc, #108]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c34:	4b1b      	ldr	r3, [pc, #108]	; (8007ca4 <HAL_RCC_OscConfig+0x4b4>)
 8007c36:	2201      	movs	r2, #1
 8007c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c3a:	f7fd ff6f 	bl	8005b1c <HAL_GetTick>
 8007c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c40:	e008      	b.n	8007c54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c42:	f7fd ff6b 	bl	8005b1c <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e064      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c54:	4b11      	ldr	r3, [pc, #68]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0f0      	beq.n	8007c42 <HAL_RCC_OscConfig+0x452>
 8007c60:	e05c      	b.n	8007d1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c62:	4b10      	ldr	r3, [pc, #64]	; (8007ca4 <HAL_RCC_OscConfig+0x4b4>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c68:	f7fd ff58 	bl	8005b1c <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c70:	f7fd ff54 	bl	8005b1c <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e04d      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c82:	4b06      	ldr	r3, [pc, #24]	; (8007c9c <HAL_RCC_OscConfig+0x4ac>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1f0      	bne.n	8007c70 <HAL_RCC_OscConfig+0x480>
 8007c8e:	e045      	b.n	8007d1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d107      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e040      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
 8007c9c:	40023800 	.word	0x40023800
 8007ca0:	40007000 	.word	0x40007000
 8007ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ca8:	4b1f      	ldr	r3, [pc, #124]	; (8007d28 <HAL_RCC_OscConfig+0x538>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d030      	beq.n	8007d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d129      	bne.n	8007d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d122      	bne.n	8007d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007cd8:	4013      	ands	r3, r2
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d119      	bne.n	8007d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	085b      	lsrs	r3, r3, #1
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d10f      	bne.n	8007d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d107      	bne.n	8007d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d001      	beq.n	8007d1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e000      	b.n	8007d1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	40023800 	.word	0x40023800

08007d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e041      	b.n	8007dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7fd fc6a 	bl	800562c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3304      	adds	r3, #4
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	f000 fd0a 	bl	8008784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d001      	beq.n	8007de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e04e      	b.n	8007e82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0201 	orr.w	r2, r2, #1
 8007dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a23      	ldr	r2, [pc, #140]	; (8007e90 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d022      	beq.n	8007e4c <HAL_TIM_Base_Start_IT+0x80>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e0e:	d01d      	beq.n	8007e4c <HAL_TIM_Base_Start_IT+0x80>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a1f      	ldr	r2, [pc, #124]	; (8007e94 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d018      	beq.n	8007e4c <HAL_TIM_Base_Start_IT+0x80>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a1e      	ldr	r2, [pc, #120]	; (8007e98 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d013      	beq.n	8007e4c <HAL_TIM_Base_Start_IT+0x80>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a1c      	ldr	r2, [pc, #112]	; (8007e9c <HAL_TIM_Base_Start_IT+0xd0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00e      	beq.n	8007e4c <HAL_TIM_Base_Start_IT+0x80>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a1b      	ldr	r2, [pc, #108]	; (8007ea0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d009      	beq.n	8007e4c <HAL_TIM_Base_Start_IT+0x80>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a19      	ldr	r2, [pc, #100]	; (8007ea4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d004      	beq.n	8007e4c <HAL_TIM_Base_Start_IT+0x80>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a18      	ldr	r2, [pc, #96]	; (8007ea8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d111      	bne.n	8007e70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2b06      	cmp	r3, #6
 8007e5c:	d010      	beq.n	8007e80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f042 0201 	orr.w	r2, r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6e:	e007      	b.n	8007e80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0201 	orr.w	r2, r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	40010000 	.word	0x40010000
 8007e94:	40000400 	.word	0x40000400
 8007e98:	40000800 	.word	0x40000800
 8007e9c:	40000c00 	.word	0x40000c00
 8007ea0:	40010400 	.word	0x40010400
 8007ea4:	40014000 	.word	0x40014000
 8007ea8:	40001800 	.word	0x40001800

08007eac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68da      	ldr	r2, [r3, #12]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0201 	bic.w	r2, r2, #1
 8007ec2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6a1a      	ldr	r2, [r3, #32]
 8007eca:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ece:	4013      	ands	r3, r2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10f      	bne.n	8007ef4 <HAL_TIM_Base_Stop_IT+0x48>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6a1a      	ldr	r2, [r3, #32]
 8007eda:	f240 4344 	movw	r3, #1092	; 0x444
 8007ede:	4013      	ands	r3, r2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d107      	bne.n	8007ef4 <HAL_TIM_Base_Stop_IT+0x48>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0201 	bic.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e041      	b.n	8007fa0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7fd fa35 	bl	80053a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	3304      	adds	r3, #4
 8007f46:	4619      	mov	r1, r3
 8007f48:	4610      	mov	r0, r2
 8007f4a:	f000 fc1b 	bl	8008784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d109      	bne.n	8007fcc <HAL_TIM_PWM_Start+0x24>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	bf14      	ite	ne
 8007fc4:	2301      	movne	r3, #1
 8007fc6:	2300      	moveq	r3, #0
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	e022      	b.n	8008012 <HAL_TIM_PWM_Start+0x6a>
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d109      	bne.n	8007fe6 <HAL_TIM_PWM_Start+0x3e>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	bf14      	ite	ne
 8007fde:	2301      	movne	r3, #1
 8007fe0:	2300      	moveq	r3, #0
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	e015      	b.n	8008012 <HAL_TIM_PWM_Start+0x6a>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d109      	bne.n	8008000 <HAL_TIM_PWM_Start+0x58>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	bf14      	ite	ne
 8007ff8:	2301      	movne	r3, #1
 8007ffa:	2300      	moveq	r3, #0
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	e008      	b.n	8008012 <HAL_TIM_PWM_Start+0x6a>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b01      	cmp	r3, #1
 800800a:	bf14      	ite	ne
 800800c:	2301      	movne	r3, #1
 800800e:	2300      	moveq	r3, #0
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e07c      	b.n	8008114 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d104      	bne.n	800802a <HAL_TIM_PWM_Start+0x82>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008028:	e013      	b.n	8008052 <HAL_TIM_PWM_Start+0xaa>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b04      	cmp	r3, #4
 800802e:	d104      	bne.n	800803a <HAL_TIM_PWM_Start+0x92>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008038:	e00b      	b.n	8008052 <HAL_TIM_PWM_Start+0xaa>
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b08      	cmp	r3, #8
 800803e:	d104      	bne.n	800804a <HAL_TIM_PWM_Start+0xa2>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008048:	e003      	b.n	8008052 <HAL_TIM_PWM_Start+0xaa>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2202      	movs	r2, #2
 800804e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2201      	movs	r2, #1
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	4618      	mov	r0, r3
 800805c:	f000 fde2 	bl	8008c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a2d      	ldr	r2, [pc, #180]	; (800811c <HAL_TIM_PWM_Start+0x174>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d004      	beq.n	8008074 <HAL_TIM_PWM_Start+0xcc>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a2c      	ldr	r2, [pc, #176]	; (8008120 <HAL_TIM_PWM_Start+0x178>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d101      	bne.n	8008078 <HAL_TIM_PWM_Start+0xd0>
 8008074:	2301      	movs	r3, #1
 8008076:	e000      	b.n	800807a <HAL_TIM_PWM_Start+0xd2>
 8008078:	2300      	movs	r3, #0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d007      	beq.n	800808e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800808c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a22      	ldr	r2, [pc, #136]	; (800811c <HAL_TIM_PWM_Start+0x174>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d022      	beq.n	80080de <HAL_TIM_PWM_Start+0x136>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a0:	d01d      	beq.n	80080de <HAL_TIM_PWM_Start+0x136>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a1f      	ldr	r2, [pc, #124]	; (8008124 <HAL_TIM_PWM_Start+0x17c>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d018      	beq.n	80080de <HAL_TIM_PWM_Start+0x136>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a1d      	ldr	r2, [pc, #116]	; (8008128 <HAL_TIM_PWM_Start+0x180>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d013      	beq.n	80080de <HAL_TIM_PWM_Start+0x136>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a1c      	ldr	r2, [pc, #112]	; (800812c <HAL_TIM_PWM_Start+0x184>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d00e      	beq.n	80080de <HAL_TIM_PWM_Start+0x136>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a16      	ldr	r2, [pc, #88]	; (8008120 <HAL_TIM_PWM_Start+0x178>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d009      	beq.n	80080de <HAL_TIM_PWM_Start+0x136>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a18      	ldr	r2, [pc, #96]	; (8008130 <HAL_TIM_PWM_Start+0x188>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d004      	beq.n	80080de <HAL_TIM_PWM_Start+0x136>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a16      	ldr	r2, [pc, #88]	; (8008134 <HAL_TIM_PWM_Start+0x18c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d111      	bne.n	8008102 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f003 0307 	and.w	r3, r3, #7
 80080e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b06      	cmp	r3, #6
 80080ee:	d010      	beq.n	8008112 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0201 	orr.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008100:	e007      	b.n	8008112 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f042 0201 	orr.w	r2, r2, #1
 8008110:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	40010000 	.word	0x40010000
 8008120:	40010400 	.word	0x40010400
 8008124:	40000400 	.word	0x40000400
 8008128:	40000800 	.word	0x40000800
 800812c:	40000c00 	.word	0x40000c00
 8008130:	40014000 	.word	0x40014000
 8008134:	40001800 	.word	0x40001800

08008138 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e097      	b.n	800827c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d106      	bne.n	8008166 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7fd f955 	bl	8005410 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2202      	movs	r2, #2
 800816a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	6812      	ldr	r2, [r2, #0]
 8008178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800817c:	f023 0307 	bic.w	r3, r3, #7
 8008180:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3304      	adds	r3, #4
 800818a:	4619      	mov	r1, r3
 800818c:	4610      	mov	r0, r2
 800818e:	f000 faf9 	bl	8008784 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	021b      	lsls	r3, r3, #8
 80081ca:	4313      	orrs	r3, r2
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80081d8:	f023 030c 	bic.w	r3, r3, #12
 80081dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	021b      	lsls	r3, r3, #8
 80081f4:	4313      	orrs	r3, r2
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	011a      	lsls	r2, r3, #4
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	031b      	lsls	r3, r3, #12
 8008208:	4313      	orrs	r3, r2
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	4313      	orrs	r3, r2
 800820e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008216:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800821e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	4313      	orrs	r3, r2
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	4313      	orrs	r3, r2
 8008230:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008294:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800829c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80082ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d110      	bne.n	80082d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d102      	bne.n	80082c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80082ba:	7b7b      	ldrb	r3, [r7, #13]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d001      	beq.n	80082c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e069      	b.n	8008398 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082d4:	e031      	b.n	800833a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d110      	bne.n	80082fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d102      	bne.n	80082e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80082e2:	7b3b      	ldrb	r3, [r7, #12]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d001      	beq.n	80082ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e055      	b.n	8008398 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082fc:	e01d      	b.n	800833a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d108      	bne.n	8008316 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d105      	bne.n	8008316 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800830a:	7b7b      	ldrb	r3, [r7, #13]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d102      	bne.n	8008316 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008310:	7b3b      	ldrb	r3, [r7, #12]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d001      	beq.n	800831a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e03e      	b.n	8008398 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2202      	movs	r2, #2
 800831e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2202      	movs	r2, #2
 8008326:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2202      	movs	r2, #2
 800832e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2202      	movs	r2, #2
 8008336:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d003      	beq.n	8008348 <HAL_TIM_Encoder_Start+0xc4>
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b04      	cmp	r3, #4
 8008344:	d008      	beq.n	8008358 <HAL_TIM_Encoder_Start+0xd4>
 8008346:	e00f      	b.n	8008368 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2201      	movs	r2, #1
 800834e:	2100      	movs	r1, #0
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fc67 	bl	8008c24 <TIM_CCxChannelCmd>
      break;
 8008356:	e016      	b.n	8008386 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2201      	movs	r2, #1
 800835e:	2104      	movs	r1, #4
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fc5f 	bl	8008c24 <TIM_CCxChannelCmd>
      break;
 8008366:	e00e      	b.n	8008386 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2201      	movs	r2, #1
 800836e:	2100      	movs	r1, #0
 8008370:	4618      	mov	r0, r3
 8008372:	f000 fc57 	bl	8008c24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2201      	movs	r2, #1
 800837c:	2104      	movs	r1, #4
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fc50 	bl	8008c24 <TIM_CCxChannelCmd>
      break;
 8008384:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0201 	orr.w	r2, r2, #1
 8008394:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f003 0302 	and.w	r3, r3, #2
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d122      	bne.n	80083fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d11b      	bne.n	80083fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0202 	mvn.w	r2, #2
 80083cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f9b0 	bl	8008748 <HAL_TIM_IC_CaptureCallback>
 80083e8:	e005      	b.n	80083f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f9a2 	bl	8008734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f9b3 	bl	800875c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b04      	cmp	r3, #4
 8008408:	d122      	bne.n	8008450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b04      	cmp	r3, #4
 8008416:	d11b      	bne.n	8008450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f06f 0204 	mvn.w	r2, #4
 8008420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2202      	movs	r2, #2
 8008426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f986 	bl	8008748 <HAL_TIM_IC_CaptureCallback>
 800843c:	e005      	b.n	800844a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f978 	bl	8008734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f989 	bl	800875c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	f003 0308 	and.w	r3, r3, #8
 800845a:	2b08      	cmp	r3, #8
 800845c:	d122      	bne.n	80084a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f003 0308 	and.w	r3, r3, #8
 8008468:	2b08      	cmp	r3, #8
 800846a:	d11b      	bne.n	80084a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f06f 0208 	mvn.w	r2, #8
 8008474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2204      	movs	r2, #4
 800847a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f95c 	bl	8008748 <HAL_TIM_IC_CaptureCallback>
 8008490:	e005      	b.n	800849e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f94e 	bl	8008734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f95f 	bl	800875c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f003 0310 	and.w	r3, r3, #16
 80084ae:	2b10      	cmp	r3, #16
 80084b0:	d122      	bne.n	80084f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	2b10      	cmp	r3, #16
 80084be:	d11b      	bne.n	80084f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f06f 0210 	mvn.w	r2, #16
 80084c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2208      	movs	r2, #8
 80084ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f932 	bl	8008748 <HAL_TIM_IC_CaptureCallback>
 80084e4:	e005      	b.n	80084f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f924 	bl	8008734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f935 	bl	800875c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b01      	cmp	r3, #1
 8008504:	d10e      	bne.n	8008524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b01      	cmp	r3, #1
 8008512:	d107      	bne.n	8008524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f06f 0201 	mvn.w	r2, #1
 800851c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7fb fd14 	bl	8003f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852e:	2b80      	cmp	r3, #128	; 0x80
 8008530:	d10e      	bne.n	8008550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853c:	2b80      	cmp	r3, #128	; 0x80
 800853e:	d107      	bne.n	8008550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fc68 	bl	8008e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855a:	2b40      	cmp	r3, #64	; 0x40
 800855c:	d10e      	bne.n	800857c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d107      	bne.n	800857c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f8fa 	bl	8008770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	f003 0320 	and.w	r3, r3, #32
 8008586:	2b20      	cmp	r3, #32
 8008588:	d10e      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f003 0320 	and.w	r3, r3, #32
 8008594:	2b20      	cmp	r3, #32
 8008596:	d107      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f06f 0220 	mvn.w	r2, #32
 80085a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fc32 	bl	8008e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d101      	bne.n	80085ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80085ca:	2302      	movs	r3, #2
 80085cc:	e0ae      	b.n	800872c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b0c      	cmp	r3, #12
 80085da:	f200 809f 	bhi.w	800871c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80085de:	a201      	add	r2, pc, #4	; (adr r2, 80085e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	08008619 	.word	0x08008619
 80085e8:	0800871d 	.word	0x0800871d
 80085ec:	0800871d 	.word	0x0800871d
 80085f0:	0800871d 	.word	0x0800871d
 80085f4:	08008659 	.word	0x08008659
 80085f8:	0800871d 	.word	0x0800871d
 80085fc:	0800871d 	.word	0x0800871d
 8008600:	0800871d 	.word	0x0800871d
 8008604:	0800869b 	.word	0x0800869b
 8008608:	0800871d 	.word	0x0800871d
 800860c:	0800871d 	.word	0x0800871d
 8008610:	0800871d 	.word	0x0800871d
 8008614:	080086db 	.word	0x080086db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68b9      	ldr	r1, [r7, #8]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 f950 	bl	80088c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699a      	ldr	r2, [r3, #24]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f042 0208 	orr.w	r2, r2, #8
 8008632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699a      	ldr	r2, [r3, #24]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0204 	bic.w	r2, r2, #4
 8008642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6999      	ldr	r1, [r3, #24]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	691a      	ldr	r2, [r3, #16]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	619a      	str	r2, [r3, #24]
      break;
 8008656:	e064      	b.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68b9      	ldr	r1, [r7, #8]
 800865e:	4618      	mov	r0, r3
 8008660:	f000 f9a0 	bl	80089a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	699a      	ldr	r2, [r3, #24]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699a      	ldr	r2, [r3, #24]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6999      	ldr	r1, [r3, #24]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	021a      	lsls	r2, r3, #8
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	430a      	orrs	r2, r1
 8008696:	619a      	str	r2, [r3, #24]
      break;
 8008698:	e043      	b.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 f9f5 	bl	8008a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69da      	ldr	r2, [r3, #28]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f042 0208 	orr.w	r2, r2, #8
 80086b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69da      	ldr	r2, [r3, #28]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 0204 	bic.w	r2, r2, #4
 80086c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	69d9      	ldr	r1, [r3, #28]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	691a      	ldr	r2, [r3, #16]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	61da      	str	r2, [r3, #28]
      break;
 80086d8:	e023      	b.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 fa49 	bl	8008b78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	69da      	ldr	r2, [r3, #28]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69da      	ldr	r2, [r3, #28]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69d9      	ldr	r1, [r3, #28]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	021a      	lsls	r2, r3, #8
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	61da      	str	r2, [r3, #28]
      break;
 800871a:	e002      	b.n	8008722 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	75fb      	strb	r3, [r7, #23]
      break;
 8008720:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a40      	ldr	r2, [pc, #256]	; (8008898 <TIM_Base_SetConfig+0x114>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a2:	d00f      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a3d      	ldr	r2, [pc, #244]	; (800889c <TIM_Base_SetConfig+0x118>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00b      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a3c      	ldr	r2, [pc, #240]	; (80088a0 <TIM_Base_SetConfig+0x11c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d007      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a3b      	ldr	r2, [pc, #236]	; (80088a4 <TIM_Base_SetConfig+0x120>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d003      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a3a      	ldr	r2, [pc, #232]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d108      	bne.n	80087d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a2f      	ldr	r2, [pc, #188]	; (8008898 <TIM_Base_SetConfig+0x114>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d02b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e4:	d027      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2c      	ldr	r2, [pc, #176]	; (800889c <TIM_Base_SetConfig+0x118>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d023      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a2b      	ldr	r2, [pc, #172]	; (80088a0 <TIM_Base_SetConfig+0x11c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d01f      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a2a      	ldr	r2, [pc, #168]	; (80088a4 <TIM_Base_SetConfig+0x120>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d01b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a29      	ldr	r2, [pc, #164]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d017      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a28      	ldr	r2, [pc, #160]	; (80088ac <TIM_Base_SetConfig+0x128>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d013      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a27      	ldr	r2, [pc, #156]	; (80088b0 <TIM_Base_SetConfig+0x12c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d00f      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <TIM_Base_SetConfig+0x130>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d00b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a25      	ldr	r2, [pc, #148]	; (80088b8 <TIM_Base_SetConfig+0x134>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d007      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a24      	ldr	r2, [pc, #144]	; (80088bc <TIM_Base_SetConfig+0x138>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d003      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a23      	ldr	r2, [pc, #140]	; (80088c0 <TIM_Base_SetConfig+0x13c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d108      	bne.n	8008848 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800883c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <TIM_Base_SetConfig+0x114>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_Base_SetConfig+0xf8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a0c      	ldr	r2, [pc, #48]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d103      	bne.n	8008884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	691a      	ldr	r2, [r3, #16]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	615a      	str	r2, [r3, #20]
}
 800888a:	bf00      	nop
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40010000 	.word	0x40010000
 800889c:	40000400 	.word	0x40000400
 80088a0:	40000800 	.word	0x40000800
 80088a4:	40000c00 	.word	0x40000c00
 80088a8:	40010400 	.word	0x40010400
 80088ac:	40014000 	.word	0x40014000
 80088b0:	40014400 	.word	0x40014400
 80088b4:	40014800 	.word	0x40014800
 80088b8:	40001800 	.word	0x40001800
 80088bc:	40001c00 	.word	0x40001c00
 80088c0:	40002000 	.word	0x40002000

080088c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	f023 0201 	bic.w	r2, r3, #1
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0303 	bic.w	r3, r3, #3
 80088fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	4313      	orrs	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f023 0302 	bic.w	r3, r3, #2
 800890c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	4313      	orrs	r3, r2
 8008916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a20      	ldr	r2, [pc, #128]	; (800899c <TIM_OC1_SetConfig+0xd8>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d003      	beq.n	8008928 <TIM_OC1_SetConfig+0x64>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a1f      	ldr	r2, [pc, #124]	; (80089a0 <TIM_OC1_SetConfig+0xdc>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d10c      	bne.n	8008942 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f023 0308 	bic.w	r3, r3, #8
 800892e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f023 0304 	bic.w	r3, r3, #4
 8008940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a15      	ldr	r2, [pc, #84]	; (800899c <TIM_OC1_SetConfig+0xd8>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d003      	beq.n	8008952 <TIM_OC1_SetConfig+0x8e>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a14      	ldr	r2, [pc, #80]	; (80089a0 <TIM_OC1_SetConfig+0xdc>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d111      	bne.n	8008976 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	4313      	orrs	r3, r2
 800896a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	4313      	orrs	r3, r2
 8008974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	621a      	str	r2, [r3, #32]
}
 8008990:	bf00      	nop
 8008992:	371c      	adds	r7, #28
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	40010000 	.word	0x40010000
 80089a0:	40010400 	.word	0x40010400

080089a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	f023 0210 	bic.w	r2, r3, #16
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	021b      	lsls	r3, r3, #8
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f023 0320 	bic.w	r3, r3, #32
 80089ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a22      	ldr	r2, [pc, #136]	; (8008a88 <TIM_OC2_SetConfig+0xe4>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d003      	beq.n	8008a0c <TIM_OC2_SetConfig+0x68>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a21      	ldr	r2, [pc, #132]	; (8008a8c <TIM_OC2_SetConfig+0xe8>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d10d      	bne.n	8008a28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a17      	ldr	r2, [pc, #92]	; (8008a88 <TIM_OC2_SetConfig+0xe4>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d003      	beq.n	8008a38 <TIM_OC2_SetConfig+0x94>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a16      	ldr	r2, [pc, #88]	; (8008a8c <TIM_OC2_SetConfig+0xe8>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d113      	bne.n	8008a60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	621a      	str	r2, [r3, #32]
}
 8008a7a:	bf00      	nop
 8008a7c:	371c      	adds	r7, #28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	40010000 	.word	0x40010000
 8008a8c:	40010400 	.word	0x40010400

08008a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0303 	bic.w	r3, r3, #3
 8008ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	021b      	lsls	r3, r3, #8
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a21      	ldr	r2, [pc, #132]	; (8008b70 <TIM_OC3_SetConfig+0xe0>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d003      	beq.n	8008af6 <TIM_OC3_SetConfig+0x66>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a20      	ldr	r2, [pc, #128]	; (8008b74 <TIM_OC3_SetConfig+0xe4>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d10d      	bne.n	8008b12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	021b      	lsls	r3, r3, #8
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a16      	ldr	r2, [pc, #88]	; (8008b70 <TIM_OC3_SetConfig+0xe0>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d003      	beq.n	8008b22 <TIM_OC3_SetConfig+0x92>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a15      	ldr	r2, [pc, #84]	; (8008b74 <TIM_OC3_SetConfig+0xe4>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d113      	bne.n	8008b4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	621a      	str	r2, [r3, #32]
}
 8008b64:	bf00      	nop
 8008b66:	371c      	adds	r7, #28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	40010000 	.word	0x40010000
 8008b74:	40010400 	.word	0x40010400

08008b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	021b      	lsls	r3, r3, #8
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	031b      	lsls	r3, r3, #12
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a12      	ldr	r2, [pc, #72]	; (8008c1c <TIM_OC4_SetConfig+0xa4>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d003      	beq.n	8008be0 <TIM_OC4_SetConfig+0x68>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a11      	ldr	r2, [pc, #68]	; (8008c20 <TIM_OC4_SetConfig+0xa8>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d109      	bne.n	8008bf4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	019b      	lsls	r3, r3, #6
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	621a      	str	r2, [r3, #32]
}
 8008c0e:	bf00      	nop
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	40010000 	.word	0x40010000
 8008c20:	40010400 	.word	0x40010400

08008c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	f003 031f 	and.w	r3, r3, #31
 8008c36:	2201      	movs	r2, #1
 8008c38:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6a1a      	ldr	r2, [r3, #32]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	43db      	mvns	r3, r3
 8008c46:	401a      	ands	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6a1a      	ldr	r2, [r3, #32]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	f003 031f 	and.w	r3, r3, #31
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	fa01 f303 	lsl.w	r3, r1, r3
 8008c5c:	431a      	orrs	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	621a      	str	r2, [r3, #32]
}
 8008c62:	bf00      	nop
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e05a      	b.n	8008d3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2202      	movs	r2, #2
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a21      	ldr	r2, [pc, #132]	; (8008d4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d022      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd4:	d01d      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a1d      	ldr	r2, [pc, #116]	; (8008d50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d018      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a1b      	ldr	r2, [pc, #108]	; (8008d54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d013      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a1a      	ldr	r2, [pc, #104]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00e      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a18      	ldr	r2, [pc, #96]	; (8008d5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d009      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a17      	ldr	r2, [pc, #92]	; (8008d60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d004      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a15      	ldr	r2, [pc, #84]	; (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d10c      	bne.n	8008d2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	40010000 	.word	0x40010000
 8008d50:	40000400 	.word	0x40000400
 8008d54:	40000800 	.word	0x40000800
 8008d58:	40000c00 	.word	0x40000c00
 8008d5c:	40010400 	.word	0x40010400
 8008d60:	40014000 	.word	0x40014000
 8008d64:	40001800 	.word	0x40001800

08008d68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d101      	bne.n	8008d84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d80:	2302      	movs	r3, #2
 8008d82:	e03d      	b.n	8008e00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e03f      	b.n	8008ec6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d106      	bne.n	8008e60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7fc fc90 	bl	8005780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2224      	movs	r2, #36	; 0x24
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 ff43 	bl	8009d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	691a      	ldr	r2, [r3, #16]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	695a      	ldr	r2, [r3, #20]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08c      	sub	sp, #48	; 0x30
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	4613      	mov	r3, r2
 8008edc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	d165      	bne.n	8008fb6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <HAL_UART_Transmit_DMA+0x26>
 8008ef0:	88fb      	ldrh	r3, [r7, #6]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e05e      	b.n	8008fb8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d101      	bne.n	8008f08 <HAL_UART_Transmit_DMA+0x38>
 8008f04:	2302      	movs	r3, #2
 8008f06:	e057      	b.n	8008fb8 <HAL_UART_Transmit_DMA+0xe8>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	88fa      	ldrh	r2, [r7, #6]
 8008f1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	88fa      	ldrh	r2, [r7, #6]
 8008f20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2221      	movs	r2, #33	; 0x21
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f34:	4a22      	ldr	r2, [pc, #136]	; (8008fc0 <HAL_UART_Transmit_DMA+0xf0>)
 8008f36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3c:	4a21      	ldr	r2, [pc, #132]	; (8008fc4 <HAL_UART_Transmit_DMA+0xf4>)
 8008f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f44:	4a20      	ldr	r2, [pc, #128]	; (8008fc8 <HAL_UART_Transmit_DMA+0xf8>)
 8008f46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008f50:	f107 0308 	add.w	r3, r7, #8
 8008f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5c:	6819      	ldr	r1, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3304      	adds	r3, #4
 8008f64:	461a      	mov	r2, r3
 8008f66:	88fb      	ldrh	r3, [r7, #6]
 8008f68:	f7fd fbc6 	bl	80066f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f74:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3314      	adds	r3, #20
 8008f84:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	e853 3f00 	ldrex	r3, [r3]
 8008f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3314      	adds	r3, #20
 8008f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f9e:	627a      	str	r2, [r7, #36]	; 0x24
 8008fa0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	6a39      	ldr	r1, [r7, #32]
 8008fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e5      	bne.n	8008f7e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e000      	b.n	8008fb8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008fb6:	2302      	movs	r3, #2
  }
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3730      	adds	r7, #48	; 0x30
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	0800959d 	.word	0x0800959d
 8008fc4:	08009637 	.word	0x08009637
 8008fc8:	080097af 	.word	0x080097af

08008fcc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b20      	cmp	r3, #32
 8008fe4:	d11d      	bne.n	8009022 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <HAL_UART_Receive_DMA+0x26>
 8008fec:	88fb      	ldrh	r3, [r7, #6]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e016      	b.n	8009024 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d101      	bne.n	8009004 <HAL_UART_Receive_DMA+0x38>
 8009000:	2302      	movs	r3, #2
 8009002:	e00f      	b.n	8009024 <HAL_UART_Receive_DMA+0x58>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009012:	88fb      	ldrh	r3, [r7, #6]
 8009014:	461a      	mov	r2, r3
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fc13 	bl	8009844 <UART_Start_Receive_DMA>
 800901e:	4603      	mov	r3, r0
 8009020:	e000      	b.n	8009024 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009022:	2302      	movs	r3, #2
  }
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b0ba      	sub	sp, #232	; 0xe8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009052:	2300      	movs	r3, #0
 8009054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009058:	2300      	movs	r3, #0
 800905a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800905e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009062:	f003 030f 	and.w	r3, r3, #15
 8009066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800906a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10f      	bne.n	8009092 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009076:	f003 0320 	and.w	r3, r3, #32
 800907a:	2b00      	cmp	r3, #0
 800907c:	d009      	beq.n	8009092 <HAL_UART_IRQHandler+0x66>
 800907e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009082:	f003 0320 	and.w	r3, r3, #32
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fd7f 	bl	8009b8e <UART_Receive_IT>
      return;
 8009090:	e256      	b.n	8009540 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 80de 	beq.w	8009258 <HAL_UART_IRQHandler+0x22c>
 800909c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d106      	bne.n	80090b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 80d1 	beq.w	8009258 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80090b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00b      	beq.n	80090da <HAL_UART_IRQHandler+0xae>
 80090c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d005      	beq.n	80090da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d2:	f043 0201 	orr.w	r2, r3, #1
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00b      	beq.n	80090fe <HAL_UART_IRQHandler+0xd2>
 80090e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d005      	beq.n	80090fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	f043 0202 	orr.w	r2, r3, #2
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009102:	f003 0302 	and.w	r3, r3, #2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00b      	beq.n	8009122 <HAL_UART_IRQHandler+0xf6>
 800910a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d005      	beq.n	8009122 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911a:	f043 0204 	orr.w	r2, r3, #4
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009126:	f003 0308 	and.w	r3, r3, #8
 800912a:	2b00      	cmp	r3, #0
 800912c:	d011      	beq.n	8009152 <HAL_UART_IRQHandler+0x126>
 800912e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	2b00      	cmp	r3, #0
 8009138:	d105      	bne.n	8009146 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800913a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b00      	cmp	r3, #0
 8009144:	d005      	beq.n	8009152 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914a:	f043 0208 	orr.w	r2, r3, #8
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 81ed 	beq.w	8009536 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	2b00      	cmp	r3, #0
 8009166:	d008      	beq.n	800917a <HAL_UART_IRQHandler+0x14e>
 8009168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800916c:	f003 0320 	and.w	r3, r3, #32
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fd0a 	bl	8009b8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009184:	2b40      	cmp	r3, #64	; 0x40
 8009186:	bf0c      	ite	eq
 8009188:	2301      	moveq	r3, #1
 800918a:	2300      	movne	r3, #0
 800918c:	b2db      	uxtb	r3, r3
 800918e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009196:	f003 0308 	and.w	r3, r3, #8
 800919a:	2b00      	cmp	r3, #0
 800919c:	d103      	bne.n	80091a6 <HAL_UART_IRQHandler+0x17a>
 800919e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d04f      	beq.n	8009246 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fc12 	bl	80099d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b6:	2b40      	cmp	r3, #64	; 0x40
 80091b8:	d141      	bne.n	800923e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3314      	adds	r3, #20
 80091c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091c8:	e853 3f00 	ldrex	r3, [r3]
 80091cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80091d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3314      	adds	r3, #20
 80091e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80091f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091f6:	e841 2300 	strex	r3, r2, [r1]
 80091fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80091fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1d9      	bne.n	80091ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920a:	2b00      	cmp	r3, #0
 800920c:	d013      	beq.n	8009236 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009212:	4a7d      	ldr	r2, [pc, #500]	; (8009408 <HAL_UART_IRQHandler+0x3dc>)
 8009214:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921a:	4618      	mov	r0, r3
 800921c:	f7fd fb34 	bl	8006888 <HAL_DMA_Abort_IT>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d016      	beq.n	8009254 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009230:	4610      	mov	r0, r2
 8009232:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009234:	e00e      	b.n	8009254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f99a 	bl	8009570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800923c:	e00a      	b.n	8009254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f996 	bl	8009570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009244:	e006      	b.n	8009254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f992 	bl	8009570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009252:	e170      	b.n	8009536 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009254:	bf00      	nop
    return;
 8009256:	e16e      	b.n	8009536 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925c:	2b01      	cmp	r3, #1
 800925e:	f040 814a 	bne.w	80094f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009266:	f003 0310 	and.w	r3, r3, #16
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 8143 	beq.w	80094f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009274:	f003 0310 	and.w	r3, r3, #16
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 813c 	beq.w	80094f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800927e:	2300      	movs	r3, #0
 8009280:	60bb      	str	r3, [r7, #8]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	60bb      	str	r3, [r7, #8]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	60bb      	str	r3, [r7, #8]
 8009292:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929e:	2b40      	cmp	r3, #64	; 0x40
 80092a0:	f040 80b4 	bne.w	800940c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8140 	beq.w	800953a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092c2:	429a      	cmp	r2, r3
 80092c4:	f080 8139 	bcs.w	800953a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092da:	f000 8088 	beq.w	80093ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	330c      	adds	r3, #12
 80092e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80092f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	330c      	adds	r3, #12
 8009306:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800930a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800930e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009312:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009316:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1d9      	bne.n	80092de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3314      	adds	r3, #20
 8009330:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800933a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800933c:	f023 0301 	bic.w	r3, r3, #1
 8009340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3314      	adds	r3, #20
 800934a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800934e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009352:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009356:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e1      	bne.n	800932a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3314      	adds	r3, #20
 800936c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800937c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3314      	adds	r3, #20
 8009386:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800938a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800938c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009390:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009392:	e841 2300 	strex	r3, r2, [r1]
 8009396:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1e3      	bne.n	8009366 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2220      	movs	r2, #32
 80093a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	330c      	adds	r3, #12
 80093b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093be:	f023 0310 	bic.w	r3, r3, #16
 80093c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	330c      	adds	r3, #12
 80093cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80093d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80093d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093d8:	e841 2300 	strex	r3, r2, [r1]
 80093dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e3      	bne.n	80093ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fd f9dd 	bl	80067a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f8c0 	bl	8009584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009404:	e099      	b.n	800953a <HAL_UART_IRQHandler+0x50e>
 8009406:	bf00      	nop
 8009408:	08009a97 	.word	0x08009a97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009414:	b29b      	uxth	r3, r3
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009420:	b29b      	uxth	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 808b 	beq.w	800953e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 8086 	beq.w	800953e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	330c      	adds	r3, #12
 8009438:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943c:	e853 3f00 	ldrex	r3, [r3]
 8009440:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009448:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	330c      	adds	r3, #12
 8009452:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009456:	647a      	str	r2, [r7, #68]	; 0x44
 8009458:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800945c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800945e:	e841 2300 	strex	r3, r2, [r1]
 8009462:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1e3      	bne.n	8009432 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3314      	adds	r3, #20
 8009470:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	623b      	str	r3, [r7, #32]
   return(result);
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	f023 0301 	bic.w	r3, r3, #1
 8009480:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3314      	adds	r3, #20
 800948a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800948e:	633a      	str	r2, [r7, #48]	; 0x30
 8009490:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e3      	bne.n	800946a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2220      	movs	r2, #32
 80094a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	330c      	adds	r3, #12
 80094b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	e853 3f00 	ldrex	r3, [r3]
 80094be:	60fb      	str	r3, [r7, #12]
   return(result);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f023 0310 	bic.w	r3, r3, #16
 80094c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	330c      	adds	r3, #12
 80094d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80094d4:	61fa      	str	r2, [r7, #28]
 80094d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d8:	69b9      	ldr	r1, [r7, #24]
 80094da:	69fa      	ldr	r2, [r7, #28]
 80094dc:	e841 2300 	strex	r3, r2, [r1]
 80094e0:	617b      	str	r3, [r7, #20]
   return(result);
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e3      	bne.n	80094b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f848 	bl	8009584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094f4:	e023      	b.n	800953e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80094f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d009      	beq.n	8009516 <HAL_UART_IRQHandler+0x4ea>
 8009502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fad5 	bl	8009abe <UART_Transmit_IT>
    return;
 8009514:	e014      	b.n	8009540 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800951a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00e      	beq.n	8009540 <HAL_UART_IRQHandler+0x514>
 8009522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d008      	beq.n	8009540 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fb15 	bl	8009b5e <UART_EndTransmit_IT>
    return;
 8009534:	e004      	b.n	8009540 <HAL_UART_IRQHandler+0x514>
    return;
 8009536:	bf00      	nop
 8009538:	e002      	b.n	8009540 <HAL_UART_IRQHandler+0x514>
      return;
 800953a:	bf00      	nop
 800953c:	e000      	b.n	8009540 <HAL_UART_IRQHandler+0x514>
      return;
 800953e:	bf00      	nop
  }
}
 8009540:	37e8      	adds	r7, #232	; 0xe8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop

08009548 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b090      	sub	sp, #64	; 0x40
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d137      	bne.n	8009628 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80095b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ba:	2200      	movs	r2, #0
 80095bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3314      	adds	r3, #20
 80095c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	623b      	str	r3, [r7, #32]
   return(result);
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80095d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3314      	adds	r3, #20
 80095dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095de:	633a      	str	r2, [r7, #48]	; 0x30
 80095e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e5      	bne.n	80095be <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	330c      	adds	r3, #12
 80095f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	60fb      	str	r3, [r7, #12]
   return(result);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009608:	637b      	str	r3, [r7, #52]	; 0x34
 800960a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	330c      	adds	r3, #12
 8009610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009612:	61fa      	str	r2, [r7, #28]
 8009614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	69b9      	ldr	r1, [r7, #24]
 8009618:	69fa      	ldr	r2, [r7, #28]
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	617b      	str	r3, [r7, #20]
   return(result);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e5      	bne.n	80095f2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009626:	e002      	b.n	800962e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009628:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800962a:	f7f7 fca5 	bl	8000f78 <HAL_UART_TxCpltCallback>
}
 800962e:	bf00      	nop
 8009630:	3740      	adds	r7, #64	; 0x40
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009642:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7ff ff7f 	bl	8009548 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800964a:	bf00      	nop
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b09c      	sub	sp, #112	; 0x70
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800966a:	2b00      	cmp	r3, #0
 800966c:	d172      	bne.n	8009754 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800966e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009670:	2200      	movs	r2, #0
 8009672:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	330c      	adds	r3, #12
 800967a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009686:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800968a:	66bb      	str	r3, [r7, #104]	; 0x68
 800968c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	330c      	adds	r3, #12
 8009692:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009694:	65ba      	str	r2, [r7, #88]	; 0x58
 8009696:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800969a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e5      	bne.n	8009674 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3314      	adds	r3, #20
 80096ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b2:	e853 3f00 	ldrex	r3, [r3]
 80096b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ba:	f023 0301 	bic.w	r3, r3, #1
 80096be:	667b      	str	r3, [r7, #100]	; 0x64
 80096c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3314      	adds	r3, #20
 80096c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80096c8:	647a      	str	r2, [r7, #68]	; 0x44
 80096ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096d0:	e841 2300 	strex	r3, r2, [r1]
 80096d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1e5      	bne.n	80096a8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3314      	adds	r3, #20
 80096e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	e853 3f00 	ldrex	r3, [r3]
 80096ea:	623b      	str	r3, [r7, #32]
   return(result);
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096f2:	663b      	str	r3, [r7, #96]	; 0x60
 80096f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3314      	adds	r3, #20
 80096fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096fc:	633a      	str	r2, [r7, #48]	; 0x30
 80096fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e5      	bne.n	80096dc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009712:	2220      	movs	r2, #32
 8009714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800971a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971c:	2b01      	cmp	r3, #1
 800971e:	d119      	bne.n	8009754 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	330c      	adds	r3, #12
 8009726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	e853 3f00 	ldrex	r3, [r3]
 800972e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f023 0310 	bic.w	r3, r3, #16
 8009736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	330c      	adds	r3, #12
 800973e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009740:	61fa      	str	r2, [r7, #28]
 8009742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	69b9      	ldr	r1, [r7, #24]
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	617b      	str	r3, [r7, #20]
   return(result);
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e5      	bne.n	8009720 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009758:	2b01      	cmp	r3, #1
 800975a:	d106      	bne.n	800976a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800975c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800975e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009760:	4619      	mov	r1, r3
 8009762:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009764:	f7ff ff0e 	bl	8009584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009768:	e002      	b.n	8009770 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800976a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800976c:	f7f7 fc2e 	bl	8000fcc <HAL_UART_RxCpltCallback>
}
 8009770:	bf00      	nop
 8009772:	3770      	adds	r7, #112	; 0x70
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009784:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978a:	2b01      	cmp	r3, #1
 800978c:	d108      	bne.n	80097a0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009792:	085b      	lsrs	r3, r3, #1
 8009794:	b29b      	uxth	r3, r3
 8009796:	4619      	mov	r1, r3
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff fef3 	bl	8009584 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800979e:	e002      	b.n	80097a6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f7ff fedb 	bl	800955c <HAL_UART_RxHalfCpltCallback>
}
 80097a6:	bf00      	nop
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ca:	2b80      	cmp	r3, #128	; 0x80
 80097cc:	bf0c      	ite	eq
 80097ce:	2301      	moveq	r3, #1
 80097d0:	2300      	movne	r3, #0
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b21      	cmp	r3, #33	; 0x21
 80097e0:	d108      	bne.n	80097f4 <UART_DMAError+0x46>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d005      	beq.n	80097f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2200      	movs	r2, #0
 80097ec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80097ee:	68b8      	ldr	r0, [r7, #8]
 80097f0:	f000 f8c6 	bl	8009980 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097fe:	2b40      	cmp	r3, #64	; 0x40
 8009800:	bf0c      	ite	eq
 8009802:	2301      	moveq	r3, #1
 8009804:	2300      	movne	r3, #0
 8009806:	b2db      	uxtb	r3, r3
 8009808:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b22      	cmp	r3, #34	; 0x22
 8009814:	d108      	bne.n	8009828 <UART_DMAError+0x7a>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d005      	beq.n	8009828 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2200      	movs	r2, #0
 8009820:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009822:	68b8      	ldr	r0, [r7, #8]
 8009824:	f000 f8d4 	bl	80099d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982c:	f043 0210 	orr.w	r2, r3, #16
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009834:	68b8      	ldr	r0, [r7, #8]
 8009836:	f7ff fe9b 	bl	8009570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
	...

08009844 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b098      	sub	sp, #96	; 0x60
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	4613      	mov	r3, r2
 8009850:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	88fa      	ldrh	r2, [r7, #6]
 800985c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2222      	movs	r2, #34	; 0x22
 8009868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009870:	4a40      	ldr	r2, [pc, #256]	; (8009974 <UART_Start_Receive_DMA+0x130>)
 8009872:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009878:	4a3f      	ldr	r2, [pc, #252]	; (8009978 <UART_Start_Receive_DMA+0x134>)
 800987a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009880:	4a3e      	ldr	r2, [pc, #248]	; (800997c <UART_Start_Receive_DMA+0x138>)
 8009882:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009888:	2200      	movs	r2, #0
 800988a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800988c:	f107 0308 	add.w	r3, r7, #8
 8009890:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3304      	adds	r3, #4
 800989c:	4619      	mov	r1, r3
 800989e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	88fb      	ldrh	r3, [r7, #6]
 80098a4:	f7fc ff28 	bl	80066f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80098a8:	2300      	movs	r3, #0
 80098aa:	613b      	str	r3, [r7, #16]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	613b      	str	r3, [r7, #16]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	613b      	str	r3, [r7, #16]
 80098bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d019      	beq.n	8009902 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	330c      	adds	r3, #12
 80098d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	330c      	adds	r3, #12
 80098ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 80098f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80098f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098f6:	e841 2300 	strex	r3, r2, [r1]
 80098fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80098fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1e5      	bne.n	80098ce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3314      	adds	r3, #20
 8009908:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990c:	e853 3f00 	ldrex	r3, [r3]
 8009910:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	f043 0301 	orr.w	r3, r3, #1
 8009918:	657b      	str	r3, [r7, #84]	; 0x54
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3314      	adds	r3, #20
 8009920:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009922:	63ba      	str	r2, [r7, #56]	; 0x38
 8009924:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009926:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800992a:	e841 2300 	strex	r3, r2, [r1]
 800992e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1e5      	bne.n	8009902 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3314      	adds	r3, #20
 800993c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	e853 3f00 	ldrex	r3, [r3]
 8009944:	617b      	str	r3, [r7, #20]
   return(result);
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800994c:	653b      	str	r3, [r7, #80]	; 0x50
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3314      	adds	r3, #20
 8009954:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009956:	627a      	str	r2, [r7, #36]	; 0x24
 8009958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	6a39      	ldr	r1, [r7, #32]
 800995c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	61fb      	str	r3, [r7, #28]
   return(result);
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e5      	bne.n	8009936 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3760      	adds	r7, #96	; 0x60
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	08009653 	.word	0x08009653
 8009978:	08009779 	.word	0x08009779
 800997c:	080097af 	.word	0x080097af

08009980 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009980:	b480      	push	{r7}
 8009982:	b089      	sub	sp, #36	; 0x24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	330c      	adds	r3, #12
 800998e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	e853 3f00 	ldrex	r3, [r3]
 8009996:	60bb      	str	r3, [r7, #8]
   return(result);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800999e:	61fb      	str	r3, [r7, #28]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	330c      	adds	r3, #12
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	61ba      	str	r2, [r7, #24]
 80099aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ac:	6979      	ldr	r1, [r7, #20]
 80099ae:	69ba      	ldr	r2, [r7, #24]
 80099b0:	e841 2300 	strex	r3, r2, [r1]
 80099b4:	613b      	str	r3, [r7, #16]
   return(result);
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1e5      	bne.n	8009988 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2220      	movs	r2, #32
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80099c4:	bf00      	nop
 80099c6:	3724      	adds	r7, #36	; 0x24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b095      	sub	sp, #84	; 0x54
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	330c      	adds	r3, #12
 80099de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	330c      	adds	r3, #12
 80099f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099f8:	643a      	str	r2, [r7, #64]	; 0x40
 80099fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a00:	e841 2300 	strex	r3, r2, [r1]
 8009a04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e5      	bne.n	80099d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3314      	adds	r3, #20
 8009a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	e853 3f00 	ldrex	r3, [r3]
 8009a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	f023 0301 	bic.w	r3, r3, #1
 8009a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3314      	adds	r3, #20
 8009a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a34:	e841 2300 	strex	r3, r2, [r1]
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e5      	bne.n	8009a0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d119      	bne.n	8009a7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	330c      	adds	r3, #12
 8009a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	e853 3f00 	ldrex	r3, [r3]
 8009a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	f023 0310 	bic.w	r3, r3, #16
 8009a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	330c      	adds	r3, #12
 8009a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a68:	61ba      	str	r2, [r7, #24]
 8009a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6c:	6979      	ldr	r1, [r7, #20]
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	e841 2300 	strex	r3, r2, [r1]
 8009a74:	613b      	str	r3, [r7, #16]
   return(result);
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1e5      	bne.n	8009a48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a8a:	bf00      	nop
 8009a8c:	3754      	adds	r7, #84	; 0x54
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f7ff fd5d 	bl	8009570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ab6:	bf00      	nop
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b085      	sub	sp, #20
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b21      	cmp	r3, #33	; 0x21
 8009ad0:	d13e      	bne.n	8009b50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ada:	d114      	bne.n	8009b06 <UART_Transmit_IT+0x48>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d110      	bne.n	8009b06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a1b      	ldr	r3, [r3, #32]
 8009ae8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009af8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	1c9a      	adds	r2, r3, #2
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	621a      	str	r2, [r3, #32]
 8009b04:	e008      	b.n	8009b18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	1c59      	adds	r1, r3, #1
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	6211      	str	r1, [r2, #32]
 8009b10:	781a      	ldrb	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	4619      	mov	r1, r3
 8009b26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10f      	bne.n	8009b4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68da      	ldr	r2, [r3, #12]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e000      	b.n	8009b52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b50:	2302      	movs	r3, #2
  }
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2220      	movs	r2, #32
 8009b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7f7 f9fa 	bl	8000f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b08c      	sub	sp, #48	; 0x30
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b22      	cmp	r3, #34	; 0x22
 8009ba0:	f040 80ab 	bne.w	8009cfa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bac:	d117      	bne.n	8009bde <UART_Receive_IT+0x50>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d113      	bne.n	8009bde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd6:	1c9a      	adds	r2, r3, #2
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	629a      	str	r2, [r3, #40]	; 0x28
 8009bdc:	e026      	b.n	8009c2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009be4:	2300      	movs	r3, #0
 8009be6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bf0:	d007      	beq.n	8009c02 <UART_Receive_IT+0x74>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10a      	bne.n	8009c10 <UART_Receive_IT+0x82>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0c:	701a      	strb	r2, [r3, #0]
 8009c0e:	e008      	b.n	8009c22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c26:	1c5a      	adds	r2, r3, #1
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	3b01      	subs	r3, #1
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	4619      	mov	r1, r3
 8009c3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d15a      	bne.n	8009cf6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68da      	ldr	r2, [r3, #12]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f022 0220 	bic.w	r2, r2, #32
 8009c4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68da      	ldr	r2, [r3, #12]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	695a      	ldr	r2, [r3, #20]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f022 0201 	bic.w	r2, r2, #1
 8009c6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d135      	bne.n	8009cec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	330c      	adds	r3, #12
 8009c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	e853 3f00 	ldrex	r3, [r3]
 8009c94:	613b      	str	r3, [r7, #16]
   return(result);
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f023 0310 	bic.w	r3, r3, #16
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	330c      	adds	r3, #12
 8009ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca6:	623a      	str	r2, [r7, #32]
 8009ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009caa:	69f9      	ldr	r1, [r7, #28]
 8009cac:	6a3a      	ldr	r2, [r7, #32]
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1e5      	bne.n	8009c86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0310 	and.w	r3, r3, #16
 8009cc4:	2b10      	cmp	r3, #16
 8009cc6:	d10a      	bne.n	8009cde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7ff fc4d 	bl	8009584 <HAL_UARTEx_RxEventCallback>
 8009cea:	e002      	b.n	8009cf2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7f7 f96d 	bl	8000fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e002      	b.n	8009cfc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e000      	b.n	8009cfc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009cfa:	2302      	movs	r3, #2
  }
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3730      	adds	r7, #48	; 0x30
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d08:	b0c0      	sub	sp, #256	; 0x100
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d20:	68d9      	ldr	r1, [r3, #12]
 8009d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	ea40 0301 	orr.w	r3, r0, r1
 8009d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d32:	689a      	ldr	r2, [r3, #8]
 8009d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	431a      	orrs	r2, r3
 8009d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	431a      	orrs	r2, r3
 8009d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009d5c:	f021 010c 	bic.w	r1, r1, #12
 8009d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d6a:	430b      	orrs	r3, r1
 8009d6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d7e:	6999      	ldr	r1, [r3, #24]
 8009d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	ea40 0301 	orr.w	r3, r0, r1
 8009d8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	4b8f      	ldr	r3, [pc, #572]	; (8009fd0 <UART_SetConfig+0x2cc>)
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d005      	beq.n	8009da4 <UART_SetConfig+0xa0>
 8009d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	4b8d      	ldr	r3, [pc, #564]	; (8009fd4 <UART_SetConfig+0x2d0>)
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d104      	bne.n	8009dae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009da4:	f7fd fae0 	bl	8007368 <HAL_RCC_GetPCLK2Freq>
 8009da8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009dac:	e003      	b.n	8009db6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009dae:	f7fd fac7 	bl	8007340 <HAL_RCC_GetPCLK1Freq>
 8009db2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dba:	69db      	ldr	r3, [r3, #28]
 8009dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dc0:	f040 810c 	bne.w	8009fdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009dce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009dd6:	4622      	mov	r2, r4
 8009dd8:	462b      	mov	r3, r5
 8009dda:	1891      	adds	r1, r2, r2
 8009ddc:	65b9      	str	r1, [r7, #88]	; 0x58
 8009dde:	415b      	adcs	r3, r3
 8009de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009de2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009de6:	4621      	mov	r1, r4
 8009de8:	eb12 0801 	adds.w	r8, r2, r1
 8009dec:	4629      	mov	r1, r5
 8009dee:	eb43 0901 	adc.w	r9, r3, r1
 8009df2:	f04f 0200 	mov.w	r2, #0
 8009df6:	f04f 0300 	mov.w	r3, #0
 8009dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e06:	4690      	mov	r8, r2
 8009e08:	4699      	mov	r9, r3
 8009e0a:	4623      	mov	r3, r4
 8009e0c:	eb18 0303 	adds.w	r3, r8, r3
 8009e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e14:	462b      	mov	r3, r5
 8009e16:	eb49 0303 	adc.w	r3, r9, r3
 8009e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009e32:	460b      	mov	r3, r1
 8009e34:	18db      	adds	r3, r3, r3
 8009e36:	653b      	str	r3, [r7, #80]	; 0x50
 8009e38:	4613      	mov	r3, r2
 8009e3a:	eb42 0303 	adc.w	r3, r2, r3
 8009e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8009e40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009e44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009e48:	f7f6 fe9a 	bl	8000b80 <__aeabi_uldivmod>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4b61      	ldr	r3, [pc, #388]	; (8009fd8 <UART_SetConfig+0x2d4>)
 8009e52:	fba3 2302 	umull	r2, r3, r3, r2
 8009e56:	095b      	lsrs	r3, r3, #5
 8009e58:	011c      	lsls	r4, r3, #4
 8009e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009e68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009e6c:	4642      	mov	r2, r8
 8009e6e:	464b      	mov	r3, r9
 8009e70:	1891      	adds	r1, r2, r2
 8009e72:	64b9      	str	r1, [r7, #72]	; 0x48
 8009e74:	415b      	adcs	r3, r3
 8009e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009e7c:	4641      	mov	r1, r8
 8009e7e:	eb12 0a01 	adds.w	sl, r2, r1
 8009e82:	4649      	mov	r1, r9
 8009e84:	eb43 0b01 	adc.w	fp, r3, r1
 8009e88:	f04f 0200 	mov.w	r2, #0
 8009e8c:	f04f 0300 	mov.w	r3, #0
 8009e90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e9c:	4692      	mov	sl, r2
 8009e9e:	469b      	mov	fp, r3
 8009ea0:	4643      	mov	r3, r8
 8009ea2:	eb1a 0303 	adds.w	r3, sl, r3
 8009ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009eaa:	464b      	mov	r3, r9
 8009eac:	eb4b 0303 	adc.w	r3, fp, r3
 8009eb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ec0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009ec4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	18db      	adds	r3, r3, r3
 8009ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8009ece:	4613      	mov	r3, r2
 8009ed0:	eb42 0303 	adc.w	r3, r2, r3
 8009ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8009ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009eda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009ede:	f7f6 fe4f 	bl	8000b80 <__aeabi_uldivmod>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	4b3b      	ldr	r3, [pc, #236]	; (8009fd8 <UART_SetConfig+0x2d4>)
 8009eea:	fba3 2301 	umull	r2, r3, r3, r1
 8009eee:	095b      	lsrs	r3, r3, #5
 8009ef0:	2264      	movs	r2, #100	; 0x64
 8009ef2:	fb02 f303 	mul.w	r3, r2, r3
 8009ef6:	1acb      	subs	r3, r1, r3
 8009ef8:	00db      	lsls	r3, r3, #3
 8009efa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009efe:	4b36      	ldr	r3, [pc, #216]	; (8009fd8 <UART_SetConfig+0x2d4>)
 8009f00:	fba3 2302 	umull	r2, r3, r3, r2
 8009f04:	095b      	lsrs	r3, r3, #5
 8009f06:	005b      	lsls	r3, r3, #1
 8009f08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f0c:	441c      	add	r4, r3
 8009f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009f1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009f20:	4642      	mov	r2, r8
 8009f22:	464b      	mov	r3, r9
 8009f24:	1891      	adds	r1, r2, r2
 8009f26:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f28:	415b      	adcs	r3, r3
 8009f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f30:	4641      	mov	r1, r8
 8009f32:	1851      	adds	r1, r2, r1
 8009f34:	6339      	str	r1, [r7, #48]	; 0x30
 8009f36:	4649      	mov	r1, r9
 8009f38:	414b      	adcs	r3, r1
 8009f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	f04f 0300 	mov.w	r3, #0
 8009f44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009f48:	4659      	mov	r1, fp
 8009f4a:	00cb      	lsls	r3, r1, #3
 8009f4c:	4651      	mov	r1, sl
 8009f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f52:	4651      	mov	r1, sl
 8009f54:	00ca      	lsls	r2, r1, #3
 8009f56:	4610      	mov	r0, r2
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	4642      	mov	r2, r8
 8009f5e:	189b      	adds	r3, r3, r2
 8009f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f64:	464b      	mov	r3, r9
 8009f66:	460a      	mov	r2, r1
 8009f68:	eb42 0303 	adc.w	r3, r2, r3
 8009f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009f7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009f80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009f84:	460b      	mov	r3, r1
 8009f86:	18db      	adds	r3, r3, r3
 8009f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	eb42 0303 	adc.w	r3, r2, r3
 8009f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009f9a:	f7f6 fdf1 	bl	8000b80 <__aeabi_uldivmod>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4b0d      	ldr	r3, [pc, #52]	; (8009fd8 <UART_SetConfig+0x2d4>)
 8009fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8009fa8:	095b      	lsrs	r3, r3, #5
 8009faa:	2164      	movs	r1, #100	; 0x64
 8009fac:	fb01 f303 	mul.w	r3, r1, r3
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	00db      	lsls	r3, r3, #3
 8009fb4:	3332      	adds	r3, #50	; 0x32
 8009fb6:	4a08      	ldr	r2, [pc, #32]	; (8009fd8 <UART_SetConfig+0x2d4>)
 8009fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8009fbc:	095b      	lsrs	r3, r3, #5
 8009fbe:	f003 0207 	and.w	r2, r3, #7
 8009fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4422      	add	r2, r4
 8009fca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009fcc:	e105      	b.n	800a1da <UART_SetConfig+0x4d6>
 8009fce:	bf00      	nop
 8009fd0:	40011000 	.word	0x40011000
 8009fd4:	40011400 	.word	0x40011400
 8009fd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009fe6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009fea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009fee:	4642      	mov	r2, r8
 8009ff0:	464b      	mov	r3, r9
 8009ff2:	1891      	adds	r1, r2, r2
 8009ff4:	6239      	str	r1, [r7, #32]
 8009ff6:	415b      	adcs	r3, r3
 8009ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8009ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ffe:	4641      	mov	r1, r8
 800a000:	1854      	adds	r4, r2, r1
 800a002:	4649      	mov	r1, r9
 800a004:	eb43 0501 	adc.w	r5, r3, r1
 800a008:	f04f 0200 	mov.w	r2, #0
 800a00c:	f04f 0300 	mov.w	r3, #0
 800a010:	00eb      	lsls	r3, r5, #3
 800a012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a016:	00e2      	lsls	r2, r4, #3
 800a018:	4614      	mov	r4, r2
 800a01a:	461d      	mov	r5, r3
 800a01c:	4643      	mov	r3, r8
 800a01e:	18e3      	adds	r3, r4, r3
 800a020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a024:	464b      	mov	r3, r9
 800a026:	eb45 0303 	adc.w	r3, r5, r3
 800a02a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a03a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a03e:	f04f 0200 	mov.w	r2, #0
 800a042:	f04f 0300 	mov.w	r3, #0
 800a046:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a04a:	4629      	mov	r1, r5
 800a04c:	008b      	lsls	r3, r1, #2
 800a04e:	4621      	mov	r1, r4
 800a050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a054:	4621      	mov	r1, r4
 800a056:	008a      	lsls	r2, r1, #2
 800a058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a05c:	f7f6 fd90 	bl	8000b80 <__aeabi_uldivmod>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4b60      	ldr	r3, [pc, #384]	; (800a1e8 <UART_SetConfig+0x4e4>)
 800a066:	fba3 2302 	umull	r2, r3, r3, r2
 800a06a:	095b      	lsrs	r3, r3, #5
 800a06c:	011c      	lsls	r4, r3, #4
 800a06e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a072:	2200      	movs	r2, #0
 800a074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a078:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a07c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a080:	4642      	mov	r2, r8
 800a082:	464b      	mov	r3, r9
 800a084:	1891      	adds	r1, r2, r2
 800a086:	61b9      	str	r1, [r7, #24]
 800a088:	415b      	adcs	r3, r3
 800a08a:	61fb      	str	r3, [r7, #28]
 800a08c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a090:	4641      	mov	r1, r8
 800a092:	1851      	adds	r1, r2, r1
 800a094:	6139      	str	r1, [r7, #16]
 800a096:	4649      	mov	r1, r9
 800a098:	414b      	adcs	r3, r1
 800a09a:	617b      	str	r3, [r7, #20]
 800a09c:	f04f 0200 	mov.w	r2, #0
 800a0a0:	f04f 0300 	mov.w	r3, #0
 800a0a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a0a8:	4659      	mov	r1, fp
 800a0aa:	00cb      	lsls	r3, r1, #3
 800a0ac:	4651      	mov	r1, sl
 800a0ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0b2:	4651      	mov	r1, sl
 800a0b4:	00ca      	lsls	r2, r1, #3
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	4642      	mov	r2, r8
 800a0be:	189b      	adds	r3, r3, r2
 800a0c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0c4:	464b      	mov	r3, r9
 800a0c6:	460a      	mov	r2, r1
 800a0c8:	eb42 0303 	adc.w	r3, r2, r3
 800a0cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a0dc:	f04f 0200 	mov.w	r2, #0
 800a0e0:	f04f 0300 	mov.w	r3, #0
 800a0e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a0e8:	4649      	mov	r1, r9
 800a0ea:	008b      	lsls	r3, r1, #2
 800a0ec:	4641      	mov	r1, r8
 800a0ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0f2:	4641      	mov	r1, r8
 800a0f4:	008a      	lsls	r2, r1, #2
 800a0f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a0fa:	f7f6 fd41 	bl	8000b80 <__aeabi_uldivmod>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4b39      	ldr	r3, [pc, #228]	; (800a1e8 <UART_SetConfig+0x4e4>)
 800a104:	fba3 1302 	umull	r1, r3, r3, r2
 800a108:	095b      	lsrs	r3, r3, #5
 800a10a:	2164      	movs	r1, #100	; 0x64
 800a10c:	fb01 f303 	mul.w	r3, r1, r3
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	011b      	lsls	r3, r3, #4
 800a114:	3332      	adds	r3, #50	; 0x32
 800a116:	4a34      	ldr	r2, [pc, #208]	; (800a1e8 <UART_SetConfig+0x4e4>)
 800a118:	fba2 2303 	umull	r2, r3, r2, r3
 800a11c:	095b      	lsrs	r3, r3, #5
 800a11e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a122:	441c      	add	r4, r3
 800a124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a128:	2200      	movs	r2, #0
 800a12a:	673b      	str	r3, [r7, #112]	; 0x70
 800a12c:	677a      	str	r2, [r7, #116]	; 0x74
 800a12e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a132:	4642      	mov	r2, r8
 800a134:	464b      	mov	r3, r9
 800a136:	1891      	adds	r1, r2, r2
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	415b      	adcs	r3, r3
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a142:	4641      	mov	r1, r8
 800a144:	1851      	adds	r1, r2, r1
 800a146:	6039      	str	r1, [r7, #0]
 800a148:	4649      	mov	r1, r9
 800a14a:	414b      	adcs	r3, r1
 800a14c:	607b      	str	r3, [r7, #4]
 800a14e:	f04f 0200 	mov.w	r2, #0
 800a152:	f04f 0300 	mov.w	r3, #0
 800a156:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a15a:	4659      	mov	r1, fp
 800a15c:	00cb      	lsls	r3, r1, #3
 800a15e:	4651      	mov	r1, sl
 800a160:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a164:	4651      	mov	r1, sl
 800a166:	00ca      	lsls	r2, r1, #3
 800a168:	4610      	mov	r0, r2
 800a16a:	4619      	mov	r1, r3
 800a16c:	4603      	mov	r3, r0
 800a16e:	4642      	mov	r2, r8
 800a170:	189b      	adds	r3, r3, r2
 800a172:	66bb      	str	r3, [r7, #104]	; 0x68
 800a174:	464b      	mov	r3, r9
 800a176:	460a      	mov	r2, r1
 800a178:	eb42 0303 	adc.w	r3, r2, r3
 800a17c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a17e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	663b      	str	r3, [r7, #96]	; 0x60
 800a188:	667a      	str	r2, [r7, #100]	; 0x64
 800a18a:	f04f 0200 	mov.w	r2, #0
 800a18e:	f04f 0300 	mov.w	r3, #0
 800a192:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a196:	4649      	mov	r1, r9
 800a198:	008b      	lsls	r3, r1, #2
 800a19a:	4641      	mov	r1, r8
 800a19c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1a0:	4641      	mov	r1, r8
 800a1a2:	008a      	lsls	r2, r1, #2
 800a1a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a1a8:	f7f6 fcea 	bl	8000b80 <__aeabi_uldivmod>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4b0d      	ldr	r3, [pc, #52]	; (800a1e8 <UART_SetConfig+0x4e4>)
 800a1b2:	fba3 1302 	umull	r1, r3, r3, r2
 800a1b6:	095b      	lsrs	r3, r3, #5
 800a1b8:	2164      	movs	r1, #100	; 0x64
 800a1ba:	fb01 f303 	mul.w	r3, r1, r3
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	011b      	lsls	r3, r3, #4
 800a1c2:	3332      	adds	r3, #50	; 0x32
 800a1c4:	4a08      	ldr	r2, [pc, #32]	; (800a1e8 <UART_SetConfig+0x4e4>)
 800a1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ca:	095b      	lsrs	r3, r3, #5
 800a1cc:	f003 020f 	and.w	r2, r3, #15
 800a1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4422      	add	r2, r4
 800a1d8:	609a      	str	r2, [r3, #8]
}
 800a1da:	bf00      	nop
 800a1dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1e6:	bf00      	nop
 800a1e8:	51eb851f 	.word	0x51eb851f

0800a1ec <cosf>:
 800a1ec:	ee10 3a10 	vmov	r3, s0
 800a1f0:	b507      	push	{r0, r1, r2, lr}
 800a1f2:	4a1e      	ldr	r2, [pc, #120]	; (800a26c <cosf+0x80>)
 800a1f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	dc06      	bgt.n	800a20a <cosf+0x1e>
 800a1fc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800a270 <cosf+0x84>
 800a200:	b003      	add	sp, #12
 800a202:	f85d eb04 	ldr.w	lr, [sp], #4
 800a206:	f001 b9af 	b.w	800b568 <__kernel_cosf>
 800a20a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a20e:	db04      	blt.n	800a21a <cosf+0x2e>
 800a210:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a214:	b003      	add	sp, #12
 800a216:	f85d fb04 	ldr.w	pc, [sp], #4
 800a21a:	4668      	mov	r0, sp
 800a21c:	f001 f868 	bl	800b2f0 <__ieee754_rem_pio2f>
 800a220:	f000 0003 	and.w	r0, r0, #3
 800a224:	2801      	cmp	r0, #1
 800a226:	d009      	beq.n	800a23c <cosf+0x50>
 800a228:	2802      	cmp	r0, #2
 800a22a:	d010      	beq.n	800a24e <cosf+0x62>
 800a22c:	b9b0      	cbnz	r0, 800a25c <cosf+0x70>
 800a22e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a232:	ed9d 0a00 	vldr	s0, [sp]
 800a236:	f001 f997 	bl	800b568 <__kernel_cosf>
 800a23a:	e7eb      	b.n	800a214 <cosf+0x28>
 800a23c:	eddd 0a01 	vldr	s1, [sp, #4]
 800a240:	ed9d 0a00 	vldr	s0, [sp]
 800a244:	f001 fc66 	bl	800bb14 <__kernel_sinf>
 800a248:	eeb1 0a40 	vneg.f32	s0, s0
 800a24c:	e7e2      	b.n	800a214 <cosf+0x28>
 800a24e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a252:	ed9d 0a00 	vldr	s0, [sp]
 800a256:	f001 f987 	bl	800b568 <__kernel_cosf>
 800a25a:	e7f5      	b.n	800a248 <cosf+0x5c>
 800a25c:	eddd 0a01 	vldr	s1, [sp, #4]
 800a260:	ed9d 0a00 	vldr	s0, [sp]
 800a264:	2001      	movs	r0, #1
 800a266:	f001 fc55 	bl	800bb14 <__kernel_sinf>
 800a26a:	e7d3      	b.n	800a214 <cosf+0x28>
 800a26c:	3f490fd8 	.word	0x3f490fd8
 800a270:	00000000 	.word	0x00000000

0800a274 <fminf>:
 800a274:	b508      	push	{r3, lr}
 800a276:	ed2d 8b02 	vpush	{d8}
 800a27a:	eeb0 8a40 	vmov.f32	s16, s0
 800a27e:	eef0 8a60 	vmov.f32	s17, s1
 800a282:	f000 f813 	bl	800a2ac <__fpclassifyf>
 800a286:	b148      	cbz	r0, 800a29c <fminf+0x28>
 800a288:	eeb0 0a68 	vmov.f32	s0, s17
 800a28c:	f000 f80e 	bl	800a2ac <__fpclassifyf>
 800a290:	b130      	cbz	r0, 800a2a0 <fminf+0x2c>
 800a292:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a29a:	d401      	bmi.n	800a2a0 <fminf+0x2c>
 800a29c:	eeb0 8a68 	vmov.f32	s16, s17
 800a2a0:	eeb0 0a48 	vmov.f32	s0, s16
 800a2a4:	ecbd 8b02 	vpop	{d8}
 800a2a8:	bd08      	pop	{r3, pc}
	...

0800a2ac <__fpclassifyf>:
 800a2ac:	ee10 3a10 	vmov	r3, s0
 800a2b0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800a2b4:	d00d      	beq.n	800a2d2 <__fpclassifyf+0x26>
 800a2b6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800a2ba:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a2be:	d30a      	bcc.n	800a2d6 <__fpclassifyf+0x2a>
 800a2c0:	4b07      	ldr	r3, [pc, #28]	; (800a2e0 <__fpclassifyf+0x34>)
 800a2c2:	1e42      	subs	r2, r0, #1
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d908      	bls.n	800a2da <__fpclassifyf+0x2e>
 800a2c8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800a2cc:	4258      	negs	r0, r3
 800a2ce:	4158      	adcs	r0, r3
 800a2d0:	4770      	bx	lr
 800a2d2:	2002      	movs	r0, #2
 800a2d4:	4770      	bx	lr
 800a2d6:	2004      	movs	r0, #4
 800a2d8:	4770      	bx	lr
 800a2da:	2003      	movs	r0, #3
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	007ffffe 	.word	0x007ffffe

0800a2e4 <sinf>:
 800a2e4:	ee10 3a10 	vmov	r3, s0
 800a2e8:	b507      	push	{r0, r1, r2, lr}
 800a2ea:	4a1f      	ldr	r2, [pc, #124]	; (800a368 <sinf+0x84>)
 800a2ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	dc07      	bgt.n	800a304 <sinf+0x20>
 800a2f4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a36c <sinf+0x88>
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	b003      	add	sp, #12
 800a2fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a300:	f001 bc08 	b.w	800bb14 <__kernel_sinf>
 800a304:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a308:	db04      	blt.n	800a314 <sinf+0x30>
 800a30a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a30e:	b003      	add	sp, #12
 800a310:	f85d fb04 	ldr.w	pc, [sp], #4
 800a314:	4668      	mov	r0, sp
 800a316:	f000 ffeb 	bl	800b2f0 <__ieee754_rem_pio2f>
 800a31a:	f000 0003 	and.w	r0, r0, #3
 800a31e:	2801      	cmp	r0, #1
 800a320:	d00a      	beq.n	800a338 <sinf+0x54>
 800a322:	2802      	cmp	r0, #2
 800a324:	d00f      	beq.n	800a346 <sinf+0x62>
 800a326:	b9c0      	cbnz	r0, 800a35a <sinf+0x76>
 800a328:	eddd 0a01 	vldr	s1, [sp, #4]
 800a32c:	ed9d 0a00 	vldr	s0, [sp]
 800a330:	2001      	movs	r0, #1
 800a332:	f001 fbef 	bl	800bb14 <__kernel_sinf>
 800a336:	e7ea      	b.n	800a30e <sinf+0x2a>
 800a338:	eddd 0a01 	vldr	s1, [sp, #4]
 800a33c:	ed9d 0a00 	vldr	s0, [sp]
 800a340:	f001 f912 	bl	800b568 <__kernel_cosf>
 800a344:	e7e3      	b.n	800a30e <sinf+0x2a>
 800a346:	eddd 0a01 	vldr	s1, [sp, #4]
 800a34a:	ed9d 0a00 	vldr	s0, [sp]
 800a34e:	2001      	movs	r0, #1
 800a350:	f001 fbe0 	bl	800bb14 <__kernel_sinf>
 800a354:	eeb1 0a40 	vneg.f32	s0, s0
 800a358:	e7d9      	b.n	800a30e <sinf+0x2a>
 800a35a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a35e:	ed9d 0a00 	vldr	s0, [sp]
 800a362:	f001 f901 	bl	800b568 <__kernel_cosf>
 800a366:	e7f5      	b.n	800a354 <sinf+0x70>
 800a368:	3f490fd8 	.word	0x3f490fd8
 800a36c:	00000000 	.word	0x00000000

0800a370 <atan2>:
 800a370:	f000 b872 	b.w	800a458 <__ieee754_atan2>

0800a374 <pow>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	ed2d 8b02 	vpush	{d8}
 800a37a:	eeb0 8a40 	vmov.f32	s16, s0
 800a37e:	eef0 8a60 	vmov.f32	s17, s1
 800a382:	ec55 4b11 	vmov	r4, r5, d1
 800a386:	f000 f933 	bl	800a5f0 <__ieee754_pow>
 800a38a:	4622      	mov	r2, r4
 800a38c:	462b      	mov	r3, r5
 800a38e:	4620      	mov	r0, r4
 800a390:	4629      	mov	r1, r5
 800a392:	ec57 6b10 	vmov	r6, r7, d0
 800a396:	f7f6 fb8d 	bl	8000ab4 <__aeabi_dcmpun>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d13b      	bne.n	800a416 <pow+0xa2>
 800a39e:	ec51 0b18 	vmov	r0, r1, d8
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f7f6 fb53 	bl	8000a50 <__aeabi_dcmpeq>
 800a3aa:	b1b8      	cbz	r0, 800a3dc <pow+0x68>
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	f7f6 fb4c 	bl	8000a50 <__aeabi_dcmpeq>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d146      	bne.n	800a44a <pow+0xd6>
 800a3bc:	ec45 4b10 	vmov	d0, r4, r5
 800a3c0:	f001 fdcb 	bl	800bf5a <finite>
 800a3c4:	b338      	cbz	r0, 800a416 <pow+0xa2>
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	f7f6 fb49 	bl	8000a64 <__aeabi_dcmplt>
 800a3d2:	b300      	cbz	r0, 800a416 <pow+0xa2>
 800a3d4:	f001 ffe2 	bl	800c39c <__errno>
 800a3d8:	2322      	movs	r3, #34	; 0x22
 800a3da:	e01b      	b.n	800a414 <pow+0xa0>
 800a3dc:	ec47 6b10 	vmov	d0, r6, r7
 800a3e0:	f001 fdbb 	bl	800bf5a <finite>
 800a3e4:	b9e0      	cbnz	r0, 800a420 <pow+0xac>
 800a3e6:	eeb0 0a48 	vmov.f32	s0, s16
 800a3ea:	eef0 0a68 	vmov.f32	s1, s17
 800a3ee:	f001 fdb4 	bl	800bf5a <finite>
 800a3f2:	b1a8      	cbz	r0, 800a420 <pow+0xac>
 800a3f4:	ec45 4b10 	vmov	d0, r4, r5
 800a3f8:	f001 fdaf 	bl	800bf5a <finite>
 800a3fc:	b180      	cbz	r0, 800a420 <pow+0xac>
 800a3fe:	4632      	mov	r2, r6
 800a400:	463b      	mov	r3, r7
 800a402:	4630      	mov	r0, r6
 800a404:	4639      	mov	r1, r7
 800a406:	f7f6 fb55 	bl	8000ab4 <__aeabi_dcmpun>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d0e2      	beq.n	800a3d4 <pow+0x60>
 800a40e:	f001 ffc5 	bl	800c39c <__errno>
 800a412:	2321      	movs	r3, #33	; 0x21
 800a414:	6003      	str	r3, [r0, #0]
 800a416:	ecbd 8b02 	vpop	{d8}
 800a41a:	ec47 6b10 	vmov	d0, r6, r7
 800a41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a420:	2200      	movs	r2, #0
 800a422:	2300      	movs	r3, #0
 800a424:	4630      	mov	r0, r6
 800a426:	4639      	mov	r1, r7
 800a428:	f7f6 fb12 	bl	8000a50 <__aeabi_dcmpeq>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d0f2      	beq.n	800a416 <pow+0xa2>
 800a430:	eeb0 0a48 	vmov.f32	s0, s16
 800a434:	eef0 0a68 	vmov.f32	s1, s17
 800a438:	f001 fd8f 	bl	800bf5a <finite>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d0ea      	beq.n	800a416 <pow+0xa2>
 800a440:	ec45 4b10 	vmov	d0, r4, r5
 800a444:	f001 fd89 	bl	800bf5a <finite>
 800a448:	e7c3      	b.n	800a3d2 <pow+0x5e>
 800a44a:	4f01      	ldr	r7, [pc, #4]	; (800a450 <pow+0xdc>)
 800a44c:	2600      	movs	r6, #0
 800a44e:	e7e2      	b.n	800a416 <pow+0xa2>
 800a450:	3ff00000 	.word	0x3ff00000

0800a454 <atan2f>:
 800a454:	f000 beac 	b.w	800b1b0 <__ieee754_atan2f>

0800a458 <__ieee754_atan2>:
 800a458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a45c:	ec57 6b11 	vmov	r6, r7, d1
 800a460:	4273      	negs	r3, r6
 800a462:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a5e8 <__ieee754_atan2+0x190>
 800a466:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a46a:	4333      	orrs	r3, r6
 800a46c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a470:	4573      	cmp	r3, lr
 800a472:	ec51 0b10 	vmov	r0, r1, d0
 800a476:	ee11 8a10 	vmov	r8, s2
 800a47a:	d80a      	bhi.n	800a492 <__ieee754_atan2+0x3a>
 800a47c:	4244      	negs	r4, r0
 800a47e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a482:	4304      	orrs	r4, r0
 800a484:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a488:	4574      	cmp	r4, lr
 800a48a:	ee10 9a10 	vmov	r9, s0
 800a48e:	468c      	mov	ip, r1
 800a490:	d907      	bls.n	800a4a2 <__ieee754_atan2+0x4a>
 800a492:	4632      	mov	r2, r6
 800a494:	463b      	mov	r3, r7
 800a496:	f7f5 febd 	bl	8000214 <__adddf3>
 800a49a:	ec41 0b10 	vmov	d0, r0, r1
 800a49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a4a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a4aa:	4334      	orrs	r4, r6
 800a4ac:	d103      	bne.n	800a4b6 <__ieee754_atan2+0x5e>
 800a4ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b2:	f001 bba9 	b.w	800bc08 <atan>
 800a4b6:	17bc      	asrs	r4, r7, #30
 800a4b8:	f004 0402 	and.w	r4, r4, #2
 800a4bc:	ea53 0909 	orrs.w	r9, r3, r9
 800a4c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a4c4:	d107      	bne.n	800a4d6 <__ieee754_atan2+0x7e>
 800a4c6:	2c02      	cmp	r4, #2
 800a4c8:	d060      	beq.n	800a58c <__ieee754_atan2+0x134>
 800a4ca:	2c03      	cmp	r4, #3
 800a4cc:	d1e5      	bne.n	800a49a <__ieee754_atan2+0x42>
 800a4ce:	a142      	add	r1, pc, #264	; (adr r1, 800a5d8 <__ieee754_atan2+0x180>)
 800a4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4d4:	e7e1      	b.n	800a49a <__ieee754_atan2+0x42>
 800a4d6:	ea52 0808 	orrs.w	r8, r2, r8
 800a4da:	d106      	bne.n	800a4ea <__ieee754_atan2+0x92>
 800a4dc:	f1bc 0f00 	cmp.w	ip, #0
 800a4e0:	da5f      	bge.n	800a5a2 <__ieee754_atan2+0x14a>
 800a4e2:	a13f      	add	r1, pc, #252	; (adr r1, 800a5e0 <__ieee754_atan2+0x188>)
 800a4e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4e8:	e7d7      	b.n	800a49a <__ieee754_atan2+0x42>
 800a4ea:	4572      	cmp	r2, lr
 800a4ec:	d10f      	bne.n	800a50e <__ieee754_atan2+0xb6>
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a4f4:	d107      	bne.n	800a506 <__ieee754_atan2+0xae>
 800a4f6:	2c02      	cmp	r4, #2
 800a4f8:	d84c      	bhi.n	800a594 <__ieee754_atan2+0x13c>
 800a4fa:	4b35      	ldr	r3, [pc, #212]	; (800a5d0 <__ieee754_atan2+0x178>)
 800a4fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a500:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a504:	e7c9      	b.n	800a49a <__ieee754_atan2+0x42>
 800a506:	2c02      	cmp	r4, #2
 800a508:	d848      	bhi.n	800a59c <__ieee754_atan2+0x144>
 800a50a:	4b32      	ldr	r3, [pc, #200]	; (800a5d4 <__ieee754_atan2+0x17c>)
 800a50c:	e7f6      	b.n	800a4fc <__ieee754_atan2+0xa4>
 800a50e:	4573      	cmp	r3, lr
 800a510:	d0e4      	beq.n	800a4dc <__ieee754_atan2+0x84>
 800a512:	1a9b      	subs	r3, r3, r2
 800a514:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a518:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a51c:	da1e      	bge.n	800a55c <__ieee754_atan2+0x104>
 800a51e:	2f00      	cmp	r7, #0
 800a520:	da01      	bge.n	800a526 <__ieee754_atan2+0xce>
 800a522:	323c      	adds	r2, #60	; 0x3c
 800a524:	db1e      	blt.n	800a564 <__ieee754_atan2+0x10c>
 800a526:	4632      	mov	r2, r6
 800a528:	463b      	mov	r3, r7
 800a52a:	f7f6 f953 	bl	80007d4 <__aeabi_ddiv>
 800a52e:	ec41 0b10 	vmov	d0, r0, r1
 800a532:	f001 fd09 	bl	800bf48 <fabs>
 800a536:	f001 fb67 	bl	800bc08 <atan>
 800a53a:	ec51 0b10 	vmov	r0, r1, d0
 800a53e:	2c01      	cmp	r4, #1
 800a540:	d013      	beq.n	800a56a <__ieee754_atan2+0x112>
 800a542:	2c02      	cmp	r4, #2
 800a544:	d015      	beq.n	800a572 <__ieee754_atan2+0x11a>
 800a546:	2c00      	cmp	r4, #0
 800a548:	d0a7      	beq.n	800a49a <__ieee754_atan2+0x42>
 800a54a:	a319      	add	r3, pc, #100	; (adr r3, 800a5b0 <__ieee754_atan2+0x158>)
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	f7f5 fe5e 	bl	8000210 <__aeabi_dsub>
 800a554:	a318      	add	r3, pc, #96	; (adr r3, 800a5b8 <__ieee754_atan2+0x160>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	e014      	b.n	800a586 <__ieee754_atan2+0x12e>
 800a55c:	a118      	add	r1, pc, #96	; (adr r1, 800a5c0 <__ieee754_atan2+0x168>)
 800a55e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a562:	e7ec      	b.n	800a53e <__ieee754_atan2+0xe6>
 800a564:	2000      	movs	r0, #0
 800a566:	2100      	movs	r1, #0
 800a568:	e7e9      	b.n	800a53e <__ieee754_atan2+0xe6>
 800a56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a56e:	4619      	mov	r1, r3
 800a570:	e793      	b.n	800a49a <__ieee754_atan2+0x42>
 800a572:	a30f      	add	r3, pc, #60	; (adr r3, 800a5b0 <__ieee754_atan2+0x158>)
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f7f5 fe4a 	bl	8000210 <__aeabi_dsub>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	a10d      	add	r1, pc, #52	; (adr r1, 800a5b8 <__ieee754_atan2+0x160>)
 800a582:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a586:	f7f5 fe43 	bl	8000210 <__aeabi_dsub>
 800a58a:	e786      	b.n	800a49a <__ieee754_atan2+0x42>
 800a58c:	a10a      	add	r1, pc, #40	; (adr r1, 800a5b8 <__ieee754_atan2+0x160>)
 800a58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a592:	e782      	b.n	800a49a <__ieee754_atan2+0x42>
 800a594:	a10c      	add	r1, pc, #48	; (adr r1, 800a5c8 <__ieee754_atan2+0x170>)
 800a596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a59a:	e77e      	b.n	800a49a <__ieee754_atan2+0x42>
 800a59c:	2000      	movs	r0, #0
 800a59e:	2100      	movs	r1, #0
 800a5a0:	e77b      	b.n	800a49a <__ieee754_atan2+0x42>
 800a5a2:	a107      	add	r1, pc, #28	; (adr r1, 800a5c0 <__ieee754_atan2+0x168>)
 800a5a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a8:	e777      	b.n	800a49a <__ieee754_atan2+0x42>
 800a5aa:	bf00      	nop
 800a5ac:	f3af 8000 	nop.w
 800a5b0:	33145c07 	.word	0x33145c07
 800a5b4:	3ca1a626 	.word	0x3ca1a626
 800a5b8:	54442d18 	.word	0x54442d18
 800a5bc:	400921fb 	.word	0x400921fb
 800a5c0:	54442d18 	.word	0x54442d18
 800a5c4:	3ff921fb 	.word	0x3ff921fb
 800a5c8:	54442d18 	.word	0x54442d18
 800a5cc:	3fe921fb 	.word	0x3fe921fb
 800a5d0:	0800c438 	.word	0x0800c438
 800a5d4:	0800c450 	.word	0x0800c450
 800a5d8:	54442d18 	.word	0x54442d18
 800a5dc:	c00921fb 	.word	0xc00921fb
 800a5e0:	54442d18 	.word	0x54442d18
 800a5e4:	bff921fb 	.word	0xbff921fb
 800a5e8:	7ff00000 	.word	0x7ff00000
 800a5ec:	00000000 	.word	0x00000000

0800a5f0 <__ieee754_pow>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	ed2d 8b06 	vpush	{d8-d10}
 800a5f8:	b089      	sub	sp, #36	; 0x24
 800a5fa:	ed8d 1b00 	vstr	d1, [sp]
 800a5fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a602:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a606:	ea58 0102 	orrs.w	r1, r8, r2
 800a60a:	ec57 6b10 	vmov	r6, r7, d0
 800a60e:	d115      	bne.n	800a63c <__ieee754_pow+0x4c>
 800a610:	19b3      	adds	r3, r6, r6
 800a612:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a616:	4152      	adcs	r2, r2
 800a618:	4299      	cmp	r1, r3
 800a61a:	4b89      	ldr	r3, [pc, #548]	; (800a840 <__ieee754_pow+0x250>)
 800a61c:	4193      	sbcs	r3, r2
 800a61e:	f080 84d2 	bcs.w	800afc6 <__ieee754_pow+0x9d6>
 800a622:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a626:	4630      	mov	r0, r6
 800a628:	4639      	mov	r1, r7
 800a62a:	f7f5 fdf3 	bl	8000214 <__adddf3>
 800a62e:	ec41 0b10 	vmov	d0, r0, r1
 800a632:	b009      	add	sp, #36	; 0x24
 800a634:	ecbd 8b06 	vpop	{d8-d10}
 800a638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63c:	4b81      	ldr	r3, [pc, #516]	; (800a844 <__ieee754_pow+0x254>)
 800a63e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a642:	429c      	cmp	r4, r3
 800a644:	ee10 aa10 	vmov	sl, s0
 800a648:	463d      	mov	r5, r7
 800a64a:	dc06      	bgt.n	800a65a <__ieee754_pow+0x6a>
 800a64c:	d101      	bne.n	800a652 <__ieee754_pow+0x62>
 800a64e:	2e00      	cmp	r6, #0
 800a650:	d1e7      	bne.n	800a622 <__ieee754_pow+0x32>
 800a652:	4598      	cmp	r8, r3
 800a654:	dc01      	bgt.n	800a65a <__ieee754_pow+0x6a>
 800a656:	d10f      	bne.n	800a678 <__ieee754_pow+0x88>
 800a658:	b172      	cbz	r2, 800a678 <__ieee754_pow+0x88>
 800a65a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a65e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a662:	ea55 050a 	orrs.w	r5, r5, sl
 800a666:	d1dc      	bne.n	800a622 <__ieee754_pow+0x32>
 800a668:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a66c:	18db      	adds	r3, r3, r3
 800a66e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a672:	4152      	adcs	r2, r2
 800a674:	429d      	cmp	r5, r3
 800a676:	e7d0      	b.n	800a61a <__ieee754_pow+0x2a>
 800a678:	2d00      	cmp	r5, #0
 800a67a:	da3b      	bge.n	800a6f4 <__ieee754_pow+0x104>
 800a67c:	4b72      	ldr	r3, [pc, #456]	; (800a848 <__ieee754_pow+0x258>)
 800a67e:	4598      	cmp	r8, r3
 800a680:	dc51      	bgt.n	800a726 <__ieee754_pow+0x136>
 800a682:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a686:	4598      	cmp	r8, r3
 800a688:	f340 84ac 	ble.w	800afe4 <__ieee754_pow+0x9f4>
 800a68c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a690:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a694:	2b14      	cmp	r3, #20
 800a696:	dd0f      	ble.n	800a6b8 <__ieee754_pow+0xc8>
 800a698:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a69c:	fa22 f103 	lsr.w	r1, r2, r3
 800a6a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	f040 849d 	bne.w	800afe4 <__ieee754_pow+0x9f4>
 800a6aa:	f001 0101 	and.w	r1, r1, #1
 800a6ae:	f1c1 0302 	rsb	r3, r1, #2
 800a6b2:	9304      	str	r3, [sp, #16]
 800a6b4:	b182      	cbz	r2, 800a6d8 <__ieee754_pow+0xe8>
 800a6b6:	e05f      	b.n	800a778 <__ieee754_pow+0x188>
 800a6b8:	2a00      	cmp	r2, #0
 800a6ba:	d15b      	bne.n	800a774 <__ieee754_pow+0x184>
 800a6bc:	f1c3 0314 	rsb	r3, r3, #20
 800a6c0:	fa48 f103 	asr.w	r1, r8, r3
 800a6c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6c8:	4543      	cmp	r3, r8
 800a6ca:	f040 8488 	bne.w	800afde <__ieee754_pow+0x9ee>
 800a6ce:	f001 0101 	and.w	r1, r1, #1
 800a6d2:	f1c1 0302 	rsb	r3, r1, #2
 800a6d6:	9304      	str	r3, [sp, #16]
 800a6d8:	4b5c      	ldr	r3, [pc, #368]	; (800a84c <__ieee754_pow+0x25c>)
 800a6da:	4598      	cmp	r8, r3
 800a6dc:	d132      	bne.n	800a744 <__ieee754_pow+0x154>
 800a6de:	f1b9 0f00 	cmp.w	r9, #0
 800a6e2:	f280 8478 	bge.w	800afd6 <__ieee754_pow+0x9e6>
 800a6e6:	4959      	ldr	r1, [pc, #356]	; (800a84c <__ieee754_pow+0x25c>)
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	f7f6 f871 	bl	80007d4 <__aeabi_ddiv>
 800a6f2:	e79c      	b.n	800a62e <__ieee754_pow+0x3e>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	9304      	str	r3, [sp, #16]
 800a6f8:	2a00      	cmp	r2, #0
 800a6fa:	d13d      	bne.n	800a778 <__ieee754_pow+0x188>
 800a6fc:	4b51      	ldr	r3, [pc, #324]	; (800a844 <__ieee754_pow+0x254>)
 800a6fe:	4598      	cmp	r8, r3
 800a700:	d1ea      	bne.n	800a6d8 <__ieee754_pow+0xe8>
 800a702:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a706:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a70a:	ea53 030a 	orrs.w	r3, r3, sl
 800a70e:	f000 845a 	beq.w	800afc6 <__ieee754_pow+0x9d6>
 800a712:	4b4f      	ldr	r3, [pc, #316]	; (800a850 <__ieee754_pow+0x260>)
 800a714:	429c      	cmp	r4, r3
 800a716:	dd08      	ble.n	800a72a <__ieee754_pow+0x13a>
 800a718:	f1b9 0f00 	cmp.w	r9, #0
 800a71c:	f2c0 8457 	blt.w	800afce <__ieee754_pow+0x9de>
 800a720:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a724:	e783      	b.n	800a62e <__ieee754_pow+0x3e>
 800a726:	2302      	movs	r3, #2
 800a728:	e7e5      	b.n	800a6f6 <__ieee754_pow+0x106>
 800a72a:	f1b9 0f00 	cmp.w	r9, #0
 800a72e:	f04f 0000 	mov.w	r0, #0
 800a732:	f04f 0100 	mov.w	r1, #0
 800a736:	f6bf af7a 	bge.w	800a62e <__ieee754_pow+0x3e>
 800a73a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a73e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a742:	e774      	b.n	800a62e <__ieee754_pow+0x3e>
 800a744:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a748:	d106      	bne.n	800a758 <__ieee754_pow+0x168>
 800a74a:	4632      	mov	r2, r6
 800a74c:	463b      	mov	r3, r7
 800a74e:	4630      	mov	r0, r6
 800a750:	4639      	mov	r1, r7
 800a752:	f7f5 ff15 	bl	8000580 <__aeabi_dmul>
 800a756:	e76a      	b.n	800a62e <__ieee754_pow+0x3e>
 800a758:	4b3e      	ldr	r3, [pc, #248]	; (800a854 <__ieee754_pow+0x264>)
 800a75a:	4599      	cmp	r9, r3
 800a75c:	d10c      	bne.n	800a778 <__ieee754_pow+0x188>
 800a75e:	2d00      	cmp	r5, #0
 800a760:	db0a      	blt.n	800a778 <__ieee754_pow+0x188>
 800a762:	ec47 6b10 	vmov	d0, r6, r7
 800a766:	b009      	add	sp, #36	; 0x24
 800a768:	ecbd 8b06 	vpop	{d8-d10}
 800a76c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a770:	f000 bc6c 	b.w	800b04c <__ieee754_sqrt>
 800a774:	2300      	movs	r3, #0
 800a776:	9304      	str	r3, [sp, #16]
 800a778:	ec47 6b10 	vmov	d0, r6, r7
 800a77c:	f001 fbe4 	bl	800bf48 <fabs>
 800a780:	ec51 0b10 	vmov	r0, r1, d0
 800a784:	f1ba 0f00 	cmp.w	sl, #0
 800a788:	d129      	bne.n	800a7de <__ieee754_pow+0x1ee>
 800a78a:	b124      	cbz	r4, 800a796 <__ieee754_pow+0x1a6>
 800a78c:	4b2f      	ldr	r3, [pc, #188]	; (800a84c <__ieee754_pow+0x25c>)
 800a78e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a792:	429a      	cmp	r2, r3
 800a794:	d123      	bne.n	800a7de <__ieee754_pow+0x1ee>
 800a796:	f1b9 0f00 	cmp.w	r9, #0
 800a79a:	da05      	bge.n	800a7a8 <__ieee754_pow+0x1b8>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	492a      	ldr	r1, [pc, #168]	; (800a84c <__ieee754_pow+0x25c>)
 800a7a4:	f7f6 f816 	bl	80007d4 <__aeabi_ddiv>
 800a7a8:	2d00      	cmp	r5, #0
 800a7aa:	f6bf af40 	bge.w	800a62e <__ieee754_pow+0x3e>
 800a7ae:	9b04      	ldr	r3, [sp, #16]
 800a7b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a7b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a7b8:	4323      	orrs	r3, r4
 800a7ba:	d108      	bne.n	800a7ce <__ieee754_pow+0x1de>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	f7f5 fd24 	bl	8000210 <__aeabi_dsub>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	e78f      	b.n	800a6ee <__ieee754_pow+0xfe>
 800a7ce:	9b04      	ldr	r3, [sp, #16]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	f47f af2c 	bne.w	800a62e <__ieee754_pow+0x3e>
 800a7d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7da:	4619      	mov	r1, r3
 800a7dc:	e727      	b.n	800a62e <__ieee754_pow+0x3e>
 800a7de:	0feb      	lsrs	r3, r5, #31
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	9306      	str	r3, [sp, #24]
 800a7e4:	9a06      	ldr	r2, [sp, #24]
 800a7e6:	9b04      	ldr	r3, [sp, #16]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	d102      	bne.n	800a7f2 <__ieee754_pow+0x202>
 800a7ec:	4632      	mov	r2, r6
 800a7ee:	463b      	mov	r3, r7
 800a7f0:	e7e6      	b.n	800a7c0 <__ieee754_pow+0x1d0>
 800a7f2:	4b19      	ldr	r3, [pc, #100]	; (800a858 <__ieee754_pow+0x268>)
 800a7f4:	4598      	cmp	r8, r3
 800a7f6:	f340 80fb 	ble.w	800a9f0 <__ieee754_pow+0x400>
 800a7fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a7fe:	4598      	cmp	r8, r3
 800a800:	4b13      	ldr	r3, [pc, #76]	; (800a850 <__ieee754_pow+0x260>)
 800a802:	dd0c      	ble.n	800a81e <__ieee754_pow+0x22e>
 800a804:	429c      	cmp	r4, r3
 800a806:	dc0f      	bgt.n	800a828 <__ieee754_pow+0x238>
 800a808:	f1b9 0f00 	cmp.w	r9, #0
 800a80c:	da0f      	bge.n	800a82e <__ieee754_pow+0x23e>
 800a80e:	2000      	movs	r0, #0
 800a810:	b009      	add	sp, #36	; 0x24
 800a812:	ecbd 8b06 	vpop	{d8-d10}
 800a816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81a:	f001 b9ea 	b.w	800bbf2 <__math_oflow>
 800a81e:	429c      	cmp	r4, r3
 800a820:	dbf2      	blt.n	800a808 <__ieee754_pow+0x218>
 800a822:	4b0a      	ldr	r3, [pc, #40]	; (800a84c <__ieee754_pow+0x25c>)
 800a824:	429c      	cmp	r4, r3
 800a826:	dd19      	ble.n	800a85c <__ieee754_pow+0x26c>
 800a828:	f1b9 0f00 	cmp.w	r9, #0
 800a82c:	dcef      	bgt.n	800a80e <__ieee754_pow+0x21e>
 800a82e:	2000      	movs	r0, #0
 800a830:	b009      	add	sp, #36	; 0x24
 800a832:	ecbd 8b06 	vpop	{d8-d10}
 800a836:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83a:	f001 b9d1 	b.w	800bbe0 <__math_uflow>
 800a83e:	bf00      	nop
 800a840:	fff00000 	.word	0xfff00000
 800a844:	7ff00000 	.word	0x7ff00000
 800a848:	433fffff 	.word	0x433fffff
 800a84c:	3ff00000 	.word	0x3ff00000
 800a850:	3fefffff 	.word	0x3fefffff
 800a854:	3fe00000 	.word	0x3fe00000
 800a858:	41e00000 	.word	0x41e00000
 800a85c:	4b60      	ldr	r3, [pc, #384]	; (800a9e0 <__ieee754_pow+0x3f0>)
 800a85e:	2200      	movs	r2, #0
 800a860:	f7f5 fcd6 	bl	8000210 <__aeabi_dsub>
 800a864:	a354      	add	r3, pc, #336	; (adr r3, 800a9b8 <__ieee754_pow+0x3c8>)
 800a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86a:	4604      	mov	r4, r0
 800a86c:	460d      	mov	r5, r1
 800a86e:	f7f5 fe87 	bl	8000580 <__aeabi_dmul>
 800a872:	a353      	add	r3, pc, #332	; (adr r3, 800a9c0 <__ieee754_pow+0x3d0>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	4606      	mov	r6, r0
 800a87a:	460f      	mov	r7, r1
 800a87c:	4620      	mov	r0, r4
 800a87e:	4629      	mov	r1, r5
 800a880:	f7f5 fe7e 	bl	8000580 <__aeabi_dmul>
 800a884:	4b57      	ldr	r3, [pc, #348]	; (800a9e4 <__ieee754_pow+0x3f4>)
 800a886:	4682      	mov	sl, r0
 800a888:	468b      	mov	fp, r1
 800a88a:	2200      	movs	r2, #0
 800a88c:	4620      	mov	r0, r4
 800a88e:	4629      	mov	r1, r5
 800a890:	f7f5 fe76 	bl	8000580 <__aeabi_dmul>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	a14b      	add	r1, pc, #300	; (adr r1, 800a9c8 <__ieee754_pow+0x3d8>)
 800a89a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a89e:	f7f5 fcb7 	bl	8000210 <__aeabi_dsub>
 800a8a2:	4622      	mov	r2, r4
 800a8a4:	462b      	mov	r3, r5
 800a8a6:	f7f5 fe6b 	bl	8000580 <__aeabi_dmul>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	494d      	ldr	r1, [pc, #308]	; (800a9e8 <__ieee754_pow+0x3f8>)
 800a8b2:	f7f5 fcad 	bl	8000210 <__aeabi_dsub>
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	4680      	mov	r8, r0
 800a8ba:	4689      	mov	r9, r1
 800a8bc:	462b      	mov	r3, r5
 800a8be:	4620      	mov	r0, r4
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	f7f5 fe5d 	bl	8000580 <__aeabi_dmul>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	f7f5 fe57 	bl	8000580 <__aeabi_dmul>
 800a8d2:	a33f      	add	r3, pc, #252	; (adr r3, 800a9d0 <__ieee754_pow+0x3e0>)
 800a8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d8:	f7f5 fe52 	bl	8000580 <__aeabi_dmul>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4650      	mov	r0, sl
 800a8e2:	4659      	mov	r1, fp
 800a8e4:	f7f5 fc94 	bl	8000210 <__aeabi_dsub>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4680      	mov	r8, r0
 800a8ee:	4689      	mov	r9, r1
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	f7f5 fc8e 	bl	8000214 <__adddf3>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	4632      	mov	r2, r6
 800a8fc:	463b      	mov	r3, r7
 800a8fe:	4604      	mov	r4, r0
 800a900:	460d      	mov	r5, r1
 800a902:	f7f5 fc85 	bl	8000210 <__aeabi_dsub>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4640      	mov	r0, r8
 800a90c:	4649      	mov	r1, r9
 800a90e:	f7f5 fc7f 	bl	8000210 <__aeabi_dsub>
 800a912:	9b04      	ldr	r3, [sp, #16]
 800a914:	9a06      	ldr	r2, [sp, #24]
 800a916:	3b01      	subs	r3, #1
 800a918:	4313      	orrs	r3, r2
 800a91a:	4682      	mov	sl, r0
 800a91c:	468b      	mov	fp, r1
 800a91e:	f040 81e7 	bne.w	800acf0 <__ieee754_pow+0x700>
 800a922:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a9d8 <__ieee754_pow+0x3e8>
 800a926:	eeb0 8a47 	vmov.f32	s16, s14
 800a92a:	eef0 8a67 	vmov.f32	s17, s15
 800a92e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a932:	2600      	movs	r6, #0
 800a934:	4632      	mov	r2, r6
 800a936:	463b      	mov	r3, r7
 800a938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a93c:	f7f5 fc68 	bl	8000210 <__aeabi_dsub>
 800a940:	4622      	mov	r2, r4
 800a942:	462b      	mov	r3, r5
 800a944:	f7f5 fe1c 	bl	8000580 <__aeabi_dmul>
 800a948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a94c:	4680      	mov	r8, r0
 800a94e:	4689      	mov	r9, r1
 800a950:	4650      	mov	r0, sl
 800a952:	4659      	mov	r1, fp
 800a954:	f7f5 fe14 	bl	8000580 <__aeabi_dmul>
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	4640      	mov	r0, r8
 800a95e:	4649      	mov	r1, r9
 800a960:	f7f5 fc58 	bl	8000214 <__adddf3>
 800a964:	4632      	mov	r2, r6
 800a966:	463b      	mov	r3, r7
 800a968:	4680      	mov	r8, r0
 800a96a:	4689      	mov	r9, r1
 800a96c:	4620      	mov	r0, r4
 800a96e:	4629      	mov	r1, r5
 800a970:	f7f5 fe06 	bl	8000580 <__aeabi_dmul>
 800a974:	460b      	mov	r3, r1
 800a976:	4604      	mov	r4, r0
 800a978:	460d      	mov	r5, r1
 800a97a:	4602      	mov	r2, r0
 800a97c:	4649      	mov	r1, r9
 800a97e:	4640      	mov	r0, r8
 800a980:	f7f5 fc48 	bl	8000214 <__adddf3>
 800a984:	4b19      	ldr	r3, [pc, #100]	; (800a9ec <__ieee754_pow+0x3fc>)
 800a986:	4299      	cmp	r1, r3
 800a988:	ec45 4b19 	vmov	d9, r4, r5
 800a98c:	4606      	mov	r6, r0
 800a98e:	460f      	mov	r7, r1
 800a990:	468b      	mov	fp, r1
 800a992:	f340 82f1 	ble.w	800af78 <__ieee754_pow+0x988>
 800a996:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a99a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a99e:	4303      	orrs	r3, r0
 800a9a0:	f000 81e4 	beq.w	800ad6c <__ieee754_pow+0x77c>
 800a9a4:	ec51 0b18 	vmov	r0, r1, d8
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	f7f6 f85a 	bl	8000a64 <__aeabi_dcmplt>
 800a9b0:	3800      	subs	r0, #0
 800a9b2:	bf18      	it	ne
 800a9b4:	2001      	movne	r0, #1
 800a9b6:	e72b      	b.n	800a810 <__ieee754_pow+0x220>
 800a9b8:	60000000 	.word	0x60000000
 800a9bc:	3ff71547 	.word	0x3ff71547
 800a9c0:	f85ddf44 	.word	0xf85ddf44
 800a9c4:	3e54ae0b 	.word	0x3e54ae0b
 800a9c8:	55555555 	.word	0x55555555
 800a9cc:	3fd55555 	.word	0x3fd55555
 800a9d0:	652b82fe 	.word	0x652b82fe
 800a9d4:	3ff71547 	.word	0x3ff71547
 800a9d8:	00000000 	.word	0x00000000
 800a9dc:	bff00000 	.word	0xbff00000
 800a9e0:	3ff00000 	.word	0x3ff00000
 800a9e4:	3fd00000 	.word	0x3fd00000
 800a9e8:	3fe00000 	.word	0x3fe00000
 800a9ec:	408fffff 	.word	0x408fffff
 800a9f0:	4bd5      	ldr	r3, [pc, #852]	; (800ad48 <__ieee754_pow+0x758>)
 800a9f2:	402b      	ands	r3, r5
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	b92b      	cbnz	r3, 800aa04 <__ieee754_pow+0x414>
 800a9f8:	4bd4      	ldr	r3, [pc, #848]	; (800ad4c <__ieee754_pow+0x75c>)
 800a9fa:	f7f5 fdc1 	bl	8000580 <__aeabi_dmul>
 800a9fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aa02:	460c      	mov	r4, r1
 800aa04:	1523      	asrs	r3, r4, #20
 800aa06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa0a:	4413      	add	r3, r2
 800aa0c:	9305      	str	r3, [sp, #20]
 800aa0e:	4bd0      	ldr	r3, [pc, #832]	; (800ad50 <__ieee754_pow+0x760>)
 800aa10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aa14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aa18:	429c      	cmp	r4, r3
 800aa1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa1e:	dd08      	ble.n	800aa32 <__ieee754_pow+0x442>
 800aa20:	4bcc      	ldr	r3, [pc, #816]	; (800ad54 <__ieee754_pow+0x764>)
 800aa22:	429c      	cmp	r4, r3
 800aa24:	f340 8162 	ble.w	800acec <__ieee754_pow+0x6fc>
 800aa28:	9b05      	ldr	r3, [sp, #20]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	9305      	str	r3, [sp, #20]
 800aa2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aa32:	2400      	movs	r4, #0
 800aa34:	00e3      	lsls	r3, r4, #3
 800aa36:	9307      	str	r3, [sp, #28]
 800aa38:	4bc7      	ldr	r3, [pc, #796]	; (800ad58 <__ieee754_pow+0x768>)
 800aa3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa3e:	ed93 7b00 	vldr	d7, [r3]
 800aa42:	4629      	mov	r1, r5
 800aa44:	ec53 2b17 	vmov	r2, r3, d7
 800aa48:	eeb0 9a47 	vmov.f32	s18, s14
 800aa4c:	eef0 9a67 	vmov.f32	s19, s15
 800aa50:	4682      	mov	sl, r0
 800aa52:	f7f5 fbdd 	bl	8000210 <__aeabi_dsub>
 800aa56:	4652      	mov	r2, sl
 800aa58:	4606      	mov	r6, r0
 800aa5a:	460f      	mov	r7, r1
 800aa5c:	462b      	mov	r3, r5
 800aa5e:	ec51 0b19 	vmov	r0, r1, d9
 800aa62:	f7f5 fbd7 	bl	8000214 <__adddf3>
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	49bb      	ldr	r1, [pc, #748]	; (800ad5c <__ieee754_pow+0x76c>)
 800aa6e:	f7f5 feb1 	bl	80007d4 <__aeabi_ddiv>
 800aa72:	ec41 0b1a 	vmov	d10, r0, r1
 800aa76:	4602      	mov	r2, r0
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	f7f5 fd7f 	bl	8000580 <__aeabi_dmul>
 800aa82:	2300      	movs	r3, #0
 800aa84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa88:	9302      	str	r3, [sp, #8]
 800aa8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aa8e:	46ab      	mov	fp, r5
 800aa90:	106d      	asrs	r5, r5, #1
 800aa92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aa96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800aa9a:	ec41 0b18 	vmov	d8, r0, r1
 800aa9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	4640      	mov	r0, r8
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	461d      	mov	r5, r3
 800aaac:	f7f5 fd68 	bl	8000580 <__aeabi_dmul>
 800aab0:	4602      	mov	r2, r0
 800aab2:	460b      	mov	r3, r1
 800aab4:	4630      	mov	r0, r6
 800aab6:	4639      	mov	r1, r7
 800aab8:	f7f5 fbaa 	bl	8000210 <__aeabi_dsub>
 800aabc:	ec53 2b19 	vmov	r2, r3, d9
 800aac0:	4606      	mov	r6, r0
 800aac2:	460f      	mov	r7, r1
 800aac4:	4620      	mov	r0, r4
 800aac6:	4629      	mov	r1, r5
 800aac8:	f7f5 fba2 	bl	8000210 <__aeabi_dsub>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4650      	mov	r0, sl
 800aad2:	4659      	mov	r1, fp
 800aad4:	f7f5 fb9c 	bl	8000210 <__aeabi_dsub>
 800aad8:	4642      	mov	r2, r8
 800aada:	464b      	mov	r3, r9
 800aadc:	f7f5 fd50 	bl	8000580 <__aeabi_dmul>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4630      	mov	r0, r6
 800aae6:	4639      	mov	r1, r7
 800aae8:	f7f5 fb92 	bl	8000210 <__aeabi_dsub>
 800aaec:	ec53 2b1a 	vmov	r2, r3, d10
 800aaf0:	f7f5 fd46 	bl	8000580 <__aeabi_dmul>
 800aaf4:	ec53 2b18 	vmov	r2, r3, d8
 800aaf8:	ec41 0b19 	vmov	d9, r0, r1
 800aafc:	ec51 0b18 	vmov	r0, r1, d8
 800ab00:	f7f5 fd3e 	bl	8000580 <__aeabi_dmul>
 800ab04:	a37c      	add	r3, pc, #496	; (adr r3, 800acf8 <__ieee754_pow+0x708>)
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	460d      	mov	r5, r1
 800ab0e:	f7f5 fd37 	bl	8000580 <__aeabi_dmul>
 800ab12:	a37b      	add	r3, pc, #492	; (adr r3, 800ad00 <__ieee754_pow+0x710>)
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f7f5 fb7c 	bl	8000214 <__adddf3>
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	462b      	mov	r3, r5
 800ab20:	f7f5 fd2e 	bl	8000580 <__aeabi_dmul>
 800ab24:	a378      	add	r3, pc, #480	; (adr r3, 800ad08 <__ieee754_pow+0x718>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f7f5 fb73 	bl	8000214 <__adddf3>
 800ab2e:	4622      	mov	r2, r4
 800ab30:	462b      	mov	r3, r5
 800ab32:	f7f5 fd25 	bl	8000580 <__aeabi_dmul>
 800ab36:	a376      	add	r3, pc, #472	; (adr r3, 800ad10 <__ieee754_pow+0x720>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f7f5 fb6a 	bl	8000214 <__adddf3>
 800ab40:	4622      	mov	r2, r4
 800ab42:	462b      	mov	r3, r5
 800ab44:	f7f5 fd1c 	bl	8000580 <__aeabi_dmul>
 800ab48:	a373      	add	r3, pc, #460	; (adr r3, 800ad18 <__ieee754_pow+0x728>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fb61 	bl	8000214 <__adddf3>
 800ab52:	4622      	mov	r2, r4
 800ab54:	462b      	mov	r3, r5
 800ab56:	f7f5 fd13 	bl	8000580 <__aeabi_dmul>
 800ab5a:	a371      	add	r3, pc, #452	; (adr r3, 800ad20 <__ieee754_pow+0x730>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	f7f5 fb58 	bl	8000214 <__adddf3>
 800ab64:	4622      	mov	r2, r4
 800ab66:	4606      	mov	r6, r0
 800ab68:	460f      	mov	r7, r1
 800ab6a:	462b      	mov	r3, r5
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f7f5 fd06 	bl	8000580 <__aeabi_dmul>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4630      	mov	r0, r6
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	f7f5 fd00 	bl	8000580 <__aeabi_dmul>
 800ab80:	4642      	mov	r2, r8
 800ab82:	4604      	mov	r4, r0
 800ab84:	460d      	mov	r5, r1
 800ab86:	464b      	mov	r3, r9
 800ab88:	ec51 0b18 	vmov	r0, r1, d8
 800ab8c:	f7f5 fb42 	bl	8000214 <__adddf3>
 800ab90:	ec53 2b19 	vmov	r2, r3, d9
 800ab94:	f7f5 fcf4 	bl	8000580 <__aeabi_dmul>
 800ab98:	4622      	mov	r2, r4
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	f7f5 fb3a 	bl	8000214 <__adddf3>
 800aba0:	4642      	mov	r2, r8
 800aba2:	4682      	mov	sl, r0
 800aba4:	468b      	mov	fp, r1
 800aba6:	464b      	mov	r3, r9
 800aba8:	4640      	mov	r0, r8
 800abaa:	4649      	mov	r1, r9
 800abac:	f7f5 fce8 	bl	8000580 <__aeabi_dmul>
 800abb0:	4b6b      	ldr	r3, [pc, #428]	; (800ad60 <__ieee754_pow+0x770>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	4606      	mov	r6, r0
 800abb6:	460f      	mov	r7, r1
 800abb8:	f7f5 fb2c 	bl	8000214 <__adddf3>
 800abbc:	4652      	mov	r2, sl
 800abbe:	465b      	mov	r3, fp
 800abc0:	f7f5 fb28 	bl	8000214 <__adddf3>
 800abc4:	2000      	movs	r0, #0
 800abc6:	4604      	mov	r4, r0
 800abc8:	460d      	mov	r5, r1
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	4640      	mov	r0, r8
 800abd0:	4649      	mov	r1, r9
 800abd2:	f7f5 fcd5 	bl	8000580 <__aeabi_dmul>
 800abd6:	4b62      	ldr	r3, [pc, #392]	; (800ad60 <__ieee754_pow+0x770>)
 800abd8:	4680      	mov	r8, r0
 800abda:	4689      	mov	r9, r1
 800abdc:	2200      	movs	r2, #0
 800abde:	4620      	mov	r0, r4
 800abe0:	4629      	mov	r1, r5
 800abe2:	f7f5 fb15 	bl	8000210 <__aeabi_dsub>
 800abe6:	4632      	mov	r2, r6
 800abe8:	463b      	mov	r3, r7
 800abea:	f7f5 fb11 	bl	8000210 <__aeabi_dsub>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	4650      	mov	r0, sl
 800abf4:	4659      	mov	r1, fp
 800abf6:	f7f5 fb0b 	bl	8000210 <__aeabi_dsub>
 800abfa:	ec53 2b18 	vmov	r2, r3, d8
 800abfe:	f7f5 fcbf 	bl	8000580 <__aeabi_dmul>
 800ac02:	4622      	mov	r2, r4
 800ac04:	4606      	mov	r6, r0
 800ac06:	460f      	mov	r7, r1
 800ac08:	462b      	mov	r3, r5
 800ac0a:	ec51 0b19 	vmov	r0, r1, d9
 800ac0e:	f7f5 fcb7 	bl	8000580 <__aeabi_dmul>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	4630      	mov	r0, r6
 800ac18:	4639      	mov	r1, r7
 800ac1a:	f7f5 fafb 	bl	8000214 <__adddf3>
 800ac1e:	4606      	mov	r6, r0
 800ac20:	460f      	mov	r7, r1
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4640      	mov	r0, r8
 800ac28:	4649      	mov	r1, r9
 800ac2a:	f7f5 faf3 	bl	8000214 <__adddf3>
 800ac2e:	a33e      	add	r3, pc, #248	; (adr r3, 800ad28 <__ieee754_pow+0x738>)
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	2000      	movs	r0, #0
 800ac36:	4604      	mov	r4, r0
 800ac38:	460d      	mov	r5, r1
 800ac3a:	f7f5 fca1 	bl	8000580 <__aeabi_dmul>
 800ac3e:	4642      	mov	r2, r8
 800ac40:	ec41 0b18 	vmov	d8, r0, r1
 800ac44:	464b      	mov	r3, r9
 800ac46:	4620      	mov	r0, r4
 800ac48:	4629      	mov	r1, r5
 800ac4a:	f7f5 fae1 	bl	8000210 <__aeabi_dsub>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4630      	mov	r0, r6
 800ac54:	4639      	mov	r1, r7
 800ac56:	f7f5 fadb 	bl	8000210 <__aeabi_dsub>
 800ac5a:	a335      	add	r3, pc, #212	; (adr r3, 800ad30 <__ieee754_pow+0x740>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	f7f5 fc8e 	bl	8000580 <__aeabi_dmul>
 800ac64:	a334      	add	r3, pc, #208	; (adr r3, 800ad38 <__ieee754_pow+0x748>)
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	460f      	mov	r7, r1
 800ac6e:	4620      	mov	r0, r4
 800ac70:	4629      	mov	r1, r5
 800ac72:	f7f5 fc85 	bl	8000580 <__aeabi_dmul>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	4639      	mov	r1, r7
 800ac7e:	f7f5 fac9 	bl	8000214 <__adddf3>
 800ac82:	9a07      	ldr	r2, [sp, #28]
 800ac84:	4b37      	ldr	r3, [pc, #220]	; (800ad64 <__ieee754_pow+0x774>)
 800ac86:	4413      	add	r3, r2
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f7f5 fac2 	bl	8000214 <__adddf3>
 800ac90:	4682      	mov	sl, r0
 800ac92:	9805      	ldr	r0, [sp, #20]
 800ac94:	468b      	mov	fp, r1
 800ac96:	f7f5 fc09 	bl	80004ac <__aeabi_i2d>
 800ac9a:	9a07      	ldr	r2, [sp, #28]
 800ac9c:	4b32      	ldr	r3, [pc, #200]	; (800ad68 <__ieee754_pow+0x778>)
 800ac9e:	4413      	add	r3, r2
 800aca0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aca4:	4606      	mov	r6, r0
 800aca6:	460f      	mov	r7, r1
 800aca8:	4652      	mov	r2, sl
 800acaa:	465b      	mov	r3, fp
 800acac:	ec51 0b18 	vmov	r0, r1, d8
 800acb0:	f7f5 fab0 	bl	8000214 <__adddf3>
 800acb4:	4642      	mov	r2, r8
 800acb6:	464b      	mov	r3, r9
 800acb8:	f7f5 faac 	bl	8000214 <__adddf3>
 800acbc:	4632      	mov	r2, r6
 800acbe:	463b      	mov	r3, r7
 800acc0:	f7f5 faa8 	bl	8000214 <__adddf3>
 800acc4:	2000      	movs	r0, #0
 800acc6:	4632      	mov	r2, r6
 800acc8:	463b      	mov	r3, r7
 800acca:	4604      	mov	r4, r0
 800accc:	460d      	mov	r5, r1
 800acce:	f7f5 fa9f 	bl	8000210 <__aeabi_dsub>
 800acd2:	4642      	mov	r2, r8
 800acd4:	464b      	mov	r3, r9
 800acd6:	f7f5 fa9b 	bl	8000210 <__aeabi_dsub>
 800acda:	ec53 2b18 	vmov	r2, r3, d8
 800acde:	f7f5 fa97 	bl	8000210 <__aeabi_dsub>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4650      	mov	r0, sl
 800ace8:	4659      	mov	r1, fp
 800acea:	e610      	b.n	800a90e <__ieee754_pow+0x31e>
 800acec:	2401      	movs	r4, #1
 800acee:	e6a1      	b.n	800aa34 <__ieee754_pow+0x444>
 800acf0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ad40 <__ieee754_pow+0x750>
 800acf4:	e617      	b.n	800a926 <__ieee754_pow+0x336>
 800acf6:	bf00      	nop
 800acf8:	4a454eef 	.word	0x4a454eef
 800acfc:	3fca7e28 	.word	0x3fca7e28
 800ad00:	93c9db65 	.word	0x93c9db65
 800ad04:	3fcd864a 	.word	0x3fcd864a
 800ad08:	a91d4101 	.word	0xa91d4101
 800ad0c:	3fd17460 	.word	0x3fd17460
 800ad10:	518f264d 	.word	0x518f264d
 800ad14:	3fd55555 	.word	0x3fd55555
 800ad18:	db6fabff 	.word	0xdb6fabff
 800ad1c:	3fdb6db6 	.word	0x3fdb6db6
 800ad20:	33333303 	.word	0x33333303
 800ad24:	3fe33333 	.word	0x3fe33333
 800ad28:	e0000000 	.word	0xe0000000
 800ad2c:	3feec709 	.word	0x3feec709
 800ad30:	dc3a03fd 	.word	0xdc3a03fd
 800ad34:	3feec709 	.word	0x3feec709
 800ad38:	145b01f5 	.word	0x145b01f5
 800ad3c:	be3e2fe0 	.word	0xbe3e2fe0
 800ad40:	00000000 	.word	0x00000000
 800ad44:	3ff00000 	.word	0x3ff00000
 800ad48:	7ff00000 	.word	0x7ff00000
 800ad4c:	43400000 	.word	0x43400000
 800ad50:	0003988e 	.word	0x0003988e
 800ad54:	000bb679 	.word	0x000bb679
 800ad58:	0800c468 	.word	0x0800c468
 800ad5c:	3ff00000 	.word	0x3ff00000
 800ad60:	40080000 	.word	0x40080000
 800ad64:	0800c488 	.word	0x0800c488
 800ad68:	0800c478 	.word	0x0800c478
 800ad6c:	a3b5      	add	r3, pc, #724	; (adr r3, 800b044 <__ieee754_pow+0xa54>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	4640      	mov	r0, r8
 800ad74:	4649      	mov	r1, r9
 800ad76:	f7f5 fa4d 	bl	8000214 <__adddf3>
 800ad7a:	4622      	mov	r2, r4
 800ad7c:	ec41 0b1a 	vmov	d10, r0, r1
 800ad80:	462b      	mov	r3, r5
 800ad82:	4630      	mov	r0, r6
 800ad84:	4639      	mov	r1, r7
 800ad86:	f7f5 fa43 	bl	8000210 <__aeabi_dsub>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	ec51 0b1a 	vmov	r0, r1, d10
 800ad92:	f7f5 fe85 	bl	8000aa0 <__aeabi_dcmpgt>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	f47f ae04 	bne.w	800a9a4 <__ieee754_pow+0x3b4>
 800ad9c:	4aa4      	ldr	r2, [pc, #656]	; (800b030 <__ieee754_pow+0xa40>)
 800ad9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ada2:	4293      	cmp	r3, r2
 800ada4:	f340 8108 	ble.w	800afb8 <__ieee754_pow+0x9c8>
 800ada8:	151b      	asrs	r3, r3, #20
 800adaa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800adae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800adb2:	fa4a f303 	asr.w	r3, sl, r3
 800adb6:	445b      	add	r3, fp
 800adb8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800adbc:	4e9d      	ldr	r6, [pc, #628]	; (800b034 <__ieee754_pow+0xa44>)
 800adbe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800adc2:	4116      	asrs	r6, r2
 800adc4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800adc8:	2000      	movs	r0, #0
 800adca:	ea23 0106 	bic.w	r1, r3, r6
 800adce:	f1c2 0214 	rsb	r2, r2, #20
 800add2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800add6:	fa4a fa02 	asr.w	sl, sl, r2
 800adda:	f1bb 0f00 	cmp.w	fp, #0
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4620      	mov	r0, r4
 800ade4:	4629      	mov	r1, r5
 800ade6:	bfb8      	it	lt
 800ade8:	f1ca 0a00 	rsblt	sl, sl, #0
 800adec:	f7f5 fa10 	bl	8000210 <__aeabi_dsub>
 800adf0:	ec41 0b19 	vmov	d9, r0, r1
 800adf4:	4642      	mov	r2, r8
 800adf6:	464b      	mov	r3, r9
 800adf8:	ec51 0b19 	vmov	r0, r1, d9
 800adfc:	f7f5 fa0a 	bl	8000214 <__adddf3>
 800ae00:	a37b      	add	r3, pc, #492	; (adr r3, 800aff0 <__ieee754_pow+0xa00>)
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	2000      	movs	r0, #0
 800ae08:	4604      	mov	r4, r0
 800ae0a:	460d      	mov	r5, r1
 800ae0c:	f7f5 fbb8 	bl	8000580 <__aeabi_dmul>
 800ae10:	ec53 2b19 	vmov	r2, r3, d9
 800ae14:	4606      	mov	r6, r0
 800ae16:	460f      	mov	r7, r1
 800ae18:	4620      	mov	r0, r4
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	f7f5 f9f8 	bl	8000210 <__aeabi_dsub>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	4640      	mov	r0, r8
 800ae26:	4649      	mov	r1, r9
 800ae28:	f7f5 f9f2 	bl	8000210 <__aeabi_dsub>
 800ae2c:	a372      	add	r3, pc, #456	; (adr r3, 800aff8 <__ieee754_pow+0xa08>)
 800ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae32:	f7f5 fba5 	bl	8000580 <__aeabi_dmul>
 800ae36:	a372      	add	r3, pc, #456	; (adr r3, 800b000 <__ieee754_pow+0xa10>)
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	4680      	mov	r8, r0
 800ae3e:	4689      	mov	r9, r1
 800ae40:	4620      	mov	r0, r4
 800ae42:	4629      	mov	r1, r5
 800ae44:	f7f5 fb9c 	bl	8000580 <__aeabi_dmul>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4640      	mov	r0, r8
 800ae4e:	4649      	mov	r1, r9
 800ae50:	f7f5 f9e0 	bl	8000214 <__adddf3>
 800ae54:	4604      	mov	r4, r0
 800ae56:	460d      	mov	r5, r1
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4639      	mov	r1, r7
 800ae60:	f7f5 f9d8 	bl	8000214 <__adddf3>
 800ae64:	4632      	mov	r2, r6
 800ae66:	463b      	mov	r3, r7
 800ae68:	4680      	mov	r8, r0
 800ae6a:	4689      	mov	r9, r1
 800ae6c:	f7f5 f9d0 	bl	8000210 <__aeabi_dsub>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4620      	mov	r0, r4
 800ae76:	4629      	mov	r1, r5
 800ae78:	f7f5 f9ca 	bl	8000210 <__aeabi_dsub>
 800ae7c:	4642      	mov	r2, r8
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460f      	mov	r7, r1
 800ae82:	464b      	mov	r3, r9
 800ae84:	4640      	mov	r0, r8
 800ae86:	4649      	mov	r1, r9
 800ae88:	f7f5 fb7a 	bl	8000580 <__aeabi_dmul>
 800ae8c:	a35e      	add	r3, pc, #376	; (adr r3, 800b008 <__ieee754_pow+0xa18>)
 800ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae92:	4604      	mov	r4, r0
 800ae94:	460d      	mov	r5, r1
 800ae96:	f7f5 fb73 	bl	8000580 <__aeabi_dmul>
 800ae9a:	a35d      	add	r3, pc, #372	; (adr r3, 800b010 <__ieee754_pow+0xa20>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f7f5 f9b6 	bl	8000210 <__aeabi_dsub>
 800aea4:	4622      	mov	r2, r4
 800aea6:	462b      	mov	r3, r5
 800aea8:	f7f5 fb6a 	bl	8000580 <__aeabi_dmul>
 800aeac:	a35a      	add	r3, pc, #360	; (adr r3, 800b018 <__ieee754_pow+0xa28>)
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	f7f5 f9af 	bl	8000214 <__adddf3>
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	462b      	mov	r3, r5
 800aeba:	f7f5 fb61 	bl	8000580 <__aeabi_dmul>
 800aebe:	a358      	add	r3, pc, #352	; (adr r3, 800b020 <__ieee754_pow+0xa30>)
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	f7f5 f9a4 	bl	8000210 <__aeabi_dsub>
 800aec8:	4622      	mov	r2, r4
 800aeca:	462b      	mov	r3, r5
 800aecc:	f7f5 fb58 	bl	8000580 <__aeabi_dmul>
 800aed0:	a355      	add	r3, pc, #340	; (adr r3, 800b028 <__ieee754_pow+0xa38>)
 800aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed6:	f7f5 f99d 	bl	8000214 <__adddf3>
 800aeda:	4622      	mov	r2, r4
 800aedc:	462b      	mov	r3, r5
 800aede:	f7f5 fb4f 	bl	8000580 <__aeabi_dmul>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4640      	mov	r0, r8
 800aee8:	4649      	mov	r1, r9
 800aeea:	f7f5 f991 	bl	8000210 <__aeabi_dsub>
 800aeee:	4604      	mov	r4, r0
 800aef0:	460d      	mov	r5, r1
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4640      	mov	r0, r8
 800aef8:	4649      	mov	r1, r9
 800aefa:	f7f5 fb41 	bl	8000580 <__aeabi_dmul>
 800aefe:	2200      	movs	r2, #0
 800af00:	ec41 0b19 	vmov	d9, r0, r1
 800af04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af08:	4620      	mov	r0, r4
 800af0a:	4629      	mov	r1, r5
 800af0c:	f7f5 f980 	bl	8000210 <__aeabi_dsub>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	ec51 0b19 	vmov	r0, r1, d9
 800af18:	f7f5 fc5c 	bl	80007d4 <__aeabi_ddiv>
 800af1c:	4632      	mov	r2, r6
 800af1e:	4604      	mov	r4, r0
 800af20:	460d      	mov	r5, r1
 800af22:	463b      	mov	r3, r7
 800af24:	4640      	mov	r0, r8
 800af26:	4649      	mov	r1, r9
 800af28:	f7f5 fb2a 	bl	8000580 <__aeabi_dmul>
 800af2c:	4632      	mov	r2, r6
 800af2e:	463b      	mov	r3, r7
 800af30:	f7f5 f970 	bl	8000214 <__adddf3>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4620      	mov	r0, r4
 800af3a:	4629      	mov	r1, r5
 800af3c:	f7f5 f968 	bl	8000210 <__aeabi_dsub>
 800af40:	4642      	mov	r2, r8
 800af42:	464b      	mov	r3, r9
 800af44:	f7f5 f964 	bl	8000210 <__aeabi_dsub>
 800af48:	460b      	mov	r3, r1
 800af4a:	4602      	mov	r2, r0
 800af4c:	493a      	ldr	r1, [pc, #232]	; (800b038 <__ieee754_pow+0xa48>)
 800af4e:	2000      	movs	r0, #0
 800af50:	f7f5 f95e 	bl	8000210 <__aeabi_dsub>
 800af54:	ec41 0b10 	vmov	d0, r0, r1
 800af58:	ee10 3a90 	vmov	r3, s1
 800af5c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800af60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af64:	da2b      	bge.n	800afbe <__ieee754_pow+0x9ce>
 800af66:	4650      	mov	r0, sl
 800af68:	f001 f802 	bl	800bf70 <scalbn>
 800af6c:	ec51 0b10 	vmov	r0, r1, d0
 800af70:	ec53 2b18 	vmov	r2, r3, d8
 800af74:	f7ff bbed 	b.w	800a752 <__ieee754_pow+0x162>
 800af78:	4b30      	ldr	r3, [pc, #192]	; (800b03c <__ieee754_pow+0xa4c>)
 800af7a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800af7e:	429e      	cmp	r6, r3
 800af80:	f77f af0c 	ble.w	800ad9c <__ieee754_pow+0x7ac>
 800af84:	4b2e      	ldr	r3, [pc, #184]	; (800b040 <__ieee754_pow+0xa50>)
 800af86:	440b      	add	r3, r1
 800af88:	4303      	orrs	r3, r0
 800af8a:	d009      	beq.n	800afa0 <__ieee754_pow+0x9b0>
 800af8c:	ec51 0b18 	vmov	r0, r1, d8
 800af90:	2200      	movs	r2, #0
 800af92:	2300      	movs	r3, #0
 800af94:	f7f5 fd66 	bl	8000a64 <__aeabi_dcmplt>
 800af98:	3800      	subs	r0, #0
 800af9a:	bf18      	it	ne
 800af9c:	2001      	movne	r0, #1
 800af9e:	e447      	b.n	800a830 <__ieee754_pow+0x240>
 800afa0:	4622      	mov	r2, r4
 800afa2:	462b      	mov	r3, r5
 800afa4:	f7f5 f934 	bl	8000210 <__aeabi_dsub>
 800afa8:	4642      	mov	r2, r8
 800afaa:	464b      	mov	r3, r9
 800afac:	f7f5 fd6e 	bl	8000a8c <__aeabi_dcmpge>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	f43f aef3 	beq.w	800ad9c <__ieee754_pow+0x7ac>
 800afb6:	e7e9      	b.n	800af8c <__ieee754_pow+0x99c>
 800afb8:	f04f 0a00 	mov.w	sl, #0
 800afbc:	e71a      	b.n	800adf4 <__ieee754_pow+0x804>
 800afbe:	ec51 0b10 	vmov	r0, r1, d0
 800afc2:	4619      	mov	r1, r3
 800afc4:	e7d4      	b.n	800af70 <__ieee754_pow+0x980>
 800afc6:	491c      	ldr	r1, [pc, #112]	; (800b038 <__ieee754_pow+0xa48>)
 800afc8:	2000      	movs	r0, #0
 800afca:	f7ff bb30 	b.w	800a62e <__ieee754_pow+0x3e>
 800afce:	2000      	movs	r0, #0
 800afd0:	2100      	movs	r1, #0
 800afd2:	f7ff bb2c 	b.w	800a62e <__ieee754_pow+0x3e>
 800afd6:	4630      	mov	r0, r6
 800afd8:	4639      	mov	r1, r7
 800afda:	f7ff bb28 	b.w	800a62e <__ieee754_pow+0x3e>
 800afde:	9204      	str	r2, [sp, #16]
 800afe0:	f7ff bb7a 	b.w	800a6d8 <__ieee754_pow+0xe8>
 800afe4:	2300      	movs	r3, #0
 800afe6:	f7ff bb64 	b.w	800a6b2 <__ieee754_pow+0xc2>
 800afea:	bf00      	nop
 800afec:	f3af 8000 	nop.w
 800aff0:	00000000 	.word	0x00000000
 800aff4:	3fe62e43 	.word	0x3fe62e43
 800aff8:	fefa39ef 	.word	0xfefa39ef
 800affc:	3fe62e42 	.word	0x3fe62e42
 800b000:	0ca86c39 	.word	0x0ca86c39
 800b004:	be205c61 	.word	0xbe205c61
 800b008:	72bea4d0 	.word	0x72bea4d0
 800b00c:	3e663769 	.word	0x3e663769
 800b010:	c5d26bf1 	.word	0xc5d26bf1
 800b014:	3ebbbd41 	.word	0x3ebbbd41
 800b018:	af25de2c 	.word	0xaf25de2c
 800b01c:	3f11566a 	.word	0x3f11566a
 800b020:	16bebd93 	.word	0x16bebd93
 800b024:	3f66c16c 	.word	0x3f66c16c
 800b028:	5555553e 	.word	0x5555553e
 800b02c:	3fc55555 	.word	0x3fc55555
 800b030:	3fe00000 	.word	0x3fe00000
 800b034:	000fffff 	.word	0x000fffff
 800b038:	3ff00000 	.word	0x3ff00000
 800b03c:	4090cbff 	.word	0x4090cbff
 800b040:	3f6f3400 	.word	0x3f6f3400
 800b044:	652b82fe 	.word	0x652b82fe
 800b048:	3c971547 	.word	0x3c971547

0800b04c <__ieee754_sqrt>:
 800b04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b050:	ec55 4b10 	vmov	r4, r5, d0
 800b054:	4e55      	ldr	r6, [pc, #340]	; (800b1ac <__ieee754_sqrt+0x160>)
 800b056:	43ae      	bics	r6, r5
 800b058:	ee10 0a10 	vmov	r0, s0
 800b05c:	ee10 3a10 	vmov	r3, s0
 800b060:	462a      	mov	r2, r5
 800b062:	4629      	mov	r1, r5
 800b064:	d110      	bne.n	800b088 <__ieee754_sqrt+0x3c>
 800b066:	ee10 2a10 	vmov	r2, s0
 800b06a:	462b      	mov	r3, r5
 800b06c:	f7f5 fa88 	bl	8000580 <__aeabi_dmul>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4620      	mov	r0, r4
 800b076:	4629      	mov	r1, r5
 800b078:	f7f5 f8cc 	bl	8000214 <__adddf3>
 800b07c:	4604      	mov	r4, r0
 800b07e:	460d      	mov	r5, r1
 800b080:	ec45 4b10 	vmov	d0, r4, r5
 800b084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b088:	2d00      	cmp	r5, #0
 800b08a:	dc10      	bgt.n	800b0ae <__ieee754_sqrt+0x62>
 800b08c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b090:	4330      	orrs	r0, r6
 800b092:	d0f5      	beq.n	800b080 <__ieee754_sqrt+0x34>
 800b094:	b15d      	cbz	r5, 800b0ae <__ieee754_sqrt+0x62>
 800b096:	ee10 2a10 	vmov	r2, s0
 800b09a:	462b      	mov	r3, r5
 800b09c:	ee10 0a10 	vmov	r0, s0
 800b0a0:	f7f5 f8b6 	bl	8000210 <__aeabi_dsub>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	f7f5 fb94 	bl	80007d4 <__aeabi_ddiv>
 800b0ac:	e7e6      	b.n	800b07c <__ieee754_sqrt+0x30>
 800b0ae:	1512      	asrs	r2, r2, #20
 800b0b0:	d074      	beq.n	800b19c <__ieee754_sqrt+0x150>
 800b0b2:	07d4      	lsls	r4, r2, #31
 800b0b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b0b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b0bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b0c0:	bf5e      	ittt	pl
 800b0c2:	0fda      	lsrpl	r2, r3, #31
 800b0c4:	005b      	lslpl	r3, r3, #1
 800b0c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b0ca:	2400      	movs	r4, #0
 800b0cc:	0fda      	lsrs	r2, r3, #31
 800b0ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b0d2:	107f      	asrs	r7, r7, #1
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	2516      	movs	r5, #22
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b0de:	1886      	adds	r6, r0, r2
 800b0e0:	428e      	cmp	r6, r1
 800b0e2:	bfde      	ittt	le
 800b0e4:	1b89      	suble	r1, r1, r6
 800b0e6:	18b0      	addle	r0, r6, r2
 800b0e8:	18a4      	addle	r4, r4, r2
 800b0ea:	0049      	lsls	r1, r1, #1
 800b0ec:	3d01      	subs	r5, #1
 800b0ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b0f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b0f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b0fa:	d1f0      	bne.n	800b0de <__ieee754_sqrt+0x92>
 800b0fc:	462a      	mov	r2, r5
 800b0fe:	f04f 0e20 	mov.w	lr, #32
 800b102:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b106:	4281      	cmp	r1, r0
 800b108:	eb06 0c05 	add.w	ip, r6, r5
 800b10c:	dc02      	bgt.n	800b114 <__ieee754_sqrt+0xc8>
 800b10e:	d113      	bne.n	800b138 <__ieee754_sqrt+0xec>
 800b110:	459c      	cmp	ip, r3
 800b112:	d811      	bhi.n	800b138 <__ieee754_sqrt+0xec>
 800b114:	f1bc 0f00 	cmp.w	ip, #0
 800b118:	eb0c 0506 	add.w	r5, ip, r6
 800b11c:	da43      	bge.n	800b1a6 <__ieee754_sqrt+0x15a>
 800b11e:	2d00      	cmp	r5, #0
 800b120:	db41      	blt.n	800b1a6 <__ieee754_sqrt+0x15a>
 800b122:	f100 0801 	add.w	r8, r0, #1
 800b126:	1a09      	subs	r1, r1, r0
 800b128:	459c      	cmp	ip, r3
 800b12a:	bf88      	it	hi
 800b12c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800b130:	eba3 030c 	sub.w	r3, r3, ip
 800b134:	4432      	add	r2, r6
 800b136:	4640      	mov	r0, r8
 800b138:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b13c:	f1be 0e01 	subs.w	lr, lr, #1
 800b140:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b144:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b148:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b14c:	d1db      	bne.n	800b106 <__ieee754_sqrt+0xba>
 800b14e:	430b      	orrs	r3, r1
 800b150:	d006      	beq.n	800b160 <__ieee754_sqrt+0x114>
 800b152:	1c50      	adds	r0, r2, #1
 800b154:	bf13      	iteet	ne
 800b156:	3201      	addne	r2, #1
 800b158:	3401      	addeq	r4, #1
 800b15a:	4672      	moveq	r2, lr
 800b15c:	f022 0201 	bicne.w	r2, r2, #1
 800b160:	1063      	asrs	r3, r4, #1
 800b162:	0852      	lsrs	r2, r2, #1
 800b164:	07e1      	lsls	r1, r4, #31
 800b166:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b16a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b16e:	bf48      	it	mi
 800b170:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b174:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b178:	4614      	mov	r4, r2
 800b17a:	e781      	b.n	800b080 <__ieee754_sqrt+0x34>
 800b17c:	0ad9      	lsrs	r1, r3, #11
 800b17e:	3815      	subs	r0, #21
 800b180:	055b      	lsls	r3, r3, #21
 800b182:	2900      	cmp	r1, #0
 800b184:	d0fa      	beq.n	800b17c <__ieee754_sqrt+0x130>
 800b186:	02cd      	lsls	r5, r1, #11
 800b188:	d50a      	bpl.n	800b1a0 <__ieee754_sqrt+0x154>
 800b18a:	f1c2 0420 	rsb	r4, r2, #32
 800b18e:	fa23 f404 	lsr.w	r4, r3, r4
 800b192:	1e55      	subs	r5, r2, #1
 800b194:	4093      	lsls	r3, r2
 800b196:	4321      	orrs	r1, r4
 800b198:	1b42      	subs	r2, r0, r5
 800b19a:	e78a      	b.n	800b0b2 <__ieee754_sqrt+0x66>
 800b19c:	4610      	mov	r0, r2
 800b19e:	e7f0      	b.n	800b182 <__ieee754_sqrt+0x136>
 800b1a0:	0049      	lsls	r1, r1, #1
 800b1a2:	3201      	adds	r2, #1
 800b1a4:	e7ef      	b.n	800b186 <__ieee754_sqrt+0x13a>
 800b1a6:	4680      	mov	r8, r0
 800b1a8:	e7bd      	b.n	800b126 <__ieee754_sqrt+0xda>
 800b1aa:	bf00      	nop
 800b1ac:	7ff00000 	.word	0x7ff00000

0800b1b0 <__ieee754_atan2f>:
 800b1b0:	ee10 2a90 	vmov	r2, s1
 800b1b4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b1b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b1bc:	b510      	push	{r4, lr}
 800b1be:	eef0 7a40 	vmov.f32	s15, s0
 800b1c2:	dc06      	bgt.n	800b1d2 <__ieee754_atan2f+0x22>
 800b1c4:	ee10 0a10 	vmov	r0, s0
 800b1c8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b1cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b1d0:	dd04      	ble.n	800b1dc <__ieee754_atan2f+0x2c>
 800b1d2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b1d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b1da:	bd10      	pop	{r4, pc}
 800b1dc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800b1e0:	d103      	bne.n	800b1ea <__ieee754_atan2f+0x3a>
 800b1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e6:	f000 bf49 	b.w	800c07c <atanf>
 800b1ea:	1794      	asrs	r4, r2, #30
 800b1ec:	f004 0402 	and.w	r4, r4, #2
 800b1f0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b1f4:	b943      	cbnz	r3, 800b208 <__ieee754_atan2f+0x58>
 800b1f6:	2c02      	cmp	r4, #2
 800b1f8:	d05e      	beq.n	800b2b8 <__ieee754_atan2f+0x108>
 800b1fa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b2cc <__ieee754_atan2f+0x11c>
 800b1fe:	2c03      	cmp	r4, #3
 800b200:	bf08      	it	eq
 800b202:	eef0 7a47 	vmoveq.f32	s15, s14
 800b206:	e7e6      	b.n	800b1d6 <__ieee754_atan2f+0x26>
 800b208:	b941      	cbnz	r1, 800b21c <__ieee754_atan2f+0x6c>
 800b20a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b2d0 <__ieee754_atan2f+0x120>
 800b20e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b2d4 <__ieee754_atan2f+0x124>
 800b212:	2800      	cmp	r0, #0
 800b214:	bfb8      	it	lt
 800b216:	eef0 7a40 	vmovlt.f32	s15, s0
 800b21a:	e7dc      	b.n	800b1d6 <__ieee754_atan2f+0x26>
 800b21c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b220:	d110      	bne.n	800b244 <__ieee754_atan2f+0x94>
 800b222:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b226:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b22a:	d107      	bne.n	800b23c <__ieee754_atan2f+0x8c>
 800b22c:	2c02      	cmp	r4, #2
 800b22e:	d846      	bhi.n	800b2be <__ieee754_atan2f+0x10e>
 800b230:	4b29      	ldr	r3, [pc, #164]	; (800b2d8 <__ieee754_atan2f+0x128>)
 800b232:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b236:	edd4 7a00 	vldr	s15, [r4]
 800b23a:	e7cc      	b.n	800b1d6 <__ieee754_atan2f+0x26>
 800b23c:	2c02      	cmp	r4, #2
 800b23e:	d841      	bhi.n	800b2c4 <__ieee754_atan2f+0x114>
 800b240:	4b26      	ldr	r3, [pc, #152]	; (800b2dc <__ieee754_atan2f+0x12c>)
 800b242:	e7f6      	b.n	800b232 <__ieee754_atan2f+0x82>
 800b244:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b248:	d0df      	beq.n	800b20a <__ieee754_atan2f+0x5a>
 800b24a:	1a5b      	subs	r3, r3, r1
 800b24c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800b250:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800b254:	da1a      	bge.n	800b28c <__ieee754_atan2f+0xdc>
 800b256:	2a00      	cmp	r2, #0
 800b258:	da01      	bge.n	800b25e <__ieee754_atan2f+0xae>
 800b25a:	313c      	adds	r1, #60	; 0x3c
 800b25c:	db19      	blt.n	800b292 <__ieee754_atan2f+0xe2>
 800b25e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b262:	f000 ffdf 	bl	800c224 <fabsf>
 800b266:	f000 ff09 	bl	800c07c <atanf>
 800b26a:	eef0 7a40 	vmov.f32	s15, s0
 800b26e:	2c01      	cmp	r4, #1
 800b270:	d012      	beq.n	800b298 <__ieee754_atan2f+0xe8>
 800b272:	2c02      	cmp	r4, #2
 800b274:	d017      	beq.n	800b2a6 <__ieee754_atan2f+0xf6>
 800b276:	2c00      	cmp	r4, #0
 800b278:	d0ad      	beq.n	800b1d6 <__ieee754_atan2f+0x26>
 800b27a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800b2e0 <__ieee754_atan2f+0x130>
 800b27e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b282:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b2e4 <__ieee754_atan2f+0x134>
 800b286:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b28a:	e7a4      	b.n	800b1d6 <__ieee754_atan2f+0x26>
 800b28c:	eddf 7a10 	vldr	s15, [pc, #64]	; 800b2d0 <__ieee754_atan2f+0x120>
 800b290:	e7ed      	b.n	800b26e <__ieee754_atan2f+0xbe>
 800b292:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b2e8 <__ieee754_atan2f+0x138>
 800b296:	e7ea      	b.n	800b26e <__ieee754_atan2f+0xbe>
 800b298:	ee17 3a90 	vmov	r3, s15
 800b29c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2a0:	ee07 3a90 	vmov	s15, r3
 800b2a4:	e797      	b.n	800b1d6 <__ieee754_atan2f+0x26>
 800b2a6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b2e0 <__ieee754_atan2f+0x130>
 800b2aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b2ae:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800b2e4 <__ieee754_atan2f+0x134>
 800b2b2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b2b6:	e78e      	b.n	800b1d6 <__ieee754_atan2f+0x26>
 800b2b8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800b2e4 <__ieee754_atan2f+0x134>
 800b2bc:	e78b      	b.n	800b1d6 <__ieee754_atan2f+0x26>
 800b2be:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b2ec <__ieee754_atan2f+0x13c>
 800b2c2:	e788      	b.n	800b1d6 <__ieee754_atan2f+0x26>
 800b2c4:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b2e8 <__ieee754_atan2f+0x138>
 800b2c8:	e785      	b.n	800b1d6 <__ieee754_atan2f+0x26>
 800b2ca:	bf00      	nop
 800b2cc:	c0490fdb 	.word	0xc0490fdb
 800b2d0:	3fc90fdb 	.word	0x3fc90fdb
 800b2d4:	bfc90fdb 	.word	0xbfc90fdb
 800b2d8:	0800c498 	.word	0x0800c498
 800b2dc:	0800c4a4 	.word	0x0800c4a4
 800b2e0:	33bbbd2e 	.word	0x33bbbd2e
 800b2e4:	40490fdb 	.word	0x40490fdb
 800b2e8:	00000000 	.word	0x00000000
 800b2ec:	3f490fdb 	.word	0x3f490fdb

0800b2f0 <__ieee754_rem_pio2f>:
 800b2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2f2:	ee10 6a10 	vmov	r6, s0
 800b2f6:	4b8e      	ldr	r3, [pc, #568]	; (800b530 <__ieee754_rem_pio2f+0x240>)
 800b2f8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b2fc:	429d      	cmp	r5, r3
 800b2fe:	b087      	sub	sp, #28
 800b300:	eef0 7a40 	vmov.f32	s15, s0
 800b304:	4604      	mov	r4, r0
 800b306:	dc05      	bgt.n	800b314 <__ieee754_rem_pio2f+0x24>
 800b308:	2300      	movs	r3, #0
 800b30a:	ed80 0a00 	vstr	s0, [r0]
 800b30e:	6043      	str	r3, [r0, #4]
 800b310:	2000      	movs	r0, #0
 800b312:	e01a      	b.n	800b34a <__ieee754_rem_pio2f+0x5a>
 800b314:	4b87      	ldr	r3, [pc, #540]	; (800b534 <__ieee754_rem_pio2f+0x244>)
 800b316:	429d      	cmp	r5, r3
 800b318:	dc46      	bgt.n	800b3a8 <__ieee754_rem_pio2f+0xb8>
 800b31a:	2e00      	cmp	r6, #0
 800b31c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b538 <__ieee754_rem_pio2f+0x248>
 800b320:	4b86      	ldr	r3, [pc, #536]	; (800b53c <__ieee754_rem_pio2f+0x24c>)
 800b322:	f025 050f 	bic.w	r5, r5, #15
 800b326:	dd1f      	ble.n	800b368 <__ieee754_rem_pio2f+0x78>
 800b328:	429d      	cmp	r5, r3
 800b32a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b32e:	d00e      	beq.n	800b34e <__ieee754_rem_pio2f+0x5e>
 800b330:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b540 <__ieee754_rem_pio2f+0x250>
 800b334:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b338:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b33c:	ed80 0a00 	vstr	s0, [r0]
 800b340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b344:	2001      	movs	r0, #1
 800b346:	edc4 7a01 	vstr	s15, [r4, #4]
 800b34a:	b007      	add	sp, #28
 800b34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b544 <__ieee754_rem_pio2f+0x254>
 800b352:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b548 <__ieee754_rem_pio2f+0x258>
 800b356:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b35a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b35e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b362:	edc0 6a00 	vstr	s13, [r0]
 800b366:	e7eb      	b.n	800b340 <__ieee754_rem_pio2f+0x50>
 800b368:	429d      	cmp	r5, r3
 800b36a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b36e:	d00e      	beq.n	800b38e <__ieee754_rem_pio2f+0x9e>
 800b370:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b540 <__ieee754_rem_pio2f+0x250>
 800b374:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b378:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b37c:	ed80 0a00 	vstr	s0, [r0]
 800b380:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b388:	edc4 7a01 	vstr	s15, [r4, #4]
 800b38c:	e7dd      	b.n	800b34a <__ieee754_rem_pio2f+0x5a>
 800b38e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b544 <__ieee754_rem_pio2f+0x254>
 800b392:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b548 <__ieee754_rem_pio2f+0x258>
 800b396:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b39a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b39e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b3a2:	edc0 6a00 	vstr	s13, [r0]
 800b3a6:	e7eb      	b.n	800b380 <__ieee754_rem_pio2f+0x90>
 800b3a8:	4b68      	ldr	r3, [pc, #416]	; (800b54c <__ieee754_rem_pio2f+0x25c>)
 800b3aa:	429d      	cmp	r5, r3
 800b3ac:	dc72      	bgt.n	800b494 <__ieee754_rem_pio2f+0x1a4>
 800b3ae:	f000 ff39 	bl	800c224 <fabsf>
 800b3b2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b550 <__ieee754_rem_pio2f+0x260>
 800b3b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b3ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b3be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3c6:	ee17 0a90 	vmov	r0, s15
 800b3ca:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b538 <__ieee754_rem_pio2f+0x248>
 800b3ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b3d2:	281f      	cmp	r0, #31
 800b3d4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b540 <__ieee754_rem_pio2f+0x250>
 800b3d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3dc:	eeb1 6a47 	vneg.f32	s12, s14
 800b3e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b3e4:	ee16 2a90 	vmov	r2, s13
 800b3e8:	dc1c      	bgt.n	800b424 <__ieee754_rem_pio2f+0x134>
 800b3ea:	495a      	ldr	r1, [pc, #360]	; (800b554 <__ieee754_rem_pio2f+0x264>)
 800b3ec:	1e47      	subs	r7, r0, #1
 800b3ee:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b3f2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b3f6:	428b      	cmp	r3, r1
 800b3f8:	d014      	beq.n	800b424 <__ieee754_rem_pio2f+0x134>
 800b3fa:	6022      	str	r2, [r4, #0]
 800b3fc:	ed94 7a00 	vldr	s14, [r4]
 800b400:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b404:	2e00      	cmp	r6, #0
 800b406:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b40a:	ed84 0a01 	vstr	s0, [r4, #4]
 800b40e:	da9c      	bge.n	800b34a <__ieee754_rem_pio2f+0x5a>
 800b410:	eeb1 7a47 	vneg.f32	s14, s14
 800b414:	eeb1 0a40 	vneg.f32	s0, s0
 800b418:	ed84 7a00 	vstr	s14, [r4]
 800b41c:	ed84 0a01 	vstr	s0, [r4, #4]
 800b420:	4240      	negs	r0, r0
 800b422:	e792      	b.n	800b34a <__ieee754_rem_pio2f+0x5a>
 800b424:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b428:	15eb      	asrs	r3, r5, #23
 800b42a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b42e:	2d08      	cmp	r5, #8
 800b430:	dde3      	ble.n	800b3fa <__ieee754_rem_pio2f+0x10a>
 800b432:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b544 <__ieee754_rem_pio2f+0x254>
 800b436:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b548 <__ieee754_rem_pio2f+0x258>
 800b43a:	eef0 6a40 	vmov.f32	s13, s0
 800b43e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b442:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b446:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b44a:	eef0 7a40 	vmov.f32	s15, s0
 800b44e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b452:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b456:	ee15 2a90 	vmov	r2, s11
 800b45a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b45e:	1a5b      	subs	r3, r3, r1
 800b460:	2b19      	cmp	r3, #25
 800b462:	dc04      	bgt.n	800b46e <__ieee754_rem_pio2f+0x17e>
 800b464:	edc4 5a00 	vstr	s11, [r4]
 800b468:	eeb0 0a66 	vmov.f32	s0, s13
 800b46c:	e7c6      	b.n	800b3fc <__ieee754_rem_pio2f+0x10c>
 800b46e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b558 <__ieee754_rem_pio2f+0x268>
 800b472:	eeb0 0a66 	vmov.f32	s0, s13
 800b476:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b47a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b47e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b55c <__ieee754_rem_pio2f+0x26c>
 800b482:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b486:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b48a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b48e:	ed84 7a00 	vstr	s14, [r4]
 800b492:	e7b3      	b.n	800b3fc <__ieee754_rem_pio2f+0x10c>
 800b494:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b498:	db06      	blt.n	800b4a8 <__ieee754_rem_pio2f+0x1b8>
 800b49a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b49e:	edc0 7a01 	vstr	s15, [r0, #4]
 800b4a2:	edc0 7a00 	vstr	s15, [r0]
 800b4a6:	e733      	b.n	800b310 <__ieee754_rem_pio2f+0x20>
 800b4a8:	15ea      	asrs	r2, r5, #23
 800b4aa:	3a86      	subs	r2, #134	; 0x86
 800b4ac:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b4b0:	ee07 3a90 	vmov	s15, r3
 800b4b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b4b8:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b560 <__ieee754_rem_pio2f+0x270>
 800b4bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4c4:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b4c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b4d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4d8:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b4dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e8:	edcd 7a05 	vstr	s15, [sp, #20]
 800b4ec:	d11e      	bne.n	800b52c <__ieee754_rem_pio2f+0x23c>
 800b4ee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f6:	bf14      	ite	ne
 800b4f8:	2302      	movne	r3, #2
 800b4fa:	2301      	moveq	r3, #1
 800b4fc:	4919      	ldr	r1, [pc, #100]	; (800b564 <__ieee754_rem_pio2f+0x274>)
 800b4fe:	9101      	str	r1, [sp, #4]
 800b500:	2102      	movs	r1, #2
 800b502:	9100      	str	r1, [sp, #0]
 800b504:	a803      	add	r0, sp, #12
 800b506:	4621      	mov	r1, r4
 800b508:	f000 f88e 	bl	800b628 <__kernel_rem_pio2f>
 800b50c:	2e00      	cmp	r6, #0
 800b50e:	f6bf af1c 	bge.w	800b34a <__ieee754_rem_pio2f+0x5a>
 800b512:	edd4 7a00 	vldr	s15, [r4]
 800b516:	eef1 7a67 	vneg.f32	s15, s15
 800b51a:	edc4 7a00 	vstr	s15, [r4]
 800b51e:	edd4 7a01 	vldr	s15, [r4, #4]
 800b522:	eef1 7a67 	vneg.f32	s15, s15
 800b526:	edc4 7a01 	vstr	s15, [r4, #4]
 800b52a:	e779      	b.n	800b420 <__ieee754_rem_pio2f+0x130>
 800b52c:	2303      	movs	r3, #3
 800b52e:	e7e5      	b.n	800b4fc <__ieee754_rem_pio2f+0x20c>
 800b530:	3f490fd8 	.word	0x3f490fd8
 800b534:	4016cbe3 	.word	0x4016cbe3
 800b538:	3fc90f80 	.word	0x3fc90f80
 800b53c:	3fc90fd0 	.word	0x3fc90fd0
 800b540:	37354443 	.word	0x37354443
 800b544:	37354400 	.word	0x37354400
 800b548:	2e85a308 	.word	0x2e85a308
 800b54c:	43490f80 	.word	0x43490f80
 800b550:	3f22f984 	.word	0x3f22f984
 800b554:	0800c4b0 	.word	0x0800c4b0
 800b558:	2e85a300 	.word	0x2e85a300
 800b55c:	248d3132 	.word	0x248d3132
 800b560:	43800000 	.word	0x43800000
 800b564:	0800c530 	.word	0x0800c530

0800b568 <__kernel_cosf>:
 800b568:	ee10 3a10 	vmov	r3, s0
 800b56c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b570:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b574:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b578:	da05      	bge.n	800b586 <__kernel_cosf+0x1e>
 800b57a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b57e:	ee17 2a90 	vmov	r2, s15
 800b582:	2a00      	cmp	r2, #0
 800b584:	d03d      	beq.n	800b602 <__kernel_cosf+0x9a>
 800b586:	ee60 5a00 	vmul.f32	s11, s0, s0
 800b58a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b608 <__kernel_cosf+0xa0>
 800b58e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b60c <__kernel_cosf+0xa4>
 800b592:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800b610 <__kernel_cosf+0xa8>
 800b596:	4a1f      	ldr	r2, [pc, #124]	; (800b614 <__kernel_cosf+0xac>)
 800b598:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b59c:	4293      	cmp	r3, r2
 800b59e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b618 <__kernel_cosf+0xb0>
 800b5a2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b5a6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b61c <__kernel_cosf+0xb4>
 800b5aa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b5ae:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800b620 <__kernel_cosf+0xb8>
 800b5b2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b5b6:	eeb0 7a66 	vmov.f32	s14, s13
 800b5ba:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b5be:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b5c2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800b5c6:	ee67 6a25 	vmul.f32	s13, s14, s11
 800b5ca:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800b5ce:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b5d2:	dc04      	bgt.n	800b5de <__kernel_cosf+0x76>
 800b5d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b5d8:	ee36 0a47 	vsub.f32	s0, s12, s14
 800b5dc:	4770      	bx	lr
 800b5de:	4a11      	ldr	r2, [pc, #68]	; (800b624 <__kernel_cosf+0xbc>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	bfda      	itte	le
 800b5e4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b5e8:	ee06 3a90 	vmovle	s13, r3
 800b5ec:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800b5f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b5f4:	ee36 0a66 	vsub.f32	s0, s12, s13
 800b5f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b600:	4770      	bx	lr
 800b602:	eeb0 0a46 	vmov.f32	s0, s12
 800b606:	4770      	bx	lr
 800b608:	ad47d74e 	.word	0xad47d74e
 800b60c:	310f74f6 	.word	0x310f74f6
 800b610:	3d2aaaab 	.word	0x3d2aaaab
 800b614:	3e999999 	.word	0x3e999999
 800b618:	b493f27c 	.word	0xb493f27c
 800b61c:	37d00d01 	.word	0x37d00d01
 800b620:	bab60b61 	.word	0xbab60b61
 800b624:	3f480000 	.word	0x3f480000

0800b628 <__kernel_rem_pio2f>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	ed2d 8b04 	vpush	{d8-d9}
 800b630:	b0d9      	sub	sp, #356	; 0x164
 800b632:	4688      	mov	r8, r1
 800b634:	9002      	str	r0, [sp, #8]
 800b636:	49bb      	ldr	r1, [pc, #748]	; (800b924 <__kernel_rem_pio2f+0x2fc>)
 800b638:	9866      	ldr	r0, [sp, #408]	; 0x198
 800b63a:	9301      	str	r3, [sp, #4]
 800b63c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800b640:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800b644:	1e59      	subs	r1, r3, #1
 800b646:	1d13      	adds	r3, r2, #4
 800b648:	db27      	blt.n	800b69a <__kernel_rem_pio2f+0x72>
 800b64a:	f1b2 0b03 	subs.w	fp, r2, #3
 800b64e:	bf48      	it	mi
 800b650:	f102 0b04 	addmi.w	fp, r2, #4
 800b654:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800b658:	1c45      	adds	r5, r0, #1
 800b65a:	00ec      	lsls	r4, r5, #3
 800b65c:	1a47      	subs	r7, r0, r1
 800b65e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800b934 <__kernel_rem_pio2f+0x30c>
 800b662:	9403      	str	r4, [sp, #12]
 800b664:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800b668:	eb0a 0c01 	add.w	ip, sl, r1
 800b66c:	ae1c      	add	r6, sp, #112	; 0x70
 800b66e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800b672:	2400      	movs	r4, #0
 800b674:	4564      	cmp	r4, ip
 800b676:	dd12      	ble.n	800b69e <__kernel_rem_pio2f+0x76>
 800b678:	9b01      	ldr	r3, [sp, #4]
 800b67a:	ac1c      	add	r4, sp, #112	; 0x70
 800b67c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b680:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800b684:	f04f 0c00 	mov.w	ip, #0
 800b688:	45d4      	cmp	ip, sl
 800b68a:	dc27      	bgt.n	800b6dc <__kernel_rem_pio2f+0xb4>
 800b68c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b690:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800b934 <__kernel_rem_pio2f+0x30c>
 800b694:	4627      	mov	r7, r4
 800b696:	2600      	movs	r6, #0
 800b698:	e016      	b.n	800b6c8 <__kernel_rem_pio2f+0xa0>
 800b69a:	2000      	movs	r0, #0
 800b69c:	e7dc      	b.n	800b658 <__kernel_rem_pio2f+0x30>
 800b69e:	42e7      	cmn	r7, r4
 800b6a0:	bf5d      	ittte	pl
 800b6a2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800b6a6:	ee07 3a90 	vmovpl	s15, r3
 800b6aa:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b6ae:	eef0 7a47 	vmovmi.f32	s15, s14
 800b6b2:	ece6 7a01 	vstmia	r6!, {s15}
 800b6b6:	3401      	adds	r4, #1
 800b6b8:	e7dc      	b.n	800b674 <__kernel_rem_pio2f+0x4c>
 800b6ba:	ecf9 6a01 	vldmia	r9!, {s13}
 800b6be:	ed97 7a00 	vldr	s14, [r7]
 800b6c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b6c6:	3601      	adds	r6, #1
 800b6c8:	428e      	cmp	r6, r1
 800b6ca:	f1a7 0704 	sub.w	r7, r7, #4
 800b6ce:	ddf4      	ble.n	800b6ba <__kernel_rem_pio2f+0x92>
 800b6d0:	eceb 7a01 	vstmia	fp!, {s15}
 800b6d4:	f10c 0c01 	add.w	ip, ip, #1
 800b6d8:	3404      	adds	r4, #4
 800b6da:	e7d5      	b.n	800b688 <__kernel_rem_pio2f+0x60>
 800b6dc:	ab08      	add	r3, sp, #32
 800b6de:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b6e2:	eddf 8a93 	vldr	s17, [pc, #588]	; 800b930 <__kernel_rem_pio2f+0x308>
 800b6e6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800b92c <__kernel_rem_pio2f+0x304>
 800b6ea:	9304      	str	r3, [sp, #16]
 800b6ec:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800b6f0:	4656      	mov	r6, sl
 800b6f2:	00b3      	lsls	r3, r6, #2
 800b6f4:	9305      	str	r3, [sp, #20]
 800b6f6:	ab58      	add	r3, sp, #352	; 0x160
 800b6f8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b6fc:	ac08      	add	r4, sp, #32
 800b6fe:	ab44      	add	r3, sp, #272	; 0x110
 800b700:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800b704:	46a4      	mov	ip, r4
 800b706:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b70a:	4637      	mov	r7, r6
 800b70c:	2f00      	cmp	r7, #0
 800b70e:	f1a0 0004 	sub.w	r0, r0, #4
 800b712:	dc4f      	bgt.n	800b7b4 <__kernel_rem_pio2f+0x18c>
 800b714:	4628      	mov	r0, r5
 800b716:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b71a:	f000 fdcd 	bl	800c2b8 <scalbnf>
 800b71e:	eeb0 8a40 	vmov.f32	s16, s0
 800b722:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b726:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b72a:	f000 fd83 	bl	800c234 <floorf>
 800b72e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b732:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b736:	2d00      	cmp	r5, #0
 800b738:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b73c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b740:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800b744:	ee17 9a90 	vmov	r9, s15
 800b748:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b74c:	dd44      	ble.n	800b7d8 <__kernel_rem_pio2f+0x1b0>
 800b74e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800b752:	ab08      	add	r3, sp, #32
 800b754:	f1c5 0e08 	rsb	lr, r5, #8
 800b758:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800b75c:	fa47 f00e 	asr.w	r0, r7, lr
 800b760:	4481      	add	r9, r0
 800b762:	fa00 f00e 	lsl.w	r0, r0, lr
 800b766:	1a3f      	subs	r7, r7, r0
 800b768:	f1c5 0007 	rsb	r0, r5, #7
 800b76c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800b770:	4107      	asrs	r7, r0
 800b772:	2f00      	cmp	r7, #0
 800b774:	dd3f      	ble.n	800b7f6 <__kernel_rem_pio2f+0x1ce>
 800b776:	f04f 0e00 	mov.w	lr, #0
 800b77a:	f109 0901 	add.w	r9, r9, #1
 800b77e:	4673      	mov	r3, lr
 800b780:	4576      	cmp	r6, lr
 800b782:	dc6b      	bgt.n	800b85c <__kernel_rem_pio2f+0x234>
 800b784:	2d00      	cmp	r5, #0
 800b786:	dd04      	ble.n	800b792 <__kernel_rem_pio2f+0x16a>
 800b788:	2d01      	cmp	r5, #1
 800b78a:	d078      	beq.n	800b87e <__kernel_rem_pio2f+0x256>
 800b78c:	2d02      	cmp	r5, #2
 800b78e:	f000 8081 	beq.w	800b894 <__kernel_rem_pio2f+0x26c>
 800b792:	2f02      	cmp	r7, #2
 800b794:	d12f      	bne.n	800b7f6 <__kernel_rem_pio2f+0x1ce>
 800b796:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b79a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b79e:	b353      	cbz	r3, 800b7f6 <__kernel_rem_pio2f+0x1ce>
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b7a6:	f000 fd87 	bl	800c2b8 <scalbnf>
 800b7aa:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b7ae:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b7b2:	e020      	b.n	800b7f6 <__kernel_rem_pio2f+0x1ce>
 800b7b4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b7b8:	3f01      	subs	r7, #1
 800b7ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7c2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b7c6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b7ca:	ecac 0a01 	vstmia	ip!, {s0}
 800b7ce:	ed90 0a00 	vldr	s0, [r0]
 800b7d2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b7d6:	e799      	b.n	800b70c <__kernel_rem_pio2f+0xe4>
 800b7d8:	d105      	bne.n	800b7e6 <__kernel_rem_pio2f+0x1be>
 800b7da:	1e70      	subs	r0, r6, #1
 800b7dc:	ab08      	add	r3, sp, #32
 800b7de:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800b7e2:	11ff      	asrs	r7, r7, #7
 800b7e4:	e7c5      	b.n	800b772 <__kernel_rem_pio2f+0x14a>
 800b7e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b7ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f2:	da31      	bge.n	800b858 <__kernel_rem_pio2f+0x230>
 800b7f4:	2700      	movs	r7, #0
 800b7f6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7fe:	f040 809b 	bne.w	800b938 <__kernel_rem_pio2f+0x310>
 800b802:	1e74      	subs	r4, r6, #1
 800b804:	46a4      	mov	ip, r4
 800b806:	2000      	movs	r0, #0
 800b808:	45d4      	cmp	ip, sl
 800b80a:	da4a      	bge.n	800b8a2 <__kernel_rem_pio2f+0x27a>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	d07a      	beq.n	800b906 <__kernel_rem_pio2f+0x2de>
 800b810:	ab08      	add	r3, sp, #32
 800b812:	3d08      	subs	r5, #8
 800b814:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 8081 	beq.w	800b920 <__kernel_rem_pio2f+0x2f8>
 800b81e:	4628      	mov	r0, r5
 800b820:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b824:	00a5      	lsls	r5, r4, #2
 800b826:	f000 fd47 	bl	800c2b8 <scalbnf>
 800b82a:	aa44      	add	r2, sp, #272	; 0x110
 800b82c:	1d2b      	adds	r3, r5, #4
 800b82e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b930 <__kernel_rem_pio2f+0x308>
 800b832:	18d1      	adds	r1, r2, r3
 800b834:	4622      	mov	r2, r4
 800b836:	2a00      	cmp	r2, #0
 800b838:	f280 80ae 	bge.w	800b998 <__kernel_rem_pio2f+0x370>
 800b83c:	4622      	mov	r2, r4
 800b83e:	2a00      	cmp	r2, #0
 800b840:	f2c0 80cc 	blt.w	800b9dc <__kernel_rem_pio2f+0x3b4>
 800b844:	a944      	add	r1, sp, #272	; 0x110
 800b846:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800b84a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800b928 <__kernel_rem_pio2f+0x300>
 800b84e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b934 <__kernel_rem_pio2f+0x30c>
 800b852:	2000      	movs	r0, #0
 800b854:	1aa1      	subs	r1, r4, r2
 800b856:	e0b6      	b.n	800b9c6 <__kernel_rem_pio2f+0x39e>
 800b858:	2702      	movs	r7, #2
 800b85a:	e78c      	b.n	800b776 <__kernel_rem_pio2f+0x14e>
 800b85c:	6820      	ldr	r0, [r4, #0]
 800b85e:	b94b      	cbnz	r3, 800b874 <__kernel_rem_pio2f+0x24c>
 800b860:	b118      	cbz	r0, 800b86a <__kernel_rem_pio2f+0x242>
 800b862:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800b866:	6020      	str	r0, [r4, #0]
 800b868:	2001      	movs	r0, #1
 800b86a:	f10e 0e01 	add.w	lr, lr, #1
 800b86e:	3404      	adds	r4, #4
 800b870:	4603      	mov	r3, r0
 800b872:	e785      	b.n	800b780 <__kernel_rem_pio2f+0x158>
 800b874:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b878:	6020      	str	r0, [r4, #0]
 800b87a:	4618      	mov	r0, r3
 800b87c:	e7f5      	b.n	800b86a <__kernel_rem_pio2f+0x242>
 800b87e:	1e74      	subs	r4, r6, #1
 800b880:	a808      	add	r0, sp, #32
 800b882:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b886:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b88a:	f10d 0c20 	add.w	ip, sp, #32
 800b88e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800b892:	e77e      	b.n	800b792 <__kernel_rem_pio2f+0x16a>
 800b894:	1e74      	subs	r4, r6, #1
 800b896:	a808      	add	r0, sp, #32
 800b898:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b89c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b8a0:	e7f3      	b.n	800b88a <__kernel_rem_pio2f+0x262>
 800b8a2:	ab08      	add	r3, sp, #32
 800b8a4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b8a8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b8ac:	4318      	orrs	r0, r3
 800b8ae:	e7ab      	b.n	800b808 <__kernel_rem_pio2f+0x1e0>
 800b8b0:	f10c 0c01 	add.w	ip, ip, #1
 800b8b4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800b8b8:	2c00      	cmp	r4, #0
 800b8ba:	d0f9      	beq.n	800b8b0 <__kernel_rem_pio2f+0x288>
 800b8bc:	9b05      	ldr	r3, [sp, #20]
 800b8be:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b8c2:	eb0d 0003 	add.w	r0, sp, r3
 800b8c6:	9b01      	ldr	r3, [sp, #4]
 800b8c8:	18f4      	adds	r4, r6, r3
 800b8ca:	ab1c      	add	r3, sp, #112	; 0x70
 800b8cc:	1c77      	adds	r7, r6, #1
 800b8ce:	384c      	subs	r0, #76	; 0x4c
 800b8d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b8d4:	4466      	add	r6, ip
 800b8d6:	42be      	cmp	r6, r7
 800b8d8:	f6ff af0b 	blt.w	800b6f2 <__kernel_rem_pio2f+0xca>
 800b8dc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800b8e0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b8e4:	ee07 3a90 	vmov	s15, r3
 800b8e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8ec:	f04f 0c00 	mov.w	ip, #0
 800b8f0:	ece4 7a01 	vstmia	r4!, {s15}
 800b8f4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b934 <__kernel_rem_pio2f+0x30c>
 800b8f8:	46a1      	mov	r9, r4
 800b8fa:	458c      	cmp	ip, r1
 800b8fc:	dd07      	ble.n	800b90e <__kernel_rem_pio2f+0x2e6>
 800b8fe:	ece0 7a01 	vstmia	r0!, {s15}
 800b902:	3701      	adds	r7, #1
 800b904:	e7e7      	b.n	800b8d6 <__kernel_rem_pio2f+0x2ae>
 800b906:	9804      	ldr	r0, [sp, #16]
 800b908:	f04f 0c01 	mov.w	ip, #1
 800b90c:	e7d2      	b.n	800b8b4 <__kernel_rem_pio2f+0x28c>
 800b90e:	ecfe 6a01 	vldmia	lr!, {s13}
 800b912:	ed39 7a01 	vldmdb	r9!, {s14}
 800b916:	f10c 0c01 	add.w	ip, ip, #1
 800b91a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b91e:	e7ec      	b.n	800b8fa <__kernel_rem_pio2f+0x2d2>
 800b920:	3c01      	subs	r4, #1
 800b922:	e775      	b.n	800b810 <__kernel_rem_pio2f+0x1e8>
 800b924:	0800c874 	.word	0x0800c874
 800b928:	0800c848 	.word	0x0800c848
 800b92c:	43800000 	.word	0x43800000
 800b930:	3b800000 	.word	0x3b800000
 800b934:	00000000 	.word	0x00000000
 800b938:	9b03      	ldr	r3, [sp, #12]
 800b93a:	eeb0 0a48 	vmov.f32	s0, s16
 800b93e:	1a98      	subs	r0, r3, r2
 800b940:	f000 fcba 	bl	800c2b8 <scalbnf>
 800b944:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b92c <__kernel_rem_pio2f+0x304>
 800b948:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b950:	db19      	blt.n	800b986 <__kernel_rem_pio2f+0x35e>
 800b952:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b930 <__kernel_rem_pio2f+0x308>
 800b956:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b95a:	aa08      	add	r2, sp, #32
 800b95c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b960:	1c74      	adds	r4, r6, #1
 800b962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b966:	3508      	adds	r5, #8
 800b968:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b96c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b970:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b974:	ee10 3a10 	vmov	r3, s0
 800b978:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b97c:	ee17 3a90 	vmov	r3, s15
 800b980:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b984:	e74b      	b.n	800b81e <__kernel_rem_pio2f+0x1f6>
 800b986:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b98a:	aa08      	add	r2, sp, #32
 800b98c:	ee10 3a10 	vmov	r3, s0
 800b990:	4634      	mov	r4, r6
 800b992:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b996:	e742      	b.n	800b81e <__kernel_rem_pio2f+0x1f6>
 800b998:	a808      	add	r0, sp, #32
 800b99a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800b99e:	9001      	str	r0, [sp, #4]
 800b9a0:	ee07 0a90 	vmov	s15, r0
 800b9a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9a8:	3a01      	subs	r2, #1
 800b9aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b9ae:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b9b2:	ed61 7a01 	vstmdb	r1!, {s15}
 800b9b6:	e73e      	b.n	800b836 <__kernel_rem_pio2f+0x20e>
 800b9b8:	ecfc 6a01 	vldmia	ip!, {s13}
 800b9bc:	ecb6 7a01 	vldmia	r6!, {s14}
 800b9c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	4550      	cmp	r0, sl
 800b9c8:	dc01      	bgt.n	800b9ce <__kernel_rem_pio2f+0x3a6>
 800b9ca:	4288      	cmp	r0, r1
 800b9cc:	ddf4      	ble.n	800b9b8 <__kernel_rem_pio2f+0x390>
 800b9ce:	a858      	add	r0, sp, #352	; 0x160
 800b9d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b9d4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800b9d8:	3a01      	subs	r2, #1
 800b9da:	e730      	b.n	800b83e <__kernel_rem_pio2f+0x216>
 800b9dc:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800b9de:	2a02      	cmp	r2, #2
 800b9e0:	dc09      	bgt.n	800b9f6 <__kernel_rem_pio2f+0x3ce>
 800b9e2:	2a00      	cmp	r2, #0
 800b9e4:	dc2a      	bgt.n	800ba3c <__kernel_rem_pio2f+0x414>
 800b9e6:	d043      	beq.n	800ba70 <__kernel_rem_pio2f+0x448>
 800b9e8:	f009 0007 	and.w	r0, r9, #7
 800b9ec:	b059      	add	sp, #356	; 0x164
 800b9ee:	ecbd 8b04 	vpop	{d8-d9}
 800b9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800b9f8:	2b03      	cmp	r3, #3
 800b9fa:	d1f5      	bne.n	800b9e8 <__kernel_rem_pio2f+0x3c0>
 800b9fc:	ab30      	add	r3, sp, #192	; 0xc0
 800b9fe:	442b      	add	r3, r5
 800ba00:	461a      	mov	r2, r3
 800ba02:	4619      	mov	r1, r3
 800ba04:	4620      	mov	r0, r4
 800ba06:	2800      	cmp	r0, #0
 800ba08:	f1a1 0104 	sub.w	r1, r1, #4
 800ba0c:	dc51      	bgt.n	800bab2 <__kernel_rem_pio2f+0x48a>
 800ba0e:	4621      	mov	r1, r4
 800ba10:	2901      	cmp	r1, #1
 800ba12:	f1a2 0204 	sub.w	r2, r2, #4
 800ba16:	dc5c      	bgt.n	800bad2 <__kernel_rem_pio2f+0x4aa>
 800ba18:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800b934 <__kernel_rem_pio2f+0x30c>
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	2c01      	cmp	r4, #1
 800ba20:	dc67      	bgt.n	800baf2 <__kernel_rem_pio2f+0x4ca>
 800ba22:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ba26:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ba2a:	2f00      	cmp	r7, #0
 800ba2c:	d167      	bne.n	800bafe <__kernel_rem_pio2f+0x4d6>
 800ba2e:	edc8 6a00 	vstr	s13, [r8]
 800ba32:	ed88 7a01 	vstr	s14, [r8, #4]
 800ba36:	edc8 7a02 	vstr	s15, [r8, #8]
 800ba3a:	e7d5      	b.n	800b9e8 <__kernel_rem_pio2f+0x3c0>
 800ba3c:	aa30      	add	r2, sp, #192	; 0xc0
 800ba3e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800b934 <__kernel_rem_pio2f+0x30c>
 800ba42:	4413      	add	r3, r2
 800ba44:	4622      	mov	r2, r4
 800ba46:	2a00      	cmp	r2, #0
 800ba48:	da24      	bge.n	800ba94 <__kernel_rem_pio2f+0x46c>
 800ba4a:	b34f      	cbz	r7, 800baa0 <__kernel_rem_pio2f+0x478>
 800ba4c:	eef1 7a47 	vneg.f32	s15, s14
 800ba50:	edc8 7a00 	vstr	s15, [r8]
 800ba54:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800ba58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba5c:	aa31      	add	r2, sp, #196	; 0xc4
 800ba5e:	2301      	movs	r3, #1
 800ba60:	429c      	cmp	r4, r3
 800ba62:	da20      	bge.n	800baa6 <__kernel_rem_pio2f+0x47e>
 800ba64:	b10f      	cbz	r7, 800ba6a <__kernel_rem_pio2f+0x442>
 800ba66:	eef1 7a67 	vneg.f32	s15, s15
 800ba6a:	edc8 7a01 	vstr	s15, [r8, #4]
 800ba6e:	e7bb      	b.n	800b9e8 <__kernel_rem_pio2f+0x3c0>
 800ba70:	aa30      	add	r2, sp, #192	; 0xc0
 800ba72:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800b934 <__kernel_rem_pio2f+0x30c>
 800ba76:	4413      	add	r3, r2
 800ba78:	2c00      	cmp	r4, #0
 800ba7a:	da05      	bge.n	800ba88 <__kernel_rem_pio2f+0x460>
 800ba7c:	b10f      	cbz	r7, 800ba82 <__kernel_rem_pio2f+0x45a>
 800ba7e:	eef1 7a67 	vneg.f32	s15, s15
 800ba82:	edc8 7a00 	vstr	s15, [r8]
 800ba86:	e7af      	b.n	800b9e8 <__kernel_rem_pio2f+0x3c0>
 800ba88:	ed33 7a01 	vldmdb	r3!, {s14}
 800ba8c:	3c01      	subs	r4, #1
 800ba8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba92:	e7f1      	b.n	800ba78 <__kernel_rem_pio2f+0x450>
 800ba94:	ed73 7a01 	vldmdb	r3!, {s15}
 800ba98:	3a01      	subs	r2, #1
 800ba9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba9e:	e7d2      	b.n	800ba46 <__kernel_rem_pio2f+0x41e>
 800baa0:	eef0 7a47 	vmov.f32	s15, s14
 800baa4:	e7d4      	b.n	800ba50 <__kernel_rem_pio2f+0x428>
 800baa6:	ecb2 7a01 	vldmia	r2!, {s14}
 800baaa:	3301      	adds	r3, #1
 800baac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bab0:	e7d6      	b.n	800ba60 <__kernel_rem_pio2f+0x438>
 800bab2:	edd1 7a00 	vldr	s15, [r1]
 800bab6:	edd1 6a01 	vldr	s13, [r1, #4]
 800baba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800babe:	3801      	subs	r0, #1
 800bac0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bac4:	ed81 7a00 	vstr	s14, [r1]
 800bac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bacc:	edc1 7a01 	vstr	s15, [r1, #4]
 800bad0:	e799      	b.n	800ba06 <__kernel_rem_pio2f+0x3de>
 800bad2:	edd2 7a00 	vldr	s15, [r2]
 800bad6:	edd2 6a01 	vldr	s13, [r2, #4]
 800bada:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bade:	3901      	subs	r1, #1
 800bae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bae4:	ed82 7a00 	vstr	s14, [r2]
 800bae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baec:	edc2 7a01 	vstr	s15, [r2, #4]
 800baf0:	e78e      	b.n	800ba10 <__kernel_rem_pio2f+0x3e8>
 800baf2:	ed33 7a01 	vldmdb	r3!, {s14}
 800baf6:	3c01      	subs	r4, #1
 800baf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bafc:	e78f      	b.n	800ba1e <__kernel_rem_pio2f+0x3f6>
 800bafe:	eef1 6a66 	vneg.f32	s13, s13
 800bb02:	eeb1 7a47 	vneg.f32	s14, s14
 800bb06:	edc8 6a00 	vstr	s13, [r8]
 800bb0a:	ed88 7a01 	vstr	s14, [r8, #4]
 800bb0e:	eef1 7a67 	vneg.f32	s15, s15
 800bb12:	e790      	b.n	800ba36 <__kernel_rem_pio2f+0x40e>

0800bb14 <__kernel_sinf>:
 800bb14:	ee10 3a10 	vmov	r3, s0
 800bb18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb1c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bb20:	da04      	bge.n	800bb2c <__kernel_sinf+0x18>
 800bb22:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bb26:	ee17 3a90 	vmov	r3, s15
 800bb2a:	b35b      	cbz	r3, 800bb84 <__kernel_sinf+0x70>
 800bb2c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bb30:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bb88 <__kernel_sinf+0x74>
 800bb34:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800bb8c <__kernel_sinf+0x78>
 800bb38:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bb3c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800bb90 <__kernel_sinf+0x7c>
 800bb40:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bb44:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800bb94 <__kernel_sinf+0x80>
 800bb48:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bb4c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800bb98 <__kernel_sinf+0x84>
 800bb50:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bb54:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bb58:	b930      	cbnz	r0, 800bb68 <__kernel_sinf+0x54>
 800bb5a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800bb9c <__kernel_sinf+0x88>
 800bb5e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bb62:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bb66:	4770      	bx	lr
 800bb68:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bb6c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bb70:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bb74:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bb78:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bba0 <__kernel_sinf+0x8c>
 800bb7c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bb80:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	2f2ec9d3 	.word	0x2f2ec9d3
 800bb8c:	b2d72f34 	.word	0xb2d72f34
 800bb90:	3638ef1b 	.word	0x3638ef1b
 800bb94:	b9500d01 	.word	0xb9500d01
 800bb98:	3c088889 	.word	0x3c088889
 800bb9c:	be2aaaab 	.word	0xbe2aaaab
 800bba0:	3e2aaaab 	.word	0x3e2aaaab

0800bba4 <with_errno>:
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	4604      	mov	r4, r0
 800bba8:	460d      	mov	r5, r1
 800bbaa:	4616      	mov	r6, r2
 800bbac:	f000 fbf6 	bl	800c39c <__errno>
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	6006      	str	r6, [r0, #0]
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	bd70      	pop	{r4, r5, r6, pc}

0800bbb8 <xflow>:
 800bbb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbba:	4614      	mov	r4, r2
 800bbbc:	461d      	mov	r5, r3
 800bbbe:	b108      	cbz	r0, 800bbc4 <xflow+0xc>
 800bbc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bbc4:	e9cd 2300 	strd	r2, r3, [sp]
 800bbc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbcc:	4620      	mov	r0, r4
 800bbce:	4629      	mov	r1, r5
 800bbd0:	f7f4 fcd6 	bl	8000580 <__aeabi_dmul>
 800bbd4:	2222      	movs	r2, #34	; 0x22
 800bbd6:	b003      	add	sp, #12
 800bbd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbdc:	f7ff bfe2 	b.w	800bba4 <with_errno>

0800bbe0 <__math_uflow>:
 800bbe0:	b508      	push	{r3, lr}
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bbe8:	f7ff ffe6 	bl	800bbb8 <xflow>
 800bbec:	ec41 0b10 	vmov	d0, r0, r1
 800bbf0:	bd08      	pop	{r3, pc}

0800bbf2 <__math_oflow>:
 800bbf2:	b508      	push	{r3, lr}
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bbfa:	f7ff ffdd 	bl	800bbb8 <xflow>
 800bbfe:	ec41 0b10 	vmov	d0, r0, r1
 800bc02:	bd08      	pop	{r3, pc}
 800bc04:	0000      	movs	r0, r0
	...

0800bc08 <atan>:
 800bc08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	ec55 4b10 	vmov	r4, r5, d0
 800bc10:	4bc3      	ldr	r3, [pc, #780]	; (800bf20 <atan+0x318>)
 800bc12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc16:	429e      	cmp	r6, r3
 800bc18:	46ab      	mov	fp, r5
 800bc1a:	dd18      	ble.n	800bc4e <atan+0x46>
 800bc1c:	4bc1      	ldr	r3, [pc, #772]	; (800bf24 <atan+0x31c>)
 800bc1e:	429e      	cmp	r6, r3
 800bc20:	dc01      	bgt.n	800bc26 <atan+0x1e>
 800bc22:	d109      	bne.n	800bc38 <atan+0x30>
 800bc24:	b144      	cbz	r4, 800bc38 <atan+0x30>
 800bc26:	4622      	mov	r2, r4
 800bc28:	462b      	mov	r3, r5
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	f7f4 faf1 	bl	8000214 <__adddf3>
 800bc32:	4604      	mov	r4, r0
 800bc34:	460d      	mov	r5, r1
 800bc36:	e006      	b.n	800bc46 <atan+0x3e>
 800bc38:	f1bb 0f00 	cmp.w	fp, #0
 800bc3c:	f300 8131 	bgt.w	800bea2 <atan+0x29a>
 800bc40:	a59b      	add	r5, pc, #620	; (adr r5, 800beb0 <atan+0x2a8>)
 800bc42:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc46:	ec45 4b10 	vmov	d0, r4, r5
 800bc4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4e:	4bb6      	ldr	r3, [pc, #728]	; (800bf28 <atan+0x320>)
 800bc50:	429e      	cmp	r6, r3
 800bc52:	dc14      	bgt.n	800bc7e <atan+0x76>
 800bc54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bc58:	429e      	cmp	r6, r3
 800bc5a:	dc0d      	bgt.n	800bc78 <atan+0x70>
 800bc5c:	a396      	add	r3, pc, #600	; (adr r3, 800beb8 <atan+0x2b0>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	ee10 0a10 	vmov	r0, s0
 800bc66:	4629      	mov	r1, r5
 800bc68:	f7f4 fad4 	bl	8000214 <__adddf3>
 800bc6c:	4baf      	ldr	r3, [pc, #700]	; (800bf2c <atan+0x324>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f7f4 ff16 	bl	8000aa0 <__aeabi_dcmpgt>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	d1e6      	bne.n	800bc46 <atan+0x3e>
 800bc78:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bc7c:	e02b      	b.n	800bcd6 <atan+0xce>
 800bc7e:	f000 f963 	bl	800bf48 <fabs>
 800bc82:	4bab      	ldr	r3, [pc, #684]	; (800bf30 <atan+0x328>)
 800bc84:	429e      	cmp	r6, r3
 800bc86:	ec55 4b10 	vmov	r4, r5, d0
 800bc8a:	f300 80bf 	bgt.w	800be0c <atan+0x204>
 800bc8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bc92:	429e      	cmp	r6, r3
 800bc94:	f300 80a0 	bgt.w	800bdd8 <atan+0x1d0>
 800bc98:	ee10 2a10 	vmov	r2, s0
 800bc9c:	ee10 0a10 	vmov	r0, s0
 800bca0:	462b      	mov	r3, r5
 800bca2:	4629      	mov	r1, r5
 800bca4:	f7f4 fab6 	bl	8000214 <__adddf3>
 800bca8:	4ba0      	ldr	r3, [pc, #640]	; (800bf2c <atan+0x324>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f7f4 fab0 	bl	8000210 <__aeabi_dsub>
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460f      	mov	r7, r1
 800bcb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bcba:	4620      	mov	r0, r4
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	f7f4 faa9 	bl	8000214 <__adddf3>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	4639      	mov	r1, r7
 800bcca:	f7f4 fd83 	bl	80007d4 <__aeabi_ddiv>
 800bcce:	f04f 0a00 	mov.w	sl, #0
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	462b      	mov	r3, r5
 800bcda:	4620      	mov	r0, r4
 800bcdc:	4629      	mov	r1, r5
 800bcde:	f7f4 fc4f 	bl	8000580 <__aeabi_dmul>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	4680      	mov	r8, r0
 800bce8:	4689      	mov	r9, r1
 800bcea:	f7f4 fc49 	bl	8000580 <__aeabi_dmul>
 800bcee:	a374      	add	r3, pc, #464	; (adr r3, 800bec0 <atan+0x2b8>)
 800bcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	460f      	mov	r7, r1
 800bcf8:	f7f4 fc42 	bl	8000580 <__aeabi_dmul>
 800bcfc:	a372      	add	r3, pc, #456	; (adr r3, 800bec8 <atan+0x2c0>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 fa87 	bl	8000214 <__adddf3>
 800bd06:	4632      	mov	r2, r6
 800bd08:	463b      	mov	r3, r7
 800bd0a:	f7f4 fc39 	bl	8000580 <__aeabi_dmul>
 800bd0e:	a370      	add	r3, pc, #448	; (adr r3, 800bed0 <atan+0x2c8>)
 800bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd14:	f7f4 fa7e 	bl	8000214 <__adddf3>
 800bd18:	4632      	mov	r2, r6
 800bd1a:	463b      	mov	r3, r7
 800bd1c:	f7f4 fc30 	bl	8000580 <__aeabi_dmul>
 800bd20:	a36d      	add	r3, pc, #436	; (adr r3, 800bed8 <atan+0x2d0>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fa75 	bl	8000214 <__adddf3>
 800bd2a:	4632      	mov	r2, r6
 800bd2c:	463b      	mov	r3, r7
 800bd2e:	f7f4 fc27 	bl	8000580 <__aeabi_dmul>
 800bd32:	a36b      	add	r3, pc, #428	; (adr r3, 800bee0 <atan+0x2d8>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 fa6c 	bl	8000214 <__adddf3>
 800bd3c:	4632      	mov	r2, r6
 800bd3e:	463b      	mov	r3, r7
 800bd40:	f7f4 fc1e 	bl	8000580 <__aeabi_dmul>
 800bd44:	a368      	add	r3, pc, #416	; (adr r3, 800bee8 <atan+0x2e0>)
 800bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4a:	f7f4 fa63 	bl	8000214 <__adddf3>
 800bd4e:	4642      	mov	r2, r8
 800bd50:	464b      	mov	r3, r9
 800bd52:	f7f4 fc15 	bl	8000580 <__aeabi_dmul>
 800bd56:	a366      	add	r3, pc, #408	; (adr r3, 800bef0 <atan+0x2e8>)
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	4680      	mov	r8, r0
 800bd5e:	4689      	mov	r9, r1
 800bd60:	4630      	mov	r0, r6
 800bd62:	4639      	mov	r1, r7
 800bd64:	f7f4 fc0c 	bl	8000580 <__aeabi_dmul>
 800bd68:	a363      	add	r3, pc, #396	; (adr r3, 800bef8 <atan+0x2f0>)
 800bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6e:	f7f4 fa4f 	bl	8000210 <__aeabi_dsub>
 800bd72:	4632      	mov	r2, r6
 800bd74:	463b      	mov	r3, r7
 800bd76:	f7f4 fc03 	bl	8000580 <__aeabi_dmul>
 800bd7a:	a361      	add	r3, pc, #388	; (adr r3, 800bf00 <atan+0x2f8>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 fa46 	bl	8000210 <__aeabi_dsub>
 800bd84:	4632      	mov	r2, r6
 800bd86:	463b      	mov	r3, r7
 800bd88:	f7f4 fbfa 	bl	8000580 <__aeabi_dmul>
 800bd8c:	a35e      	add	r3, pc, #376	; (adr r3, 800bf08 <atan+0x300>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fa3d 	bl	8000210 <__aeabi_dsub>
 800bd96:	4632      	mov	r2, r6
 800bd98:	463b      	mov	r3, r7
 800bd9a:	f7f4 fbf1 	bl	8000580 <__aeabi_dmul>
 800bd9e:	a35c      	add	r3, pc, #368	; (adr r3, 800bf10 <atan+0x308>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f7f4 fa34 	bl	8000210 <__aeabi_dsub>
 800bda8:	4632      	mov	r2, r6
 800bdaa:	463b      	mov	r3, r7
 800bdac:	f7f4 fbe8 	bl	8000580 <__aeabi_dmul>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	4640      	mov	r0, r8
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	f7f4 fa2c 	bl	8000214 <__adddf3>
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	f7f4 fbde 	bl	8000580 <__aeabi_dmul>
 800bdc4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800bdc8:	4602      	mov	r2, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	d14b      	bne.n	800be66 <atan+0x25e>
 800bdce:	4620      	mov	r0, r4
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	f7f4 fa1d 	bl	8000210 <__aeabi_dsub>
 800bdd6:	e72c      	b.n	800bc32 <atan+0x2a>
 800bdd8:	ee10 0a10 	vmov	r0, s0
 800bddc:	4b53      	ldr	r3, [pc, #332]	; (800bf2c <atan+0x324>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7f4 fa15 	bl	8000210 <__aeabi_dsub>
 800bde6:	4b51      	ldr	r3, [pc, #324]	; (800bf2c <atan+0x324>)
 800bde8:	4606      	mov	r6, r0
 800bdea:	460f      	mov	r7, r1
 800bdec:	2200      	movs	r2, #0
 800bdee:	4620      	mov	r0, r4
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	f7f4 fa0f 	bl	8000214 <__adddf3>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	4639      	mov	r1, r7
 800bdfe:	f7f4 fce9 	bl	80007d4 <__aeabi_ddiv>
 800be02:	f04f 0a01 	mov.w	sl, #1
 800be06:	4604      	mov	r4, r0
 800be08:	460d      	mov	r5, r1
 800be0a:	e764      	b.n	800bcd6 <atan+0xce>
 800be0c:	4b49      	ldr	r3, [pc, #292]	; (800bf34 <atan+0x32c>)
 800be0e:	429e      	cmp	r6, r3
 800be10:	da1d      	bge.n	800be4e <atan+0x246>
 800be12:	ee10 0a10 	vmov	r0, s0
 800be16:	4b48      	ldr	r3, [pc, #288]	; (800bf38 <atan+0x330>)
 800be18:	2200      	movs	r2, #0
 800be1a:	4629      	mov	r1, r5
 800be1c:	f7f4 f9f8 	bl	8000210 <__aeabi_dsub>
 800be20:	4b45      	ldr	r3, [pc, #276]	; (800bf38 <atan+0x330>)
 800be22:	4606      	mov	r6, r0
 800be24:	460f      	mov	r7, r1
 800be26:	2200      	movs	r2, #0
 800be28:	4620      	mov	r0, r4
 800be2a:	4629      	mov	r1, r5
 800be2c:	f7f4 fba8 	bl	8000580 <__aeabi_dmul>
 800be30:	4b3e      	ldr	r3, [pc, #248]	; (800bf2c <atan+0x324>)
 800be32:	2200      	movs	r2, #0
 800be34:	f7f4 f9ee 	bl	8000214 <__adddf3>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4630      	mov	r0, r6
 800be3e:	4639      	mov	r1, r7
 800be40:	f7f4 fcc8 	bl	80007d4 <__aeabi_ddiv>
 800be44:	f04f 0a02 	mov.w	sl, #2
 800be48:	4604      	mov	r4, r0
 800be4a:	460d      	mov	r5, r1
 800be4c:	e743      	b.n	800bcd6 <atan+0xce>
 800be4e:	462b      	mov	r3, r5
 800be50:	ee10 2a10 	vmov	r2, s0
 800be54:	4939      	ldr	r1, [pc, #228]	; (800bf3c <atan+0x334>)
 800be56:	2000      	movs	r0, #0
 800be58:	f7f4 fcbc 	bl	80007d4 <__aeabi_ddiv>
 800be5c:	f04f 0a03 	mov.w	sl, #3
 800be60:	4604      	mov	r4, r0
 800be62:	460d      	mov	r5, r1
 800be64:	e737      	b.n	800bcd6 <atan+0xce>
 800be66:	4b36      	ldr	r3, [pc, #216]	; (800bf40 <atan+0x338>)
 800be68:	4e36      	ldr	r6, [pc, #216]	; (800bf44 <atan+0x33c>)
 800be6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800be6e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800be72:	e9da 2300 	ldrd	r2, r3, [sl]
 800be76:	f7f4 f9cb 	bl	8000210 <__aeabi_dsub>
 800be7a:	4622      	mov	r2, r4
 800be7c:	462b      	mov	r3, r5
 800be7e:	f7f4 f9c7 	bl	8000210 <__aeabi_dsub>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	e9d6 0100 	ldrd	r0, r1, [r6]
 800be8a:	f7f4 f9c1 	bl	8000210 <__aeabi_dsub>
 800be8e:	f1bb 0f00 	cmp.w	fp, #0
 800be92:	4604      	mov	r4, r0
 800be94:	460d      	mov	r5, r1
 800be96:	f6bf aed6 	bge.w	800bc46 <atan+0x3e>
 800be9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be9e:	461d      	mov	r5, r3
 800bea0:	e6d1      	b.n	800bc46 <atan+0x3e>
 800bea2:	a51d      	add	r5, pc, #116	; (adr r5, 800bf18 <atan+0x310>)
 800bea4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bea8:	e6cd      	b.n	800bc46 <atan+0x3e>
 800beaa:	bf00      	nop
 800beac:	f3af 8000 	nop.w
 800beb0:	54442d18 	.word	0x54442d18
 800beb4:	bff921fb 	.word	0xbff921fb
 800beb8:	8800759c 	.word	0x8800759c
 800bebc:	7e37e43c 	.word	0x7e37e43c
 800bec0:	e322da11 	.word	0xe322da11
 800bec4:	3f90ad3a 	.word	0x3f90ad3a
 800bec8:	24760deb 	.word	0x24760deb
 800becc:	3fa97b4b 	.word	0x3fa97b4b
 800bed0:	a0d03d51 	.word	0xa0d03d51
 800bed4:	3fb10d66 	.word	0x3fb10d66
 800bed8:	c54c206e 	.word	0xc54c206e
 800bedc:	3fb745cd 	.word	0x3fb745cd
 800bee0:	920083ff 	.word	0x920083ff
 800bee4:	3fc24924 	.word	0x3fc24924
 800bee8:	5555550d 	.word	0x5555550d
 800beec:	3fd55555 	.word	0x3fd55555
 800bef0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bef4:	bfa2b444 	.word	0xbfa2b444
 800bef8:	52defd9a 	.word	0x52defd9a
 800befc:	3fadde2d 	.word	0x3fadde2d
 800bf00:	af749a6d 	.word	0xaf749a6d
 800bf04:	3fb3b0f2 	.word	0x3fb3b0f2
 800bf08:	fe231671 	.word	0xfe231671
 800bf0c:	3fbc71c6 	.word	0x3fbc71c6
 800bf10:	9998ebc4 	.word	0x9998ebc4
 800bf14:	3fc99999 	.word	0x3fc99999
 800bf18:	54442d18 	.word	0x54442d18
 800bf1c:	3ff921fb 	.word	0x3ff921fb
 800bf20:	440fffff 	.word	0x440fffff
 800bf24:	7ff00000 	.word	0x7ff00000
 800bf28:	3fdbffff 	.word	0x3fdbffff
 800bf2c:	3ff00000 	.word	0x3ff00000
 800bf30:	3ff2ffff 	.word	0x3ff2ffff
 800bf34:	40038000 	.word	0x40038000
 800bf38:	3ff80000 	.word	0x3ff80000
 800bf3c:	bff00000 	.word	0xbff00000
 800bf40:	0800c8a0 	.word	0x0800c8a0
 800bf44:	0800c880 	.word	0x0800c880

0800bf48 <fabs>:
 800bf48:	ec51 0b10 	vmov	r0, r1, d0
 800bf4c:	ee10 2a10 	vmov	r2, s0
 800bf50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf54:	ec43 2b10 	vmov	d0, r2, r3
 800bf58:	4770      	bx	lr

0800bf5a <finite>:
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	ed8d 0b00 	vstr	d0, [sp]
 800bf60:	9801      	ldr	r0, [sp, #4]
 800bf62:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bf66:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bf6a:	0fc0      	lsrs	r0, r0, #31
 800bf6c:	b002      	add	sp, #8
 800bf6e:	4770      	bx	lr

0800bf70 <scalbn>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	ec55 4b10 	vmov	r4, r5, d0
 800bf76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	462b      	mov	r3, r5
 800bf7e:	b99a      	cbnz	r2, 800bfa8 <scalbn+0x38>
 800bf80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bf84:	4323      	orrs	r3, r4
 800bf86:	d036      	beq.n	800bff6 <scalbn+0x86>
 800bf88:	4b39      	ldr	r3, [pc, #228]	; (800c070 <scalbn+0x100>)
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	ee10 0a10 	vmov	r0, s0
 800bf90:	2200      	movs	r2, #0
 800bf92:	f7f4 faf5 	bl	8000580 <__aeabi_dmul>
 800bf96:	4b37      	ldr	r3, [pc, #220]	; (800c074 <scalbn+0x104>)
 800bf98:	429e      	cmp	r6, r3
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	da10      	bge.n	800bfc2 <scalbn+0x52>
 800bfa0:	a32b      	add	r3, pc, #172	; (adr r3, 800c050 <scalbn+0xe0>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	e03a      	b.n	800c01e <scalbn+0xae>
 800bfa8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bfac:	428a      	cmp	r2, r1
 800bfae:	d10c      	bne.n	800bfca <scalbn+0x5a>
 800bfb0:	ee10 2a10 	vmov	r2, s0
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	f7f4 f92c 	bl	8000214 <__adddf3>
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	460d      	mov	r5, r1
 800bfc0:	e019      	b.n	800bff6 <scalbn+0x86>
 800bfc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	3a36      	subs	r2, #54	; 0x36
 800bfca:	4432      	add	r2, r6
 800bfcc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bfd0:	428a      	cmp	r2, r1
 800bfd2:	dd08      	ble.n	800bfe6 <scalbn+0x76>
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	a120      	add	r1, pc, #128	; (adr r1, 800c058 <scalbn+0xe8>)
 800bfd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfdc:	da1c      	bge.n	800c018 <scalbn+0xa8>
 800bfde:	a120      	add	r1, pc, #128	; (adr r1, 800c060 <scalbn+0xf0>)
 800bfe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfe4:	e018      	b.n	800c018 <scalbn+0xa8>
 800bfe6:	2a00      	cmp	r2, #0
 800bfe8:	dd08      	ble.n	800bffc <scalbn+0x8c>
 800bfea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bfee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bff2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bff6:	ec45 4b10 	vmov	d0, r4, r5
 800bffa:	bd70      	pop	{r4, r5, r6, pc}
 800bffc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c000:	da19      	bge.n	800c036 <scalbn+0xc6>
 800c002:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c006:	429e      	cmp	r6, r3
 800c008:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c00c:	dd0a      	ble.n	800c024 <scalbn+0xb4>
 800c00e:	a112      	add	r1, pc, #72	; (adr r1, 800c058 <scalbn+0xe8>)
 800c010:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e2      	bne.n	800bfde <scalbn+0x6e>
 800c018:	a30f      	add	r3, pc, #60	; (adr r3, 800c058 <scalbn+0xe8>)
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	f7f4 faaf 	bl	8000580 <__aeabi_dmul>
 800c022:	e7cb      	b.n	800bfbc <scalbn+0x4c>
 800c024:	a10a      	add	r1, pc, #40	; (adr r1, 800c050 <scalbn+0xe0>)
 800c026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d0b8      	beq.n	800bfa0 <scalbn+0x30>
 800c02e:	a10e      	add	r1, pc, #56	; (adr r1, 800c068 <scalbn+0xf8>)
 800c030:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c034:	e7b4      	b.n	800bfa0 <scalbn+0x30>
 800c036:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c03a:	3236      	adds	r2, #54	; 0x36
 800c03c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c040:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c044:	4620      	mov	r0, r4
 800c046:	4b0c      	ldr	r3, [pc, #48]	; (800c078 <scalbn+0x108>)
 800c048:	2200      	movs	r2, #0
 800c04a:	e7e8      	b.n	800c01e <scalbn+0xae>
 800c04c:	f3af 8000 	nop.w
 800c050:	c2f8f359 	.word	0xc2f8f359
 800c054:	01a56e1f 	.word	0x01a56e1f
 800c058:	8800759c 	.word	0x8800759c
 800c05c:	7e37e43c 	.word	0x7e37e43c
 800c060:	8800759c 	.word	0x8800759c
 800c064:	fe37e43c 	.word	0xfe37e43c
 800c068:	c2f8f359 	.word	0xc2f8f359
 800c06c:	81a56e1f 	.word	0x81a56e1f
 800c070:	43500000 	.word	0x43500000
 800c074:	ffff3cb0 	.word	0xffff3cb0
 800c078:	3c900000 	.word	0x3c900000

0800c07c <atanf>:
 800c07c:	b538      	push	{r3, r4, r5, lr}
 800c07e:	ee10 5a10 	vmov	r5, s0
 800c082:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c086:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c08a:	eef0 7a40 	vmov.f32	s15, s0
 800c08e:	db10      	blt.n	800c0b2 <atanf+0x36>
 800c090:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c094:	dd04      	ble.n	800c0a0 <atanf+0x24>
 800c096:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c09a:	eeb0 0a67 	vmov.f32	s0, s15
 800c09e:	bd38      	pop	{r3, r4, r5, pc}
 800c0a0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c1d8 <atanf+0x15c>
 800c0a4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c1dc <atanf+0x160>
 800c0a8:	2d00      	cmp	r5, #0
 800c0aa:	bfd8      	it	le
 800c0ac:	eef0 7a40 	vmovle.f32	s15, s0
 800c0b0:	e7f3      	b.n	800c09a <atanf+0x1e>
 800c0b2:	4b4b      	ldr	r3, [pc, #300]	; (800c1e0 <atanf+0x164>)
 800c0b4:	429c      	cmp	r4, r3
 800c0b6:	dc10      	bgt.n	800c0da <atanf+0x5e>
 800c0b8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c0bc:	da0a      	bge.n	800c0d4 <atanf+0x58>
 800c0be:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c1e4 <atanf+0x168>
 800c0c2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c0c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0ca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d2:	dce2      	bgt.n	800c09a <atanf+0x1e>
 800c0d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0d8:	e013      	b.n	800c102 <atanf+0x86>
 800c0da:	f000 f8a3 	bl	800c224 <fabsf>
 800c0de:	4b42      	ldr	r3, [pc, #264]	; (800c1e8 <atanf+0x16c>)
 800c0e0:	429c      	cmp	r4, r3
 800c0e2:	dc4f      	bgt.n	800c184 <atanf+0x108>
 800c0e4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c0e8:	429c      	cmp	r4, r3
 800c0ea:	dc41      	bgt.n	800c170 <atanf+0xf4>
 800c0ec:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c0f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c0f4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c0fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c108:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c1ec <atanf+0x170>
 800c10c:	eddf 5a38 	vldr	s11, [pc, #224]	; 800c1f0 <atanf+0x174>
 800c110:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800c1f4 <atanf+0x178>
 800c114:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c118:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c11c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c1f8 <atanf+0x17c>
 800c120:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c124:	eddf 5a35 	vldr	s11, [pc, #212]	; 800c1fc <atanf+0x180>
 800c128:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c12c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c200 <atanf+0x184>
 800c130:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c134:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c204 <atanf+0x188>
 800c138:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c13c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800c208 <atanf+0x18c>
 800c140:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c144:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c20c <atanf+0x190>
 800c148:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c14c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800c210 <atanf+0x194>
 800c150:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c154:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800c214 <atanf+0x198>
 800c158:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c15c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c160:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c164:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c168:	d121      	bne.n	800c1ae <atanf+0x132>
 800c16a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c16e:	e794      	b.n	800c09a <atanf+0x1e>
 800c170:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c174:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c178:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c17c:	2301      	movs	r3, #1
 800c17e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c182:	e7be      	b.n	800c102 <atanf+0x86>
 800c184:	4b24      	ldr	r3, [pc, #144]	; (800c218 <atanf+0x19c>)
 800c186:	429c      	cmp	r4, r3
 800c188:	dc0b      	bgt.n	800c1a2 <atanf+0x126>
 800c18a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c18e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c192:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c196:	2302      	movs	r3, #2
 800c198:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c19c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1a0:	e7af      	b.n	800c102 <atanf+0x86>
 800c1a2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c1a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c1aa:	2303      	movs	r3, #3
 800c1ac:	e7a9      	b.n	800c102 <atanf+0x86>
 800c1ae:	4a1b      	ldr	r2, [pc, #108]	; (800c21c <atanf+0x1a0>)
 800c1b0:	491b      	ldr	r1, [pc, #108]	; (800c220 <atanf+0x1a4>)
 800c1b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c1b6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c1ba:	ed93 0a00 	vldr	s0, [r3]
 800c1be:	ee37 7a40 	vsub.f32	s14, s14, s0
 800c1c2:	ed92 0a00 	vldr	s0, [r2]
 800c1c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c1d0:	bfb8      	it	lt
 800c1d2:	eef1 7a67 	vneglt.f32	s15, s15
 800c1d6:	e760      	b.n	800c09a <atanf+0x1e>
 800c1d8:	3fc90fdb 	.word	0x3fc90fdb
 800c1dc:	bfc90fdb 	.word	0xbfc90fdb
 800c1e0:	3edfffff 	.word	0x3edfffff
 800c1e4:	7149f2ca 	.word	0x7149f2ca
 800c1e8:	3f97ffff 	.word	0x3f97ffff
 800c1ec:	3c8569d7 	.word	0x3c8569d7
 800c1f0:	3d4bda59 	.word	0x3d4bda59
 800c1f4:	bd6ef16b 	.word	0xbd6ef16b
 800c1f8:	3d886b35 	.word	0x3d886b35
 800c1fc:	3dba2e6e 	.word	0x3dba2e6e
 800c200:	3e124925 	.word	0x3e124925
 800c204:	3eaaaaab 	.word	0x3eaaaaab
 800c208:	bd15a221 	.word	0xbd15a221
 800c20c:	bd9d8795 	.word	0xbd9d8795
 800c210:	bde38e38 	.word	0xbde38e38
 800c214:	be4ccccd 	.word	0xbe4ccccd
 800c218:	401bffff 	.word	0x401bffff
 800c21c:	0800c8c0 	.word	0x0800c8c0
 800c220:	0800c8d0 	.word	0x0800c8d0

0800c224 <fabsf>:
 800c224:	ee10 3a10 	vmov	r3, s0
 800c228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c22c:	ee00 3a10 	vmov	s0, r3
 800c230:	4770      	bx	lr
	...

0800c234 <floorf>:
 800c234:	ee10 3a10 	vmov	r3, s0
 800c238:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c23c:	3a7f      	subs	r2, #127	; 0x7f
 800c23e:	2a16      	cmp	r2, #22
 800c240:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c244:	dc2a      	bgt.n	800c29c <floorf+0x68>
 800c246:	2a00      	cmp	r2, #0
 800c248:	da11      	bge.n	800c26e <floorf+0x3a>
 800c24a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c2ac <floorf+0x78>
 800c24e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c252:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25a:	dd05      	ble.n	800c268 <floorf+0x34>
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	da23      	bge.n	800c2a8 <floorf+0x74>
 800c260:	4a13      	ldr	r2, [pc, #76]	; (800c2b0 <floorf+0x7c>)
 800c262:	2900      	cmp	r1, #0
 800c264:	bf18      	it	ne
 800c266:	4613      	movne	r3, r2
 800c268:	ee00 3a10 	vmov	s0, r3
 800c26c:	4770      	bx	lr
 800c26e:	4911      	ldr	r1, [pc, #68]	; (800c2b4 <floorf+0x80>)
 800c270:	4111      	asrs	r1, r2
 800c272:	420b      	tst	r3, r1
 800c274:	d0fa      	beq.n	800c26c <floorf+0x38>
 800c276:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c2ac <floorf+0x78>
 800c27a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c27e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c286:	ddef      	ble.n	800c268 <floorf+0x34>
 800c288:	2b00      	cmp	r3, #0
 800c28a:	bfbe      	ittt	lt
 800c28c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c290:	fa40 f202 	asrlt.w	r2, r0, r2
 800c294:	189b      	addlt	r3, r3, r2
 800c296:	ea23 0301 	bic.w	r3, r3, r1
 800c29a:	e7e5      	b.n	800c268 <floorf+0x34>
 800c29c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c2a0:	d3e4      	bcc.n	800c26c <floorf+0x38>
 800c2a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2a6:	4770      	bx	lr
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	e7dd      	b.n	800c268 <floorf+0x34>
 800c2ac:	7149f2ca 	.word	0x7149f2ca
 800c2b0:	bf800000 	.word	0xbf800000
 800c2b4:	007fffff 	.word	0x007fffff

0800c2b8 <scalbnf>:
 800c2b8:	ee10 3a10 	vmov	r3, s0
 800c2bc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c2c0:	d025      	beq.n	800c30e <scalbnf+0x56>
 800c2c2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c2c6:	d302      	bcc.n	800c2ce <scalbnf+0x16>
 800c2c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2cc:	4770      	bx	lr
 800c2ce:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c2d2:	d122      	bne.n	800c31a <scalbnf+0x62>
 800c2d4:	4b2a      	ldr	r3, [pc, #168]	; (800c380 <scalbnf+0xc8>)
 800c2d6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c384 <scalbnf+0xcc>
 800c2da:	4298      	cmp	r0, r3
 800c2dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c2e0:	db16      	blt.n	800c310 <scalbnf+0x58>
 800c2e2:	ee10 3a10 	vmov	r3, s0
 800c2e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c2ea:	3a19      	subs	r2, #25
 800c2ec:	4402      	add	r2, r0
 800c2ee:	2afe      	cmp	r2, #254	; 0xfe
 800c2f0:	dd15      	ble.n	800c31e <scalbnf+0x66>
 800c2f2:	ee10 3a10 	vmov	r3, s0
 800c2f6:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c388 <scalbnf+0xd0>
 800c2fa:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c38c <scalbnf+0xd4>
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	eeb0 7a67 	vmov.f32	s14, s15
 800c304:	bfb8      	it	lt
 800c306:	eef0 7a66 	vmovlt.f32	s15, s13
 800c30a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c30e:	4770      	bx	lr
 800c310:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c390 <scalbnf+0xd8>
 800c314:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c318:	4770      	bx	lr
 800c31a:	0dd2      	lsrs	r2, r2, #23
 800c31c:	e7e6      	b.n	800c2ec <scalbnf+0x34>
 800c31e:	2a00      	cmp	r2, #0
 800c320:	dd06      	ble.n	800c330 <scalbnf+0x78>
 800c322:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c326:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c32a:	ee00 3a10 	vmov	s0, r3
 800c32e:	4770      	bx	lr
 800c330:	f112 0f16 	cmn.w	r2, #22
 800c334:	da1a      	bge.n	800c36c <scalbnf+0xb4>
 800c336:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c33a:	4298      	cmp	r0, r3
 800c33c:	ee10 3a10 	vmov	r3, s0
 800c340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c344:	dd0a      	ble.n	800c35c <scalbnf+0xa4>
 800c346:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c388 <scalbnf+0xd0>
 800c34a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c38c <scalbnf+0xd4>
 800c34e:	eef0 7a40 	vmov.f32	s15, s0
 800c352:	2b00      	cmp	r3, #0
 800c354:	bf18      	it	ne
 800c356:	eeb0 0a47 	vmovne.f32	s0, s14
 800c35a:	e7db      	b.n	800c314 <scalbnf+0x5c>
 800c35c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c390 <scalbnf+0xd8>
 800c360:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c394 <scalbnf+0xdc>
 800c364:	eef0 7a40 	vmov.f32	s15, s0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	e7f3      	b.n	800c354 <scalbnf+0x9c>
 800c36c:	3219      	adds	r2, #25
 800c36e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c372:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c376:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c398 <scalbnf+0xe0>
 800c37a:	ee07 3a10 	vmov	s14, r3
 800c37e:	e7c4      	b.n	800c30a <scalbnf+0x52>
 800c380:	ffff3cb0 	.word	0xffff3cb0
 800c384:	4c000000 	.word	0x4c000000
 800c388:	7149f2ca 	.word	0x7149f2ca
 800c38c:	f149f2ca 	.word	0xf149f2ca
 800c390:	0da24260 	.word	0x0da24260
 800c394:	8da24260 	.word	0x8da24260
 800c398:	33000000 	.word	0x33000000

0800c39c <__errno>:
 800c39c:	4b01      	ldr	r3, [pc, #4]	; (800c3a4 <__errno+0x8>)
 800c39e:	6818      	ldr	r0, [r3, #0]
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	200001a0 	.word	0x200001a0

0800c3a8 <__libc_init_array>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	4d0d      	ldr	r5, [pc, #52]	; (800c3e0 <__libc_init_array+0x38>)
 800c3ac:	4c0d      	ldr	r4, [pc, #52]	; (800c3e4 <__libc_init_array+0x3c>)
 800c3ae:	1b64      	subs	r4, r4, r5
 800c3b0:	10a4      	asrs	r4, r4, #2
 800c3b2:	2600      	movs	r6, #0
 800c3b4:	42a6      	cmp	r6, r4
 800c3b6:	d109      	bne.n	800c3cc <__libc_init_array+0x24>
 800c3b8:	4d0b      	ldr	r5, [pc, #44]	; (800c3e8 <__libc_init_array+0x40>)
 800c3ba:	4c0c      	ldr	r4, [pc, #48]	; (800c3ec <__libc_init_array+0x44>)
 800c3bc:	f000 f820 	bl	800c400 <_init>
 800c3c0:	1b64      	subs	r4, r4, r5
 800c3c2:	10a4      	asrs	r4, r4, #2
 800c3c4:	2600      	movs	r6, #0
 800c3c6:	42a6      	cmp	r6, r4
 800c3c8:	d105      	bne.n	800c3d6 <__libc_init_array+0x2e>
 800c3ca:	bd70      	pop	{r4, r5, r6, pc}
 800c3cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3d0:	4798      	blx	r3
 800c3d2:	3601      	adds	r6, #1
 800c3d4:	e7ee      	b.n	800c3b4 <__libc_init_array+0xc>
 800c3d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3da:	4798      	blx	r3
 800c3dc:	3601      	adds	r6, #1
 800c3de:	e7f2      	b.n	800c3c6 <__libc_init_array+0x1e>
 800c3e0:	0800c8e8 	.word	0x0800c8e8
 800c3e4:	0800c8e8 	.word	0x0800c8e8
 800c3e8:	0800c8e8 	.word	0x0800c8e8
 800c3ec:	0800c8f4 	.word	0x0800c8f4

0800c3f0 <memset>:
 800c3f0:	4402      	add	r2, r0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d100      	bne.n	800c3fa <memset+0xa>
 800c3f8:	4770      	bx	lr
 800c3fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c3fe:	e7f9      	b.n	800c3f4 <memset+0x4>

0800c400 <_init>:
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	bf00      	nop
 800c404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c406:	bc08      	pop	{r3}
 800c408:	469e      	mov	lr, r3
 800c40a:	4770      	bx	lr

0800c40c <_fini>:
 800c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40e:	bf00      	nop
 800c410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c412:	bc08      	pop	{r3}
 800c414:	469e      	mov	lr, r3
 800c416:	4770      	bx	lr
